import "macros.del";

define ownerBots: FilteredArray(AllPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player);

// global
globalvar define DISTANCE; // distance before bot teleports to owner
globalvar define playerAmountArray; // amount of players and bots (from 0 - 5)

// all
playervar define CCed; // if cc status is applied to a player
playervar define playerSlot; // get slot of player to create bots for
playervar define genjiAO;

// stats
playervar define totalKills; // total amount of kills owner and bots have
playervar define totalDeaths; // total amount of deaths owner and bots have
playervar define totalDamageDealt; // total amount of damage owner and bots have done
playervar define totalDamageRecieved; // total amount of damage owner and bots have taken
playervar define totalHealDealt; // total amount of healing owner and bots have done
playervar define totalHealRecieved; // total amount of healing owner and bots have recieved

playervar define killAmount; // amount of kills a bot has
playervar define deathAmount; // amount of deaths a bot has
playervar define damageDealtAmount; // amount of damage a bot has done

// owner
playervar define owner; // determines who owns a set of bots
playervar define ownerAlive; // whether the owner is alive
playervar define isRezzing; // checks if the owner is rezzing
playervar define closestPlayer; // closest bot to owner upon death
playervar define positionOf; // position of the closestPlayer
playervar define facingDir; // facing direction of the closestPlayer

// bot
playervar define botCheck; // check if player has enough bots, if not, destroy all bots in the lobby to refresh
playervar define botAlive; // whether a bot is alive (self explanitory)

// misc
playervar define name;

rule: "Initial Global"
    {
        DISTANCE = 12;
        playerAmountArray = [5, 4, 3, 2, 1, 0];
        DisableInspectorRecording();
        CreateHudText(all, null, "Created by Fuzsion#11545\r\n             Share Code: KEGSMã…¤", null, Location.Right, -1);
        // ServerLoadText();
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        playerSlot = EmptyArray();
        name = <"<0>", player>;
        totalKills = "None";
        totalDeaths = "None";
        totalDamageDealt = "None";
        totalDamageRecieved = "None";
        totalHealDealt = "None";
        totalHealRecieved = "None";
    }

rule: "[All] :: CCed"
    Event.OngoingPlayer
    if (HasStatus(player, Status.Asleep) || 
    HasStatus(player, Status.Frozen) || 
    HasStatus(player, Status.KnockedDown) || 
    HasStatus(player, Status.Rooted) || 
    HasStatus(player, Status.Stunned))
    {
        Wait(0.080);
        CCed = true;
    }

rule: "[All] :: Not CCed"
    Event.OngoingPlayer
    if (!HasStatus(player, Status.Asleep) && 
    !HasStatus(player, Status.Frozen) && 
    !HasStatus(player, Status.KnockedDown) && 
    !HasStatus(player, Status.Rooted) && 
    !HasStatus(player, Status.Stunned))
    {
        Wait(0.080);
        CCed = false;
    }

disabled rule: "[Optional] :: Aim Effect"
    Event.OngoingPlayer
    {
        CreateEffect(AllyPlayers(), Effect.GoodAura, Color.Red, RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 100), 0.001);
    }


disabled rule: "---------------- Ability Changes (AC) ----------------"{}
                /////////////                            /////////////
                /////////////    ABILITY CHANGES (AC)    /////////////
                /////////////                            /////////////

rule: "[AC] :: Sombra"
    Event.OngoingPlayer
    Player.Sombra
    if (IsDummyBot())
    {
        DisableAbility2();
    }

// stupid gross fucking mei bug fix fuck you blizzard god i hate ur fucking guts
rule: "[AC] :: Mei"
    Event.OngoingPlayer
    Player.Mei
    if (IsDummyBot() && !IsUsingAbility1(owner))
    {
        CancelPrimaryAction();
    }

rule: "[AC] :: Mercy"
    Event.OngoingPlayer
    Player.Mercy
    if (IsDummyBot())
    {
        DisableAbility1();
    }

rule: "[AC] :: Genji On"
    Event.OngoingPlayer
    Player.Genji
    if (IsUsingAbility1())
    {
        StartDamageModification(EnemyPlayers(), player, 33.334);
        genjiAO = LastDamageModificationID();
    }

rule: "[AC] :: Genji Off"
    Event.OngoingPlayer
    Player.Genji
    if (!IsUsingAbility1())
    {
        StopDamageModification(genjiAO);
    }

disabled rule: "---------------- Owner Rules ----------------"{}

                /////////////                   /////////////
                /////////////    OWNER RULES    /////////////
                /////////////                   /////////////

rule: "[Owner] :: Create Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && HasSpawned() && IsAlive() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && 
                                                    IsDummyBot(ArrayElement()))) 
                                                    < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement())))) 
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
                                                    Rounding.Down)))
    {
        owner = player;

        playerSlot = FirstOf(FilteredArray(playerAmountArray, 
                            !EntityExists(PlayersInSlot(ArrayElement(), TeamOf())) || (IsDummyBot(ArrayElement()) && !EntityExists(ArrayElement().owner))));

        CreateDummyBot(HeroOf(), TeamOf(), playerSlot, PositionOf() + WorldVectorOf(Vector(0, 0, -0.6), player), FacingDirectionOf());
        PlayersInSlot(playerSlot, TeamOf()).owner = player;
        Wait(0.032);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Destroy Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && 
                                                    IsDummyBot(ArrayElement()))) 
                                                    > RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))))
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
                                                    Rounding.Down)))
    {
        owner = player;

        DestroyDummyBot(TeamOf(), 
        LastOf(FilteredArray(playerAmountArray, IsDummyBot(PlayersInSlot(ArrayElement(), TeamOf())) && 
        PlayersInSlot(ArrayElement(), TeamOf()).owner == player && 
        EntityExists(PlayersInSlot(ArrayElement(), TeamOf())))));

        Wait(0.032);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: On Death Replace Healthiest Bot"
    Event.OnDeath
    if (!IsDummyBot() && IsTrueForAny(AllLivingPlayers(TeamOf()), ArrayElement().owner == player && IsDummyBot(ArrayElement())))
    {
        isRezzing = true;
        closestPlayer = FilteredArray(AllLivingPlayers(), ArrayElement() != player && ArrayElement().owner == player);
        closestPlayer = LastOf(SortedArray(closestPlayer, NormalizedHealth(ArrayElement())));
        positionOf = PositionOf(closestPlayer);
        facingDir = FacingDirectionOf(closestPlayer);
        SetFacing(closestPlayer, Facing(), Relative.ToWorld);
        Wait(0.080);
        Kill(closestPlayer);
        Teleport(closestPlayer, PositionOf());
        Teleport(player, positionOf);
        SetFacing(player, facingDir, Relative.ToWorld);
        Resurrect();
        Wait(0.032);
        CancelPrimaryAction(ownerBots);
        Damage(player, null, Health() / 2.66);
        isRezzing = false;
    }

rule: "[Owner] :: Alive"
    Event.OngoingPlayer
    if ((IsDummyBot() && IsAlive(owner)) || (!IsDummyBot() && IsAlive() && !isRezzing))
    {
        ownerAlive = true;
    }

rule: "[Owner] :: Dead"
    Event.OnDeath
    if (!isRezzing)
    {
        ownerAlive = false;
    }

rule: "[Owner] :: Owner Dead; Prevent Bot Spawning"
    Event.OngoingPlayer
    if (!ownerAlive)
    {
        Wait(0.08);
        DisableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Owner Alive; Re-enable Bot Spawning"
    Event.OngoingPlayer
    if (ownerAlive)
    {
        Wait(0.08);
        Respawn(ownerBots);
        EnableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Stun Status On"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Stunned))
    {
        Wait(0.080);
        SetStatus(ownerBots, null, Status.Stunned, 2.5);
    }

rule: "[Owner] :: Stun Status Off"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Stunned))
    {
        Wait(0.080);
        ClearStatus(player, Status.Stunned);
    }

rule: "[Owner] :: Sleep Status On"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Asleep))
    {
        Wait(0.080);
        SetStatus(ownerBots, null, Status.Asleep, 5.5);
    }

rule: "[Owner] :: Sleep Status Off"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Asleep))
    {
        Wait(0.080);
        ClearStatus(player, Status.Asleep);
    }

rule: "[Owner] :: Freeze Status On"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Frozen))
    {
        Wait(0.080);
        SetStatus(ownerBots, null, Status.Frozen, 7.35);
    }

rule: "[Owner] :: Freeze Status Off"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Frozen))
    {
        Wait(0.080);
        ClearStatus(player, Status.Frozen);
    }

rule: "[Owner] :: Knockdown Status On"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.KnockedDown))
    {
        Wait(0.080);
        SetStatus(ownerBots, null, Status.KnockedDown, 3);
    }

rule: "[Owner] :: Knockdown Status Off"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.KnockedDown))
    {
        Wait(0.080);
        ClearStatus(player, Status.KnockedDown);
    }

rule: "[Owner] :: Hack Status On"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Hacked))
    {
        Wait(0.080);
        SetStatus(ownerBots, null, Status.Hacked, 5.5);
    }

rule: "[Owner] :: Hack Status Off"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Hacked))
    {
        Wait(0.080);
        ClearStatus(player, Status.Hacked);
    }

disabled rule: "---------------- Bot Rules ----------------"{}

                /////////////                 /////////////
                /////////////    BOT RULES    /////////////
                /////////////                 /////////////

rule: "[Bot] :: Alive"
    Event.OngoingPlayer
    if (IsDummyBot() && IsAlive())
    {
        EnableRespawning();
        botAlive = true;
    }

rule: "[Bot] :: Dead"
    Event.OngoingPlayer
    if (IsDummyBot() && IsDead())
    {
        if (UltimateChargePercent(owner) == 100)
            SetUltimateCharge(player, 0);

        SetUltimateCharge(player, 0);
        botAlive = false;
    }

rule: "[Bot] :: Incorrect Hero"
    Event.OngoingPlayer
    if (IsDummyBot() && !(EntityExists(owner) && HeroOf() == HeroOf(owner) && TeamOf() == TeamOf(owner)))
    {
        Wait(0.080);
        DestroyDummyBot(TeamOf(), SlotOf());
    }

rule: "[Bot] :: Enable Ult"
    Event.OngoingPlayer
    if (UltimateChargePercent(owner) == 100 && botAlive)
    {
        Wait(0.080);
        SetUltimateAbilityEnabled(player, true);
        SetUltimateCharge(player, 100);
    }

rule: "[Bot] :: Disable ult"
    Event.OngoingPlayer
    if (IsDummyBot() && (UltimateChargePercent(owner) != 100 || !IsUsingUltimate(owner) || IsDead()))
    {
        WaitIfTrue(0.080);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

rule: "[Bot] :: Owner out of range"
    Event.OngoingPlayer
    if (botAlive && IsAlive(owner) && !CCed && DistanceBetween(owner, player) > DISTANCE)
    {
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));
    }

rule: "[Bot] :: Owner out of sight"
    Event.OngoingPlayer
    if (botAlive && IsAlive(owner) && !CCed && !IsInLineOfSight(owner, player))
    {
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));
    }

disabled rule: "---------------- Input Emulation (IE) ----------------"{}

                /////////////                            /////////////
                /////////////    INPUT EMULATION (IE)    /////////////
                /////////////                            /////////////

rule: "[IE] :: Aim & Movement"
    Event.OngoingPlayer
    if (botAlive && !CCed && HasSpawned())
    {
        StartThrottleInDirection(player, WorldVectorOf(ThrottleOf(owner), owner, LocalVector.Rotation), ThrottleOf(owner) != Vector(0,0,0));

        StartFacing(player, DirectionTowards(EyePosition(), 
        RayCastHitPosition(EyePosition(owner), EyePosition(owner) + FacingDirectionOf(owner) * 100, AllLivingPlayers(OppositeTeamOf(TeamOf(owner))), AllLivingPlayers(TeamOf(owner)), true)), 
        10000);
    }

rule: "[IE] :: Mercy Aim"
    Event.OngoingPlayer
    Player.Mercy
    if (botAlive && !CCed && HasSpawned())
    {
        StartFacing(player, DirectionTowards(EyePosition(), EyePosition(owner)), 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
        StartHoldingButton(player, Button.PrimaryFire);
    }

rule: "[IE] :: Stop Aim"
    Event.OngoingPlayer
    if (botAlive && (CCed))
    {
        StopFacing();
    }

rule: "[IE] :: Set CD on Bot Spawn"
    Event.OngoingPlayer
    if (botAlive)
    {
        SetAbilityCooldown(player, ButtonValue(Button.PrimaryFire), AbilityCooldown(owner, ButtonValue(Button.PrimaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.SecondaryFire), AbilityCooldown(owner, ButtonValue(Button.SecondaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(owner, ButtonValue(Button.Ability1)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability2), AbilityCooldown(owner, ButtonValue(Button.Ability2)));
        SetAbilityCooldown(player, ButtonValue(Button.Jump), AbilityCooldown(owner, ButtonValue(Button.Jump)));
        SetAbilityCooldown(player, ButtonValue(Button.Crouch), AbilityCooldown(owner, ButtonValue(Button.Crouch)));
    }

rule: "[IE] :: Hello"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsCommunicating(player, Communication.Hello))
    {
        define bots = ownerBots;
        Communicate(bots, Communication.Hello);
    }

                        // button pressed //

define livingBots: FilteredArray(AllLivingPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player);

rule: "[IE] :: Pressed Primary"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.PrimaryFire) && IsAlive() && !CCed && !IsHero(Hero.Mercy))
    {
        StartHoldingButton(livingBots, Button.PrimaryFire);
    }

rule: "[IE] :: Pressed Secondary"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.SecondaryFire) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.SecondaryFire);
    }

rule: "[IE] :: Pressed Ability 1"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Ability1) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Ability1);
    }

rule: "[IE] :: Pressed Ability 2"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Ability2) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Ability2);
    }

rule: "[IE] :: Pressed Ultimate"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Ultimate) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Ultimate);
        Wait(0.08);
        LoopIf(IsButtonHeld(player, Button.Ultimate));
    }

rule: "[IE] :: Pressed Jump"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Jump) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Jump);
    }

rule: "[IE] :: Pressed Crouch"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Crouch) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Crouch);
    }

rule: "[IE] :: Pressed Melee"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Melee) && IsAlive() && !CCed && !IsHero(Hero.Mercy))
    {
        StartHoldingButton(livingBots, Button.Melee);
    }

rule: "[IE] :: Pressed Reload"
    Event.OngoingPlayer
    if (!IsDummyBot() && IsButtonHeld(player, Button.Reload) && IsAlive() && !CCed)
    {
        StartHoldingButton(livingBots, Button.Reload);
    }

                           // release //

rule: "[IE] :: Released Primary"
    Event.OngoingPlayer
    if (!IsDummyBot() && !IsHero(Hero.Mercy) && (!IsButtonHeld(player, Button.PrimaryFire) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.PrimaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.PrimaryFire), AbilityCooldown(player, ButtonValue(Button.PrimaryFire)));
    }

rule: "[IE] :: Released Secondary"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.SecondaryFire) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.SecondaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.SecondaryFire), AbilityCooldown(player, ButtonValue(Button.SecondaryFire)));
    }

rule: "[IE] :: Released Ability 1"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Ability1) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability1);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability1), AbilityCooldown(player, ButtonValue(Button.Ability1)));
    }

rule: "[IE] :: Released Ability 2"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Ability2) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability2);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability2), AbilityCooldown(player, ButtonValue(Button.Ability2)));
    }

rule: "[IE] :: Released Ultimate"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Ultimate) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ultimate);
    }

rule: "[IE] :: Released Jump"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Jump) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Jump);
        SetAbilityCooldown(bots, ButtonValue(Button.Jump), AbilityCooldown(player, ButtonValue(Button.Jump)));
    }

rule: "[IE] :: Released Crouch"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Crouch) || IsDead() || CCed))
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Crouch);
        SetAbilityCooldown(bots, ButtonValue(Button.Crouch), AbilityCooldown(player, ButtonValue(Button.Crouch)));
    }

rule: "[IE] :: Released Melee"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Melee) || IsDead() || CCed))
    {
        StopHoldingButton(ownerBots, Button.Melee);
    }

rule: "[IE] :: Released Reload"
    Event.OngoingPlayer
    if (!IsDummyBot() && (!IsButtonHeld(player, Button.Reload) || IsDead() || CCed))
    {
        StopHoldingButton(ownerBots, Button.Reload);
    }

disabled rule: "---------------- Stats ----------------"{}

                /////////////             /////////////
                /////////////    STATS    /////////////
                /////////////             /////////////

rule: "[Stats] :: Update Kills"
    Event.OnFinalBlow
    {
        killAmount++;
        (owner == null ? player : owner).totalKills++;
    }

rule: "[Stats] :: Update Deaths"
    Event.OnDeath
    if (!isRezzing)
    {
        deathAmount++;
        (owner == null ? player : owner).totalDeaths++;
    }

rule: "[Stats] :: Update Damage Dealt"
    Event.OnDamageDealt
    if (Victim() != player)
    {
        damageDealtAmount += RoundToInteger(EventDamage(), Rounding.Nearest);
        (owner == null ? player : owner).totalDamageDealt += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Damage Recieved"
    Event.OnDamageTaken
    if (Attacker() != player)
    {
        (owner == null ? player : owner).totalDamageRecieved += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Heal Dealt"
    Event.OnHealingDealt
    {
        (owner == null ? player : owner).totalHealDealt += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Heal Recieved"
    Event.OnHealingTaken
    {
        (owner == null ? player : owner).totalHealRecieved += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

disabled rule: "---------------- HUD Text ----------------"{}

                /////////////                /////////////
                /////////////    HUD TEXT    /////////////
                /////////////                /////////////

rule: "[HUD] :: Total Stats"
    Event.OngoingPlayer
    {
        Wait(0.5);
        CreateHudText(player, null, null,
        <"Kills: <0> | Deaths: <1> \r\n<2>", totalKills, totalDeaths, 
        <"DMG Dealt: <0> | DMG Recieved: <1> \r\n<2>", totalDamageDealt, totalDamageRecieved, 
        <"Heal Dealt: <0> | Heal Recieved: <1> \r\nã…¤", totalHealDealt, totalHealRecieved>>>, 
        Location.Left, SlotOf(), Color.White, Color.White, Color.White);
    }

rule: "[HUD] :: Bot Stats"
    Event.OngoingPlayer
    if (IsDummyBot())
    {
        Wait(0.5);

        /* more than 170/200 */
        CreateHudText(NormalizedHealth() >= 0.85 ? owner : null,
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>ã…¤", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPã…¤", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Green, Color.White, Color.Green);

        /* 170/200 - 120/200 */
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.85 && NormalizedHealth() >= 0.6),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>ã…¤", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPã…¤", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Yellow, Color.White, Color.Yellow);

        /* 120/200 - 70/200*/
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.6 && NormalizedHealth() >= 0.35),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>ã…¤", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPã…¤", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Orange, Color.White, Color.Orange);

        /* less than 70/200 */
        CreateHudText(FilteredArray(owner, 
                      IsAlive() && NormalizedHealth() < 0.35),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>ã…¤", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> <1> HP <0>ã…¤", IconString(Icon.Warning), RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Red, Color.White, Color.Red);

        /* dead */
        CreateHudText(IsDead() ? owner : null,
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>ã…¤", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> Dead <0>ã…¤", IconString(Icon.Skull)>,
                      Location.Left, SlotOf(), Color.Red, Color.Red, Color.Red);
    }

disabled rule: "---------------- Fail Safes (FS) ----------------"{}

                /////////////                      /////////////
                /////////////    FAIL SAFES (FS)   /////////////
                /////////////                      /////////////

rule: "[FS] :: Not Enough Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && HasSpawned() && IsAlive() && 
        (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && EntityExists(ArrayElement()) && IsDummyBot(ArrayElement()))) 
        < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement())))) 
        / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
        Rounding.Down)))
    {
        botCheck += 1;
        Wait(1);
        SkipIf(botCheck < 4, 2);
        DestroyAllDummyBots();
        Skip(1);
        LoopIfConditionIsTrue();
        botCheck = 0;
    }

rule: "[FS] :: Bot Ult Charge"
    Event.OngoingPlayer
    if (IsDummyBot() && UltimateChargePercent(owner) != 100 && UltimateChargePercent() > 1)
    {
        WaitIfTrue(3);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

rule: "[FS] :: CC"
    Event.OngoingPlayer
    if (CCed)
    {
        WaitIfTrue(8);
        CCed = false;
    }

rule: "[FS] :: Player Spawn"
    Event.OngoingPlayer
    if (IsDead())
    {
        WaitIfTrue(30);
        EnableRespawning();
        Respawn();
    }

disabled rule: "---------------- Debug ----------------"{}

                /////////////             /////////////
                /////////////    DEBUG    /////////////
                /////////////             /////////////

disabled rule: "[DBG] :: CC All Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())), null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC Owner Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(ownerBots, null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(player, null, Status.Stunned, 2);
    }

disabled rule: "[DBG] :: Kill All Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())));
    }

disabled rule: "[DBG] :: Kill Owner Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(ownerBots);
    }

disabled rule: "[DBG] :: Kill"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill();
    }

disabled rule: "[DBG] :: Kill All"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(all);
    }

disabled rule: "[DBG] :: HUD"
    Event.OnPlayerJoin
    if (!IsDummyBot())
    {
        MinWait();
        CreateHudText(player, null, null, <"PrimaryFire: <0>", IsFiringPrimary()>, Location.Right, -1);
        CreateHudText(player, null, null, <"SecondaryFire: <0>", IsFiringSecondary()>, Location.Right, -1);
        CreateHudText(player, null, null, <"Ability1: <0>", IsUsingAbility1()>, Location.Right, -1);
        CreateHudText(player, null, null, <"Ability2: <0>", IsUsingAbility2()>, Location.Right, -1);
        CreateHudText(player, null, null, <"Reload: <0>", IsButtonHeld(player, Button.Reload)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Jump: <0>", IsJumping()>, Location.Right, -1);
        CreateHudText(player, null, null, <"Crouch: <0>", IsCrouching()>, Location.Right, -1);
        CreateHudText(player, null, null, <"Melee: <0>", IsMeleeing()>, Location.Right, -1);
        CreateHudText(player, null, null, <"isRezzing: <0>", isRezzing>, Location.Right, -1);
        CreateHudText(player, null, null, <"CCed: <0>", CCed>, Location.Right, -1);
        CreateHudText(player, null, null, <"ownerAlive: <0>", ownerAlive>, Location.Right, -1);
     }

disabled rule: "super special kyy rule"
    Event.OngoingPlayer
    if (name == "kyy")
    {
        SetAimSpeed(player, RandomReal(10, 200));
        Wait(1);
        LoopIfConditionIsTrue();
    }
