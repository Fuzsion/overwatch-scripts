import "macros.del";
define ownerBots: FilteredArray(AllPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player);
define livingBots: FilteredArray(AllLivingPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player);
// global
globalvar define DISTANCE; // maximum distance until bot teleports to owner
globalvar define playerAmount; // amount of players and bots (from 0 - 5)

// all
playervar define CCed; // if cc status is applied to a player
playervar define playerSlot; // get slot of player to create bots for
playervar define genjiAO; // genji damage nerf
playervar define infoText; // disclaimer text array
playervar define infoTimer; // disclaimer timer

// stats
playervar define totalKills; // total amount of kills owner and bots have
playervar define totalDeaths; // total amount of deaths owner and bots have
playervar define totalDamageDealt; // total amount of damage owner and bots have done
playervar define totalDamageRecieved; // total amount of damage owner and bots have taken
playervar define totalHealDealt; // total amount of healing owner and bots have done
playervar define totalHealRecieved; // total amount of healing owner and bots have recieved

playervar define killAmount; // amount of kills a bot has
playervar define deathAmount; // amount of deaths a bot has
playervar define damageDealtAmount; // amount of damage a bot has done

// owner
playervar define owner; // determines who owns a set of bots
playervar define ownerAlive; // whether the owner is alive
playervar define isRezzing; // checks if the owner is rezzing
playervar define closestPlayer; // closest bot to owner upon death
playervar define positionOf; // position of the closestPlayer
playervar define facingDir; // facing direction of the closestPlayer
playervar define healthOf; // health of the closestPlayer
playervar define healOT; // heal over time for the owner
playervar define timer; // time out of combat

// bot
playervar define botAlive; // if a bot is alive

rule: "Initial Global"
    {
        DISTANCE = 12;
        playerAmount = [5, 4, 3, 2, 1, 0];
        // DisableInspectorRecording();
        DisableAnnouncer();
        CreateHudText(all, null, "Created by Fuzsion#11545\r\n             Share Code: WRYEPㅤ", null, Location.Right, 0);
        // ServerLoadText();
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        playerSlot = EmptyArray();
        totalKills = "None";
        totalDeaths = "None";
        totalDamageDealt = "None";
        totalDamageRecieved = "None";
        totalHealDealt = "None";
        totalHealRecieved = "None";
    }

rule: "Info Text"
    Event.OnPlayerJoin
    if ( !IsDummyBot() )
    {
        infoTimer = 60;
        ChaseVariableAtRate(infoTimer, 0, 1, RateChaseReevaluation.DestinationAndRate);
        infoText = EmptyArray();
        CreateHudText(player, null, null, <"ㅤ\r\n<0> Notice <0>\r\n", IconString(Icon.Warning)>, Location.Top, 1, Color.Yellow, Color.Yellow, Color.Yellow);
        infoText[0] = LastTextID();
        CreateHudText(player, null, "This is an in-development complete rewrite written in OSTW, entirely independent from the mode this is inspired from.", null, Location.Top, 2);
        infoText[1] = LastTextID();
        CreateHudText(player, null, "I have no association with the gamemode, code, or creator. This is just a pet project of mine.", null, Location.Top, 3);
        infoText[2] = LastTextID();
        MinWait();
        CreateHudText(player, null, "Nothing is from said mode, including code. Bugs will be fixed as soon as I'm made aware of them.", null, Location.Top, 4);
        infoText[3] = LastTextID();
        CreateHudText(player, null, "Please tell me about any issues or suggestions you have, either by adding my Btag in the top right or by telling me in-game.", null, Location.Top, 5);
        infoText[4] = LastTextID();
        CreateHudText(player, null, null, <"This message will disappear in <0> s", RoundToInteger(infoTimer, Rounding.Up)>, Location.Top, 6);
        infoText[5] = LastTextID();

        Wait(60);
        DestroyHudText(infoText[0]);
        DestroyHudText(infoText[1]);
        DestroyHudText(infoText[2]);
        MinWait();
        DestroyHudText(infoText[3]);
        DestroyHudText(infoText[4]);
        DestroyHudText(infoText[5]);
        StopChasingVariable(infoTimer);
        infoText = EmptyArray();
    }

rule: "[All] :: Assembling Heroes Time"
    if ( IsAssemblingHeroes() )
    {
        SetMatchTime(15);
    }

rule: "[All] :: CCed"
    Event.OngoingPlayer
    if ( HasStatus(player, Status.Asleep) || 
    HasStatus(player, Status.Frozen) || 
    HasStatus(player, Status.KnockedDown) || 
    HasStatus(player, Status.Rooted) || 
    HasStatus(player, Status.Hacked) ||
    HasStatus(player, Status.Stunned) )
    {
        CCed = true;
    }

rule: "[All] :: Not CCed"
    Event.OngoingPlayer
    if ( !HasStatus(player, Status.Asleep) && 
    !HasStatus(player, Status.Frozen) && 
    !HasStatus(player, Status.KnockedDown) && 
    !HasStatus(player, Status.Rooted) && 
    !HasStatus(player, Status.Hacked) &&
    !HasStatus(player, Status.Stunned) )
    {
        CCed = false;
    }

disabled rule: "---------------- Ability Changes (AC) ----------------"{}
                /////////////                            /////////////
                /////////////    ABILITY CHANGES (AC)    /////////////
                /////////////                            /////////////

rule: "[AC] :: Sombra"
    Event.OngoingPlayer
    Player.Sombra
    if ( IsDummyBot() )
    {
        DisableAbility2();
    }

rule: "[AC] :: Sombra Stealth After Bot Spawns"
    Event.OngoingPlayer
    Player.Sombra
    if ( IsUsingAbility1(owner) && botAlive )
    {
        while ( !IsUsingAbility1() )
        {
            Wait(0.16);
            PressButton(IsAlive() ? player : null, Button.Ability1);
        }
    }

rule: "[AC] :: Sombra Unstealth Bots"
    Event.OngoingPlayer
    Player.Sombra
    if ( !IsUsingAbility1(owner) && IsUsingAbility1() )
    {
        PressButton(IsAlive() ? player : null, Button.Ability1);
    }

// stupid gross fucking mei bug fix fuck you blizzard
rule: "[AC] :: Mei Cancel Ice Block"
    Event.OngoingPlayer
    Player.Mei
    if ( !IsUsingAbility1(owner) )
    {
        CancelPrimaryAction();
    }

rule: "[AC] :: Mei Ice Block After Bot Spawns"
    Event.OngoingPlayer
    Player.Mei
    if ( IsUsingAbility1(owner) && botAlive )
    {
        while ( !IsUsingAbility1() )
        {
            Wait(0.16);
            PressButton(IsAlive() ? player : null, Button.Ability1);
        }
    }

rule: "[AC] :: Genji On"
    Event.OngoingPlayer
    Player.Genji
    if ( IsUsingAbility1() )
    {
        StartDamageModification(EnemyPlayers(), player, 33.334);
        genjiAO = LastDamageModificationID();
    }

rule: "[AC] :: Genji Off"
    Event.OngoingPlayer
    Player.Genji
    if ( !IsUsingAbility1() )
    {
        StopDamageModification(genjiAO);
    }

disabled rule: "---------------- Owner Rules ----------------"{}

                /////////////                   /////////////
                /////////////    OWNER RULES    /////////////
                /////////////                   /////////////

// adding 'owner = player;' in the bottom two rules will set the human player as the owner, which is redundant
rule: "[Owner] :: Create Bots"
    Event.OngoingPlayer
    if ( !IsDummyBot() && HasSpawned() && IsAlive() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && IsDummyBot(ArrayElement()))) 
                                                    < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()))))
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
                                                    Rounding.Down)) )
    {
        playerSlot = FirstOf(FilteredArray(playerAmount, 
                            !EntityExists(PlayersInSlot(ArrayElement(), TeamOf())) || (IsDummyBot(ArrayElement()) && !EntityExists(ArrayElement().owner))));

        CreateDummyBot(HeroOf(), TeamOf(), playerSlot, PositionOf() + WorldVectorOf(Vector(0, 0, -0.5), player), FacingDirectionOf());
        PlayersInSlot(playerSlot, TeamOf()).owner = player;
        Wait(0.048);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Destroy Bots"
    Event.OngoingPlayer
    if ( !IsDummyBot() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && IsDummyBot(ArrayElement()))) 
                                                    > RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))))
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
                                                    Rounding.Down)) )
    {
        DestroyDummyBot(TeamOf(), 
        LastOf(FilteredArray(playerAmount, IsDummyBot(PlayersInSlot(ArrayElement(), TeamOf())) && 
        PlayersInSlot(ArrayElement(), TeamOf()).owner == player && 
        EntityExists(PlayersInSlot(ArrayElement(), TeamOf())))));

        Wait(0.048);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: On Death Replace Healthiest Bot"
    Event.OnDeath
    if ( !IsDummyBot() && IsTrueForAny(AllLivingPlayers(TeamOf()), ArrayElement().owner == player && IsDummyBot(ArrayElement())) )
    {
        define bots = ownerBots;
        isRezzing = true;
        closestPlayer = FilteredArray(AllLivingPlayers(), ArrayElement() != player && ArrayElement().owner == player);
        closestPlayer = LastOf(SortedArray(closestPlayer, NormalizedHealth(ArrayElement())));
        positionOf = PositionOf(closestPlayer);
        facingDir = FacingDirectionOf(closestPlayer);
        healthOf = Health(closestPlayer)
        SetFacing(closestPlayer, Facing(), Relative.ToWorld);
        Kill(closestPlayer);
        Teleport(closestPlayer, PositionOf());
        Teleport(player, positionOf);
        SetFacing(player, facingDir, Relative.ToWorld);
        Resurrect();
        MinWait();
        CancelPrimaryAction(bots);
        Damage(player, null, MaxHealth() - healthOf);
        isRezzing = false;
    }

rule: "[Owner] :: Start healOT"
    Event.OngoingPlayer
    if ( !IsDummyBot() && timer == 0 ) // start heal
    {
        StopChasingVariable(timer);
        timer = 0
        StartHealOverTime(player, null, 10000, 20);
        healOT = LastHealOverTime();
    }

rule: "[Owner] :: Stop healOT" // stop heal
    Event.OnDamageTaken
    if ( !IsDummyBot() && !IsHero(Hero.Mercy) )
    {
        StopChasingVariable(timer);
        timer = 3
        ChaseVariableAtRate(timer, 0, 1, RateChaseReevaluation.DestinationAndRate);
        StopHealOverTime(healOT);
    }

rule: "[Owner] :: Stop healOT if Full HP"
    Event.OngoingPlayer
    if ( timer == 0 && Health() == MaxHealth() )
    {
        StopHealOverTime(healOT);
    }

rule: "[Owner] :: Alive"
    Event.OngoingPlayer
    if ( (IsDummyBot() && IsAlive(owner)) || (!IsDummyBot() && IsAlive() && !isRezzing) )
    {
        ownerAlive = true;
    }

rule: "[Owner] :: Dead"
    Event.OnDeath
    if ( !isRezzing )
    {
        ownerAlive = false;
    }

rule: "[Owner] :: Owner Dead; Prevent Bot Spawning"
    Event.OngoingPlayer
    if ( !ownerAlive )
    {
        DisableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Owner Alive; Re-enable Bot Spawning"
    Event.OngoingPlayer
    if ( ownerAlive )
    {
        Respawn(ownerBots);
        EnableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Stun Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Stunned) )
    {
        AbortIf(IsUsingAbility1(owner) && IsHero(Hero.Mei));

        while ( !HasStatus(player, Status.Stunned) )
        {
            Wait(0.064);
            SetStatus(player, null, Status.Stunned, 2.5);
        }
    }

rule: "[Owner] :: Stun Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Stunned) )
    {
        ClearStatus(player, Status.Stunned);
    }

rule: "[Owner] :: Sleep Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Asleep) && !HasStatus(player, Status.Asleep) )
    {
        SetStatus(player, null, Status.Asleep, 5.5);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Sleep Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Asleep) )
    {
        ClearStatus(player, Status.Asleep);
    }

rule: "[Owner] :: Freeze Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Frozen) && !HasStatus(player, Status.Frozen) )
    {
        SetStatus(player, null, Status.Frozen, 7.35);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Freeze Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Frozen) )
    {
        ClearStatus(player, Status.Frozen);
    }

rule: "[Owner] :: Knockdown Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.KnockedDown) && !HasStatus(player, Status.KnockedDown) )
    {
        SetStatus(player, null, Status.KnockedDown, 3);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Knockdown Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.KnockedDown) )
    {
        ClearStatus(player, Status.KnockedDown);
    }

rule: "[Owner] :: Hack Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Hacked) && !HasStatus(player, Status.Hacked) )
    {
        SetStatus(player, null, Status.Hacked, 5.5);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Hack Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Hacked) )
    {
        ClearStatus(player, Status.Hacked);
    }

disabled rule: "---------------- Bot Rules ----------------"{}

                /////////////                 /////////////
                /////////////    BOT RULES    /////////////
                /////////////                 /////////////

rule: "[Bot] :: Alive"
    Event.OngoingPlayer
    if ( IsDummyBot() && IsAlive() )
    {
        EnableRespawning();
        SetAbilityCooldown(player, ButtonValue(Button.PrimaryFire), AbilityCooldown(owner, ButtonValue(Button.PrimaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.SecondaryFire), AbilityCooldown(owner, ButtonValue(Button.SecondaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(owner, ButtonValue(Button.Ability1)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability2), AbilityCooldown(owner, ButtonValue(Button.Ability2)));
        SetAbilityCooldown(player, ButtonValue(Button.Jump), AbilityCooldown(owner, ButtonValue(Button.Jump)));
        SetAbilityCooldown(player, ButtonValue(Button.Crouch), AbilityCooldown(owner, ButtonValue(Button.Crouch)));
        botAlive = true;
    }

rule: "[Bot] :: Dead"
    Event.OngoingPlayer
    if ( IsDummyBot() && IsDead() )
    {
        botAlive = false;
        SetUltimateCharge(player, 0);
        SetUltimateAbilityEnabled(player, false);
    }

rule: "[Bot] :: Respawn Time"
    Event.OngoingPlayer
    if ( IsDummyBot() )
    {
        SetRespawnMaxTime(player, 15)
    }

rule: "[Bot] :: Incorrect Hero"
    Event.OngoingPlayer
    if ( IsDummyBot() && !( EntityExists(owner) && HeroOf() == HeroOf(owner) && TeamOf() == TeamOf(owner) ) )
    {
        Wait(0.080);
        DestroyDummyBot(TeamOf(), SlotOf());
    }

rule: "[Bot] :: Enable Ult"
    Event.OngoingPlayer
    if ( UltimateChargePercent(owner) == 100 && botAlive )
    {
        SetUltimateAbilityEnabled(player, true);
        SetUltimateCharge(player, 100);
        Wait(0.08);
        LoopIf(UltimateChargePercent(player) != 100);
    }

rule: "[Bot] :: Disable ult"
    Event.OngoingPlayer
    if ( IsDummyBot() && ( UltimateChargePercent(owner) != 100 || !IsUsingUltimate(owner) || IsDead() ) )
    {
        SetUltimateCharge(player, 0);
        SetUltimateAbilityEnabled(player, false);
    }

rule: "[Bot] :: Bot Ult Charge Failsafe"
    Event.OngoingPlayer
    if ( IsDummyBot() && UltimateChargePercent(owner) != 100 && UltimateChargePercent() > 0 )
    {
        WaitIfTrue(3);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

// @todo: optimize these teleport rules (sombra if)
// works for now but its gross

rule: "[Bot] :: Owner out of range"
    Event.OngoingPlayer
    if ( botAlive && IsAlive(owner) && !CCed && DistanceBetween(owner, player) > DISTANCE )
    {
        WaitIfTrue(0.25);

        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));

        AbortIf( IsHero(Hero.Sombra) && IsUsingAbility1() ); // prevent teleport effects from being played if sombra is stealthed
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
    }

rule: "[Bot] :: Owner out of sight"
    Event.OngoingPlayer
    if ( botAlive && IsAlive(owner) && !CCed && !IsInLineOfSight(owner, player) )
    {
        WaitIfTrue(0.25);

        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));

        AbortIf( IsHero(Hero.Sombra) && IsUsingAbility1() ); // prevent teleport effects from being played if sombra is stealthed
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
    }


disabled rule: "---------------- Input Emulation (IE) ----------------"{}

                /////////////                            /////////////
                /////////////    INPUT EMULATION (IE)    /////////////
                /////////////                            /////////////

rule: "[IE] :: Aim & Movement"
    Event.OngoingPlayer
    if ( botAlive && !CCed && HasSpawned() )
    {
        StartThrottleInDirection(player, WorldVectorOf(ThrottleOf(owner), owner, LocalVector.Rotation), ThrottleOf(owner) != Vector(0,0,0));

        StartFacing(player, DirectionTowards(EyePosition(), 
        RayCastHitPosition(EyePosition(owner), EyePosition(owner) + FacingDirectionOf(owner) * 100, AllLivingPlayers(OppositeTeamOf(TeamOf(owner))), AllLivingPlayers(TeamOf(owner)), true)), 
        10000);
    }

rule: "[IE] :: Mercy Aim"
    Event.OngoingPlayer
    Player.Mercy
    if ( botAlive && !CCed && HasSpawned() )
    {
        StartFacing(player, DirectionTowards(EyePosition(), EyePosition(owner)), 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
        StartHoldingButton(player, Button.PrimaryFire);
    }

rule: "[IE] :: Stop Aim"
    Event.OngoingPlayer
    if ( botAlive && CCed )
    {
        StopFacing();
    }

rule: "[IE] :: Hello"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsCommunicating(player, Communication.Hello) )
    {
        define bots = ownerBots;
        Communicate(bots, Communication.Hello);
    }

                        // button pressed //

rule: "[IE] :: Pressed Primary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.PrimaryFire) && IsAlive() && !CCed && !IsHero(Hero.Mercy) )
    {
        StartHoldingButton(livingBots, Button.PrimaryFire);
    }

rule: "[IE] :: Pressed Secondary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.SecondaryFire) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.SecondaryFire);
    }

rule: "[IE] :: Pressed Ability 1"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ability1) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ability1);
    }

rule: "[IE] :: Pressed Ability 2"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ability2) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ability2);
    }

rule: "[IE] :: Pressed Ultimate"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ultimate) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ultimate);
    }

rule: "[IE] :: Pressed Jump"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Jump) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Jump);
    }

rule: "[IE] :: Pressed Crouch"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Crouch) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Crouch);
    }

rule: "[IE] :: Pressed Melee"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Melee) && IsAlive() && !CCed && !IsHero(Hero.Mercy) )
    {
        StartHoldingButton(livingBots, Button.Melee);
    }

rule: "[IE] :: Pressed Reload"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Reload) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Reload);
    }

                           // release //

rule: "[IE] :: Released Primary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && !IsHero(Hero.Mercy) && (!IsButtonHeld(player, Button.PrimaryFire) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.PrimaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.PrimaryFire), AbilityCooldown(player, ButtonValue(Button.PrimaryFire)));
    }

rule: "[IE] :: Released Secondary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.SecondaryFire) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.SecondaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.SecondaryFire), AbilityCooldown(player, ButtonValue(Button.SecondaryFire)));
    }

rule: "[IE] :: Released Ability 1"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ability1) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability1);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability1), AbilityCooldown(player, ButtonValue(Button.Ability1)));
    }

rule: "[IE] :: Released Ability 2"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ability2) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability2);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability2), AbilityCooldown(player, ButtonValue(Button.Ability2)));
    }

rule: "[IE] :: Released Ultimate"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ultimate) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ultimate);
    }

rule: "[IE] :: Released Jump"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Jump) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Jump);
        SetAbilityCooldown(bots, ButtonValue(Button.Jump), AbilityCooldown(player, ButtonValue(Button.Jump)));
    }

rule: "[IE] :: Released Crouch"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Crouch) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Crouch);
        SetAbilityCooldown(bots, ButtonValue(Button.Crouch), AbilityCooldown(player, ButtonValue(Button.Crouch)));
    }

rule: "[IE] :: Released Melee"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Melee) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Melee);
    }

rule: "[IE] :: Released Reload"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Reload) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Reload);
    }

disabled rule: "---------------- HUD Text ----------------"{}

                /////////////                /////////////
                /////////////    HUD TEXT    /////////////
                /////////////                /////////////

rule: "[HUD] :: Update Kills"
    Event.OnFinalBlow
    {
        killAmount++;
        (owner == null ? player : owner).totalKills++;
    }

rule: "[HUD] :: Update Deaths"
    Event.OnDeath
    if ( !isRezzing )
    {
        deathAmount++;
        (owner == null ? player : owner).totalDeaths++;
    }

rule: "[HUD] :: Update Damage Dealt"
    Event.OnDamageDealt
    if ( Victim() != player )
    {
        damageDealtAmount += RoundToInteger(EventDamage(), Rounding.Nearest);
        (owner == null ? player : owner).totalDamageDealt += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Damage Recieved"
    Event.OnDamageTaken
    if ( Attacker() != player )
    {
        (owner == null ? player : owner).totalDamageRecieved += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Heal Dealt"
    Event.OnHealingDealt
    if ( Healee() != player )
    {
        (owner == null ? player : owner).totalHealDealt += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Heal Recieved"
    Event.OnHealingTaken
    if ( Healer() != player )
    {
        (owner == null ? player : owner).totalHealRecieved += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[HUD] :: Total Stats"
    Event.OngoingPlayer
    if ( !IsDummyBot() )
    {
        Wait(0.5);
        CreateHudText(player, null, null,
        <"Kills: <0> | Deaths: <1> \r\n<2>", totalKills, totalDeaths, 
        <"DMG Dealt: <0> | DMG Recieved: <1> \r\n<2>", totalDamageDealt, totalDamageRecieved, 
        <"Heal Dealt: <0> | Heal Recieved: <1> \r\n", totalHealDealt, totalHealRecieved>>>, 
        Location.Left, SlotOf(), Color.White, Color.White, Color.White);
    }

rule: "[HUD] :: Bot Stats"
    Event.OngoingPlayer
    if ( IsDummyBot() )
    {
        Wait(1.5);
        /* more than 170/200 */
        CreateHudText(NormalizedHealth() >= 0.85 ? owner : null,
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPㅤ", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Green, Color.White, Color.Green);

        /* 170/200 - 120/200 */
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.85 && NormalizedHealth() >= 0.6),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPㅤ", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Yellow, Color.White, Color.Yellow);

        /* 120/200 - 70/200*/
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.6 && NormalizedHealth() >= 0.35),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPㅤ", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Orange, Color.White, Color.Orange);

        /* less than 70/200 */
        CreateHudText(FilteredArray(owner, 
                      IsAlive() && NormalizedHealth() < 0.35),
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                      <"<0> HPㅤ", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Red, Color.White, Color.Red);

        /* dead */
        CreateHudText(IsDead() ? owner : null,
                      HeroIconString(HeroOf()),
                      <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                      "Deadㅤ",
                      Location.Left, SlotOf(), Color.Red, Color.Red, Color.Red);
    }

// disabled rule: "---------------- Fail Safes (FS) ----------------"{}

                /////////////                      /////////////
                /////////////    FAIL SAFES (FS)   /////////////
                /////////////                      /////////////

// shits fucked yo
// @todo: abort rule if someone hasnt selected a hero

// rule: "[FS] :: Not Enough Bots"
//     Event.OngoingPlayer
//     if ( !IsDummyBot() && HasSpawned() && IsAlive() &&
//        (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && IsDummyBot(ArrayElement()))) 
//                                                     < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))))
//                                                     / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
//                                                     Rounding.Down)) )
//     {
//         WaitIfTrue(5);
//         DestroyAllDummyBots();
//         LoopIfConditionIsTrue();
//     }

disabled rule: "---------------- Debug ----------------"{}

                /////////////             /////////////
                /////////////    DEBUG    /////////////
                /////////////             /////////////

disabled rule: "[DBG] :: Aim Effect"
    Event.OngoingPlayer
    {
        CreateEffect(owner, Effect.Sphere, Color.Red, RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 100, AllLivingPlayers(OppositeTeamOf(TeamOf())), AllLivingPlayers(TeamOf()), true), 0.1);
    }

disabled rule: "[DBG] :: CC All Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())), null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC Owner Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(ownerBots, null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(player, null, Status.Stunned, 2);
    }

disabled rule: "[DBG] :: Kill All Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
       Kill(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())));
    }

disabled rule: "[DBG] :: Kill Owner Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
       Kill(ownerBots);
    }

disabled rule: "[DBG] :: Kill"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
       Kill();
    }

disabled rule: "[DBG] :: Kill All"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
       Kill(all);
    }

rule: "[DBG] :: Damage"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
       Damage(player, player, 10);
    }

rule: "[DBG] :: HUD"
    Event.OnPlayerJoin
    if ( player == host )
    {
        CreateHudText(host, null, null, <"Holding PrimaryFire: <0>", IsButtonHeld(player, Button.PrimaryFire)>, Location.Right, 1);
        CreateHudText(host, null, null, <"Using PrimaryFire: <0>\n", IsFiringPrimary()>, Location.Right, 2);
    
        CreateHudText(host, null, null, <"Holding SecondayFire: <0>", IsButtonHeld(player, Button.SecondaryFire)>, Location.Right, 3);
        CreateHudText(host, null, null, <"Using SecondaryFire: <0>\n", IsFiringSecondary()>, Location.Right, 4);

        CreateHudText(host, null, null, <"Holding Ability1: <0>", IsButtonHeld(player, Button.Ability1)>, Location.Right, 5);
        CreateHudText(host, null, null, <"Using Ability1: <0>\n", IsUsingAbility1()>, Location.Right, 6);
        MinWait();

        CreateHudText(host, null, null, <"Holding Ability2: <0>", IsButtonHeld(player, Button.Ability2)>, Location.Right, 7);
        CreateHudText(host, null, null, <"Using Ability2: <0>\n", IsUsingAbility2()>, Location.Right, 8);

        CreateHudText(host, null, null, <"Holding Jump: <0>", IsButtonHeld(player, Button.Jump)>, Location.Right, 9);
        CreateHudText(host, null, null, <"Using Jump: <0>\n", IsJumping()>, Location.Right, 10);

        CreateHudText(host, null, null, <"Holding Crouch: <0>", IsButtonHeld(player, Button.Crouch)>, Location.Right, 11);
        CreateHudText(host, null, null, <"Using Crouch: <0>\n", IsCrouching()>, Location.Right, 12);
        MinWait();

        CreateHudText(host, null, null, <"Holding Melee: <0>", IsButtonHeld(player, Button.Melee)>, Location.Right, 13);
        CreateHudText(host, null, null, <"Using Melee: <0>\n", IsMeleeing()>, Location.Right, 14);
    
        CreateHudText(host, null, null, <"Holding Reload: <0>\n", IsButtonHeld(player, Button.Reload)>, Location.Right, 15);

        CreateHudText(host, null, null, <"isRezzing: <0>", isRezzing>, Location.Right, 16);
        CreateHudText(host, null, null, <"CCed: <0>", CCed>, Location.Right, 17);
        CreateHudText(host, null, null, <"ownerAlive: <0>", ownerAlive>, Location.Right, 18);
        CreateHudText(host, null, null, <"timer: <0>", timer>, Location.Right, 19);
     }
