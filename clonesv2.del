import "macros.del";
define ownerAim: RayCastHitPosition(EyePosition(owner), 
                 EyePosition(owner) + (FacingDirectionOf(owner) * 100), 
                 AllLivingPlayers(OppositeTeamOf(TeamOf(owner))), AllLivingPlayers(TeamOf(owner)), true);

define ownerBots: FilteredArray(AllPlayers(TeamOf()), IsDummyBot(ArrayElement()) && ArrayElement().owner == player);

// global
globalvar define DISTANCE; // distance before bot teleports to owner
globalvar define playerAmountArray; // amount of players and bots (from 0 - 5)

// all
playervar define CCed; // if cc status is applied to a player
playervar define playerSlot; // get slot of player to create bots for

// stats
playervar define totalKills; // total amount of kills owner and bots have
playervar define totalDeaths; // total amount of deaths owner and bots have
playervar define totalDamageDealt; // total amount of damage owner and bots have done
playervar define totalDamageRecieved; // total amount of damage owner and bots have taken
playervar define totalHealDealt; // total amount of healing owner and bots have done
playervar define totalHealRecieved; // total amount of healing owner and bots have recieved
playervar define killAmount; // amount of kills a bot has
playervar define deathAmount; // amount of deaths a bot has
playervar define damageDealtAmount; // amount of damage a bot has done

// owner
playervar define owner; // determines who owns a set of bots
playervar define ownerAlive; // whether the owner is alive
playervar define isRezzing; // checks if the owner is rezzing
playervar define closestPlayer; // closest bot to owner upon death
playervar define positionOf; // position of the closestPlayer
playervar define facingDir; // facing direction of the closestPlayer

// bot
playervar define botCheck; // check if player has enough bots, if not, destroy all bots in the lobby to refresh
playervar define botAlive; // whether a bot is alive (self explanitory)

// misc
// playervar define bastionToggle;

rule: "Init"
    {
        // DisableInspectorRecording();
        DISTANCE = 10;
        playerAmountArray = [5, 4, 3, 2, 1, 0];
        CreateHudText(all, null, "Created by Fuzsion#11545\r\n                Share Code: JRTHX", null, Location.Right, -1);
        // ServerLoadText();
    }

rule: "Player Join Init"
    Event.OnPlayerJoin
    {
        playerSlot = EmptyArray();
    }

rule: "[All] :: CCed"
    Event.OngoingPlayer
    if (HasStatus(player, Status.Asleep) || 
    HasStatus(player, Status.Frozen) || 
    HasStatus(player, Status.KnockedDown) || 
    HasStatus(player, Status.Rooted) || 
    HasStatus(player, Status.Stunned))
    {
        Wait(0.064);
        CCed = true;
    }

rule: "[All] :: Not CCed"
    Event.OngoingPlayer
    if (!HasStatus(player, Status.Asleep) && 
    !HasStatus(player, Status.Frozen) && 
    !HasStatus(player, Status.KnockedDown) && 
    !HasStatus(player, Status.Rooted) && 
    !HasStatus(player, Status.Stunned))
    {
        Wait(0.064);
        CCed = false;
    }

disabled rule: "---------------- Ability Overrides ----------------"{}

playervar define genjiAO;
// bug within AbilityCooldown() ignores the owners condition for sombra, 
// disabled ability2 for bots because the bots will just teleport to you 
// after a certain distance anyways
rule: "[AO] :: Sombra Ability Override"
    Event.OngoingPlayer
    Player.Sombra
    if (IsDummyBot())
    {
        DisableAbility2();
    }

rule: "[AO] :: Mercy Ability Override"
    Event.OngoingPlayer
    Player.Mercy
    if (IsDummyBot())
    {
        DisableAbility1();
    }


rule: "[AO] :: Genji Damage Mod On"
    Event.OngoingPlayer
    Player.Genji
    if (IsUsingAbility1())
    {
        StartDamageModification(EnemyPlayers(), player, 33.334);
        genjiAO = LastDamageModificationID();
    }

rule: "[AO] :: Genji Damage Mod Off"
    Event.OngoingPlayer
    Player.Genji
    if (!IsUsingAbility1())
    {
        StopDamageModification(genjiAO);
    }

disabled rule: "---------------- Owner Rules ----------------"{}

                /////////////                   /////////////
                /////////////    OWNER RULES    /////////////
                /////////////                   /////////////

rule: "[Owner] :: Create Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && HasSpawned() && IsAlive() && 
        (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && 
        EntityExists(ArrayElement()) && IsDummyBot(ArrayElement()) && true)) 
        < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && true))) 
        / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
        Rounding.Down)))
    {
        owner = player;
        playerSlot = FirstOf(FilteredArray(playerAmountArray, 
                     !EntityExists(PlayersInSlot(ArrayElement(), TeamOf())) || (IsDummyBot(ArrayElement()) && !EntityExists(ArrayElement().owner))));

        CreateDummyBot(HeroOf(), TeamOf(), playerSlot, PositionOf() + WorldVectorOf(Vector(0, 0, -0.6), player), FacingDirectionOf());
        PlayersInSlot(playerSlot, TeamOf()).owner = player;
        Wait(0.032);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Destroy Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && 
        (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && EntityExists(ArrayElement()) && 
        IsDummyBot(ArrayElement()) && true)) 
        > RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))))
        / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
        Rounding.Down)))
    {
        owner = player;

        DestroyDummyBot(TeamOf(), 
        LastOf(FilteredArray(playerAmountArray, IsDummyBot(PlayersInSlot(ArrayElement(), TeamOf())) && 
        PlayersInSlot(ArrayElement(), TeamOf()).owner == player && 
        EntityExists(PlayersInSlot(ArrayElement(), TeamOf())))));
    
        Wait(0.032);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: On Death Replace Healthiest Bot"
    Event.OnDeath
    if (!IsDummyBot() && IsTrueForAny(AllLivingPlayers(TeamOf()), ArrayElement().owner == player && EntityExists(ArrayElement()) && IsDummyBot(ArrayElement())))
    {
        isRezzing = true;
        closestPlayer = FilteredArray(AllLivingPlayers(), IsAlive(ArrayElement()) && EntityExists(ArrayElement()) && ArrayElement() != player && ArrayElement().owner == player);
        closestPlayer = LastOf(SortedArray(closestPlayer, NormalizedHealth(ArrayElement())));
        positionOf = PositionOf(closestPlayer);
        facingDir = FacingDirectionOf(closestPlayer);
        SetFacing(closestPlayer, FacingDirectionOf(), Relative.ToWorld);
        Wait(0.064);
        Kill(closestPlayer);
        Teleport(closestPlayer, PositionOf());
        Teleport(player, positionOf);
        SetFacing(player, facingDir, Relative.ToWorld);
        Resurrect();
        CancelPrimaryAction(ownerBots);
        Wait(0.032);
        Damage(player, null, Health() / 2.66);
        isRezzing = false;
    }

rule: "[Owner] :: Alive"
    Event.OngoingPlayer
    if (IsAlive(owner) && !isRezzing)
    {
        ownerAlive = true;
    }

rule: "[Owner] :: Dead"
    Event.OngoingPlayer
    if (IsDead(owner) && !isRezzing)
    {
        ownerAlive = false;
    }

rule: "[Owner] :: Owner Dead, Prevent Bot Spawning"
    Event.OngoingPlayer
    if (!ownerAlive)
    {
        Wait(0.064);
        DisableRespawning(FilteredArray(AllPlayers(TeamOf()), IsDummyBot(ArrayElement()) && IsDead(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Owner Alive, Re-enable Bot Spawning"
    Event.OngoingPlayer
    if (ownerAlive)
    {
        Wait(0.064);
        Respawn(ownerBots);
        EnableRespawning(FilteredArray(AllPlayers(TeamOf()), IsDummyBot(ArrayElement()) && IsDead(ArrayElement()) && ArrayElement().owner == player));
    }

rule: "[Owner] :: Stun Bots if Owner is CCed"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Asleep) || 
    HasStatus(owner, Status.Frozen) || 
    HasStatus(owner, Status.KnockedDown) || 
    HasStatus(owner, Status.Stunned))
    {
        Wait(0.064);
        SetStatus(ownerBots, null, Status.Stunned, 6);
    }

rule: "[Owner] :: Clear Stun if Owner is no longer CCed"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Asleep) && 
    !HasStatus(owner, Status.Frozen) && 
    !HasStatus(owner, Status.KnockedDown) && 
    !HasStatus(owner, Status.Stunned))
    {
        Wait(0.064);
        ClearStatus(player, Status.Stunned);
    }

rule: "[Owner] :: Hack Bots if Owner is Hacked"
    Event.OngoingPlayer
    if (HasStatus(owner, Status.Hacked))
    {
        Wait(0.064);
        SetStatus(ownerBots, null, Status.Hacked, 6);
    }

rule: "[Owner] :: Clear Hack if Owner is no longer Hacked"
    Event.OngoingPlayer
    if (!HasStatus(owner, Status.Hacked))
    {
        Wait(0.064);
        ClearStatus(player, Status.Hacked);
    }

disabled rule: "---------------- Bot Rules ----------------"{}

                /////////////                 /////////////
                /////////////    BOT RULES    /////////////
                /////////////                 /////////////

rule: "[Bot] :: Alive"
    Event.OngoingPlayer
    if (IsDummyBot() && IsAlive())
    {
        botAlive = true;
    }

rule: "[Bot] :: Dead"
    Event.OngoingPlayer
    if (IsDummyBot() && IsDead())
    {
        if (UltimateChargePercent(owner) == 100)
            SetUltimateCharge(player, 0);

        SetUltimateCharge(player, 0);
        botAlive = false;
    }

rule: "[Bot] :: Incorrect Hero"
    Event.OngoingPlayer
    if (IsDummyBot() && !(EntityExists(owner) && HeroOf() == HeroOf(owner) && TeamOf() == TeamOf(owner)))
    {
        Wait(0.064);
        DestroyDummyBot(TeamOf(), SlotOf());
    }

rule: "[Bot] :: Enable Ult"
    Event.OngoingPlayer
    if (UltimateChargePercent(owner) == 100 && botAlive)
    {
        Wait(0.064);
        SetUltimateAbilityEnabled(player, true);
        SetUltimateCharge(player, 100);
    }

rule: "[Bot] :: Disable ult"
    Event.OngoingPlayer
    if (IsDummyBot() && (UltimateChargePercent(owner) != 100 || !IsUsingUltimate(owner) || IsDead()))
    {
        WaitIfTrue(0.064);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

rule: "[Bot] :: Cancel Ult"
    Event.OngoingPlayer
    if (botAlive && IsUsingUltimate() && !IsUsingUltimate(owner))
    {
        CancelPrimaryAction();
    }

rule: "[Bot] :: Owner out of range"
    Event.OngoingPlayer
    if (botAlive && IsAlive(owner) && !CCed && DistanceBetween(owner, player) > DISTANCE)
    {
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));
    }

rule: "[Bot] :: Owner out of sight"
    Event.OngoingPlayer
    if (botAlive && IsAlive(owner) && !CCed && !IsInLineOfSight(owner, player))
    {
        WaitIfTrue(0.3);
        PlayEffect(AllyPlayers(), PlayEffect.GoodPickupEffect, Color.SkyBlue, player, 0.3);
        PlayEffect(EnemyPlayers(), PlayEffect.GoodPickupEffect, Color.Red, player, 0.3);
        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));
    }

disabled rule: "---------------- Input Emulation (IE) ----------------"{}

                /////////////                            /////////////
                /////////////    INPUT EMULATION (IE)    /////////////
                /////////////                            /////////////

rule: "[IE] :: Aim & Movement"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && !CCed && HasSpawned())
    {
        StartThrottleInDirection(player, WorldVectorOf(ThrottleOf(owner), owner, LocalVector.Rotation), 0 + (ThrottleOf(owner) != Vector(0,0,0)));
        StartFacing(player, DirectionTowards(EyePosition(), ownerAim), 10000);
    }

rule: "[IE] :: Mercy Aim"
    Event.OngoingPlayer
    Player.Mercy
    if (IsDummyBot() && botAlive && !CCed && HasSpawned())
    {
        StartFacing(player, DirectionTowards(EyePosition(), EyePosition(owner)), 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
        StartHoldingButton(player, Button.PrimaryFire);
    }

rule: "[IE] :: Stop Aim"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && CCed)
    {
        StopFacing();
    }

rule: "[IE] :: CD Init"
    Event.OngoingPlayer
    if (botAlive)
    {
        SetAbilityCooldown(player, ButtonValue(Button.SecondaryFire), AbilityCooldown(owner, ButtonValue(Button.SecondaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(owner, ButtonValue(Button.Ability1)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability2), AbilityCooldown(owner, ButtonValue(Button.Ability2)));
        SetAbilityCooldown(player, ButtonValue(Button.Jump), AbilityCooldown(owner, ButtonValue(Button.Jump)));
        SetAbilityCooldown(player, ButtonValue(Button.Crouch), AbilityCooldown(owner, ButtonValue(Button.Crouch)));
    }

                        // button pressed/released //
disabled rule: "-- press --"{}
rule: "[IE] :: Pressed Primary"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive && !CCed && IsButtonHeld(owner, Button.PrimaryFire) && IsNotHero(Hero.Mercy))
    {
        StartHoldingButton(player, Button.PrimaryFire);
    }

rule: "[IE] :: Pressed Secondary"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.SecondaryFire))
    {
        StartHoldingButton(player, Button.SecondaryFire);
    }

rule: "[IE] :: Pressed Ability 1"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.Ability1))
    {
        StartHoldingButton(player, Button.Ability1);
    }

rule: "[IE] :: Pressed Ability 2"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.Ability2))
    {
        StartHoldingButton(player, Button.Ability2);
    }

rule: "[IE] :: Pressed Ultimate"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.Ultimate))
    {
        StartHoldingButton(player, Button.Ultimate);
        Wait(0.08);
        LoopIf(IsButtonHeld(owner, Button.Ultimate));
    }

rule: "[IE] :: Pressed Jump"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive && !CCed && (IsButtonHeld(owner, Button.Jump)))
    {
        StartHoldingButton(player, Button.Jump);
    }

rule: "[IE] :: Pressed Crouch"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive && !CCed && (IsButtonHeld(owner, Button.Crouch)))
    {
        StartHoldingButton(player, Button.Crouch);
    }

rule: "[IE] :: Pressed Melee"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.Melee) && IsNotHero(Hero.Mercy))
    {
        StartHoldingButton(player, Button.Melee);
    }

rule: "[IE] :: Pressed Reload"
    Event.OngoingPlayer
    if (IsDummyBot() && botAlive && ownerAlive &&  !CCed && IsButtonHeld(owner, Button.Reload))
    {
        StartHoldingButton(player, Button.Reload);
    }

rule: "[IE] :: Hello"
    Event.OngoingPlayer
    if (IsDummyBot() && IsCommunicating(owner, Communication.Hello))
    {
        Communicate(player, Communication.Hello);
    }

disabled rule: "-- release --"{}

                           // release //

rule: "[IE] :: Released Primary"
    Event.OngoingPlayer
    if (IsDummyBot() && IsNotHero(Hero.Mercy) && (!IsButtonHeld(owner, Button.PrimaryFire) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.PrimaryFire);
    }

rule: "[IE] :: Released Secondary"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.SecondaryFire) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.SecondaryFire);
        SetAbilityCooldown(player, ButtonValue(Button.SecondaryFire), AbilityCooldown(owner, ButtonValue(Button.SecondaryFire)));
    }

rule: "[IE] :: Released Ability 1"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Ability1) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Ability1);
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(owner, ButtonValue(Button.Ability1)));
    }

rule: "[IE] :: Released Ability 2"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Ability2) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Ability2);
        SetAbilityCooldown(player, ButtonValue(Button.Ability2), AbilityCooldown(owner, ButtonValue(Button.Ability2)));
    }

rule: "[IE] :: Released Ultimate"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Ultimate) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Ultimate);
    }

rule: "[IE] :: Released Jump"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Jump) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Jump);
        SetAbilityCooldown(player, ButtonValue(Button.Jump), AbilityCooldown(owner, ButtonValue(Button.Jump)));
    }

rule: "[IE] :: Released Crouch"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Crouch) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Crouch);
        SetAbilityCooldown(player, ButtonValue(Button.Crouch), AbilityCooldown(owner, ButtonValue(Button.Crouch)));
    }

rule: "[IE] :: Released Melee"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Melee) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Melee);
    }

rule: "[IE] :: Released Reload"
    Event.OngoingPlayer
    if (IsDummyBot() && (!IsButtonHeld(owner, Button.Reload) || !ownerAlive || CCed || !botAlive))
    {
        StopHoldingButton(player, Button.Reload);
    }

disabled rule: "---------------- Stats ----------------"{}

                /////////////             /////////////
                /////////////    STATS    /////////////
                /////////////             /////////////

rule: "[Stats] :: Update Kills"
    Event.OnFinalBlow
    {
        killAmount += 1;
        owner.totalKills += 1;
    }

rule: "[Stats] :: Update Deaths"
    Event.OnDeath
    if (!isRezzing)
    {
        deathAmount += 1;
        owner.totalDeaths += 1;
    }

rule: "[Stats] :: Update Damage Dealt"
    Event.OnDamageDealt
    if (Victim() != player)
    {
        damageDealtAmount += RoundToInteger(EventDamage(), Rounding.Nearest);
        owner.totalDamageDealt += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Damage Recieved"
    Event.OnDamageTaken
    if (Attacker() != player)
    {
        owner.totalDamageRecieved += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Heal Dealt"
    Event.OnHealingDealt
    {
        owner.totalHealDealt += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[Stats] :: Update Heal Recieved"
    Event.OnHealingTaken
    {
        owner.totalHealRecieved += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

disabled rule: "---------------- HUD Text ----------------"{}

                /////////////                /////////////
                /////////////    HUD TEXT    /////////////
                /////////////                /////////////

rule: "[HUD] :: Total Stats"
    Event.OngoingPlayer
    {
        Wait(0.5);
        CreateHudText(player, null, null,
        <"Kills: <0> | Deaths: <1> \r\n<2>", totalKills, totalDeaths, 
        <"DMG Dealt: <0> | DMG Recieved: <1> \r\n<2>", totalDamageDealt, totalDamageRecieved, 
        <"Heal Dealt: <0> | Heal Recieved: <1>", totalHealDealt, totalHealRecieved>>>, 
        Location.Left, SlotOf(), Color.White, Color.White, Color.White);
    }

rule: "[HUD] :: Bot Stats"
    Event.OngoingPlayer
    if (IsDummyBot())
    {
        Wait(0.5);

        /* more than 170/200 */
        CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && 
                    NormalizedHealth() > 0.85),
                    HeroIconString(HeroOf()),
                    <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                    <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                    Location.Left, SlotOf(), Color.Green, Color.Blue, Color.Green);

        /* 170/200 - 120/200 */
        CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && 
                    NormalizedHealth() < 0.85 && NormalizedHealth() > 0.6),
                    HeroIconString(HeroOf()),
                    <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                    <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                    Location.Left, SlotOf(), Color.Yellow, Color.Blue, Color.Yellow);

        /* 120/200 - 70/200*/
        CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && 
                    NormalizedHealth() < 0.6 && NormalizedHealth() > 0.35),
                    HeroIconString(HeroOf()),
                    <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                    <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                    Location.Left, SlotOf(), Color.Orange, Color.Blue, Color.Orange);

        /* less than 70/200 */
        CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && 
                    NormalizedHealth() < 0.35),
                    HeroIconString(HeroOf()),
                    <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                    <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                    Location.Left, SlotOf(), Color.Red, Color.Blue, Color.Red);

        /* dead */
        CreateHudText(FilteredArray(owner, EntityExists(player) && IsDead()),
                    HeroIconString(HeroOf()),
                    <"Kills: <0> | Deaths: <1> | Damage: <2>", killAmount, deathAmount, damageDealtAmount>,
                    <"<0> Dead <0>", IconString(Icon.Skull)>,
                    Location.Left, SlotOf(), Color.Red, Color.Red, Color.Red);
    }
disabled rule: "---------------- Fail Safes ----------------"{}

                /////////////                  /////////////
                /////////////    FAIL SAFES    /////////////
                /////////////                  /////////////

rule: "[FS] :: Not Enough Bots"
    Event.OngoingPlayer
    if (!IsDummyBot() && HasSpawned() && IsAlive() && 
        (CountOf(FilteredArray(AllPlayers(TeamOf()), ArrayElement().owner == player && EntityExists(ArrayElement()) && IsDummyBot(ArrayElement()))) 
        < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement())))) 
        / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(ArrayElement()) && HasSpawned(ArrayElement()))), 
        Rounding.Down)))
    {
        botCheck += 1;
        Wait(1);

        if (botCheck > 4)
            DestroyAllDummyBots();

        LoopIfConditionIsTrue();
        botCheck = 0;
    }

rule: "[FS] :: Bot Ult"
    Event.OngoingPlayer
    if (IsDummyBot() && UltimateChargePercent(owner) != 100 && UltimateChargePercent() > 1)
    {
        WaitIfTrue(3);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

rule: "[FS] :: CC"
    Event.OngoingPlayer
    if (CCed)
    {
        WaitIfTrue(8);
        CCed = false;
    }

// playervar define fsInvuln;
// rule: "[FS] :: Give Invuln if Owner is Dead"
//     Event.OngoingPlayer
//     if (botAlive && !ownerAlive)
//     {
//         SetStatus(player, null, Status.PhasedOut);
//         SetInvisible(player, InvisibleTo.All);
//         fsInvuln = true;
//     }

// rule: "[FS] :: Clear Invuln if Owner is Alive"
//     Event.OngoingPlayer
//     if (ownerAlive && fsInvuln)
//     {
//         ClearStatus(player, Status.PhasedOut)
//         SetInvisible(player, InvisibleTo.None);
//         fsInvuln = false;
//     }

rule: "[FS] :: Player Spawn"
    Event.OngoingPlayer
    if (IsDead())
    {
        WaitIfTrue(18.5);
        Respawn();
    }

disabled rule: "---------------- Debug ----------------"{}

                /////////////             /////////////
                /////////////    DEBUG    /////////////
                /////////////             /////////////

disabled rule: "[DBG] :: Red Dot"
    Event.OngoingPlayer
    {
        CreateEffect(AllPlayers(TeamOf(owner)), Effect.Sphere, Color.Red, RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 100), 0.1);
    }

disabled rule: "[DBG] :: CC All Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())), null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC Owner Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(ownerBots, null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC Owner"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        SetStatus(owner, null, Status.Stunned, 2);
    }

disabled rule: "[DBG] :: Kill All Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(FilteredArray(AllPlayers(), IsDummyBot(ArrayElement())));
    }

disabled rule: "[DBG] :: Kill Owner Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(ownerBots);
    }

disabled rule: "[DBG] :: Kill Owner"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(owner);
    }

disabled rule: "[DBG] :: Kill All"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Kill(all);
    }

rule: "[DBG] :: test"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
       Respawn();
    }

disabled rule: "[DBG] :: HUD"
    Event.OnPlayerJoin
    {
        MinWait();
        CreateHudText(player, null, null, <"PrimaryFire: <0>", IsFiringPrimary(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"SecondaryFire: <0>", IsFiringSecondary(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Ability1: <0>", IsUsingAbility1(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Ability2: <0>", IsUsingAbility2(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Reload: <0>", IsButtonHeld(owner, Button.Reload)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Jump: <0>", IsJumping(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Crouch: <0>", IsCrouching(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"Melee: <0>", IsMeleeing(owner)>, Location.Right, -1);
        CreateHudText(player, null, null, <"isRezzing: <0>", isRezzing>, Location.Right, -1);
        CreateHudText(player, null, null, <"CCed: <0>", CCed>, Location.Right, -1);
        CreateHudText(player, null, null, <"ownerAlive: <0>", ownerAlive>, Location.Right, -1);
     }

disabled rule: "super special kyy rule"
    Event.OngoingPlayer
    if (<"<0>", player> == "kyy")
    {
        SetAimSpeed(player, RandomReal(10, 200));
        Wait(1);
        LoopIfConditionIsTrue();
    }
