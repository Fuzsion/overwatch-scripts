import "macros.del";
define ownerBots: FilteredArray(AllPlayers(TeamOf()), IsDummyBot(Curr()) && Curr().owner == player);
define livingBots: FilteredArray(AllLivingPlayers(TeamOf()), IsDummyBot(Curr()) && Curr().owner == player);
// global
globalvar define DISTANCE; // maximum distance until bot teleports to owner
globalvar define TIMER_DUR; // duration of the combat timer
globalvar define playerAmount; // amount of players and bots per team (from 0 - 5)
globalvar define inspector; // enable/disable toggle for inspector

// all
playervar define CCed; // if cc status is applied to a player
playervar define playerSlot; // get slot of player to create bots for
playervar define genjiAO; // genji damage nerf
playervar define infoText; // disclaimer text array
playervar define infoTimer; // disclaimer timer
playervar define isInStealth; // boolean is sombra using ability 1
playervar define maxHealth; // maximum health a player spawned with

// stats
playervar define totalKills; // total amount of kills owner and bots have
playervar define totalDeaths; // total amount of deaths owner and bots have
playervar define totalDamageDealt; // total amount of damage owner and bots have done
playervar define totalDamageRecieved; // total amount of damage owner and bots have taken
playervar define totalHealDealt; // total amount of healing owner and bots have done
playervar define totalHealRecieved; // total amount of healing owner and bots have recieved

// owner
playervar define owner; // determines who owns a set of bots
playervar define ownerAlive; // whether the owner is alive
playervar define isRezzing; // checks if the owner is rezzing
playervar define closestPlayer; // closest bot to owner upon death
playervar define positionOf; // position of the closestPlayer
playervar define facingDir; // facing direction of the closestPlayer
playervar define healthOf; // health of the closestPlayer
playervar define healOT; // heal over time for the owner
playervar define timer; // time out of combat
playervar define allyEffect; // owner effect visible to ally players
playervar define enemyEffect; // owner effect visible to enemy players

// bot
playervar define botAlive; // if a bot is alive

rule: "Initial Global"
    {
        DisableInspectorRecording();
        DisableAnnouncer();
        DISTANCE = 12;
        TIMER_DUR = 6;
        playerAmount = [5, 4, 3, 2, 1, 0];
        CreateHudText(all, null, "ㅤCreated by Fuzsion#11545", "ㅤShare Code: WRYEP", Location.Right, 0);
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        playerSlot = EmptyArray();
        totalKills = "None";
        totalDeaths = "None";
        totalDamageDealt = "None";
        totalDamageRecieved = "None";
        totalHealDealt = "None";
        totalHealRecieved = "None";
    }

rule: "Disclaimer Text"
    Event.OngoingPlayer
    if ( !IsDummyBot() && HasSpawned() )
    {
        infoTimer = 60;
        ChaseVariableAtRate(infoTimer, 0, 1, RateChaseReevaluation.None);
        infoText = EmptyArray();
        CreateHudText(player, null, null, <"ㅤ\r\n<0> Notice <0>\r\n", IconString(Icon.Warning)>, Location.Top, 1, Color.Yellow, Color.Yellow, Color.Yellow);
        infoText[0] = LastTextID();
        CreateHudText(player, null, "This is an in-development rewrite written entirely in OSTW, and entirely independent from the mode this is inspired from.", null, Location.Top, 1.1);
        infoText[1] = LastTextID();
        CreateHudText(player, null, "I have no association with that gamemode, code, or creator. This is simply just a pet project that I enjoy working on.", null, Location.Top, 1.2);
        infoText[2] = LastTextID();
        Wait();
        CreateHudText(player, null, "Nothing is from said mode, and certainly nothing is stolen. Bugs will be fixed as soon as I am made aware of them.", null, Location.Top, 1.3);
        infoText[3] = LastTextID();
        CreateHudText(player, null, "Please tell me about any issues or suggestions you have, either by adding my Btag in the top right or by telling me in-game.", null, Location.Top, 1.4);
        infoText[4] = LastTextID();
        CreateHudText(player, null, null, <"This message will disappear in <0> s", RoundToInteger(infoTimer, Rounding.Up)>, Location.Top, 1.5);
        infoText[5] = LastTextID();

        Wait(60);
        DestroyHudText(infoText[0]);
        DestroyHudText(infoText[1]);
        DestroyHudText(infoText[2]);
        Wait();
        DestroyHudText(infoText[3]);
        DestroyHudText(infoText[4]);
        DestroyHudText(infoText[5]);
        StopChasingVariable(infoTimer);
        infoText = EmptyArray();
    }

rule: "[All] :: Assembling Heroes Time"
    if ( IsAssemblingHeroes() )
    {
        SetMatchTime(15);
    }

rule: "[All] :: CCed"
    Event.OngoingPlayer
    if ( HasStatus(player, Status.Asleep) || 
    HasStatus(player, Status.Frozen) || 
    HasStatus(player, Status.KnockedDown) || 
    HasStatus(player, Status.Rooted) || 
    HasStatus(player, Status.Hacked) ||
    HasStatus(player, Status.Stunned) )
    {
        CCed = true;
    }

rule: "[All] :: Not CCed"
    Event.OngoingPlayer
    if ( !HasStatus(player, Status.Asleep) && 
    !HasStatus(player, Status.Frozen) && 
    !HasStatus(player, Status.KnockedDown) && 
    !HasStatus(player, Status.Rooted) && 
    !HasStatus(player, Status.Hacked) &&
    !HasStatus(player, Status.Stunned) )
    {
        CCed = false;
    }

disabled rule: "---------------- Owner Rules ----------------"{}

                /////////////                   /////////////
                /////////////    OWNER RULES    /////////////
                /////////////                   /////////////

rule: "[Owner] :: Create Bots"
    Event.OngoingPlayer
    if ( !IsDummyBot() && HasSpawned() && IsAlive() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), Curr().owner == player && IsDummyBot(Curr()))) 
                                                    < RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(Curr()))))
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(Curr()) && HasSpawned(Curr()))), 
                                                    Rounding.Down)) )
    {
        playerSlot = FirstOf(FilteredArray(playerAmount, 
                            !EntityExists(PlayersInSlot(Curr(), TeamOf())) || (IsDummyBot(Curr()) && !EntityExists(Curr().owner))));

        CreateDummyBot(HeroOf(), TeamOf(), playerSlot, PositionOf() + WorldVectorOf(Vector(0, 0, -0.5), player), FacingDirectionOf());
        PlayersInSlot(playerSlot, TeamOf()).owner = player;

        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Destroy Bots"
    Event.OngoingPlayer
    if ( !IsDummyBot() && 
       (CountOf(FilteredArray(AllPlayers(TeamOf()), Curr().owner == player && IsDummyBot(Curr()))) 
                                                    > RoundToInteger((6 - CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(Curr()) && HasSpawned(Curr()))))
                                                    / CountOf(FilteredArray(AllPlayers(TeamOf()), !IsDummyBot(Curr()) && HasSpawned(Curr()))), 
                                                    Rounding.Down)) )
    {
        DestroyDummyBot(TeamOf(), 
                        LastOf(FilteredArray(playerAmount, IsDummyBot(PlayersInSlot(Curr(), TeamOf())) &&
                        PlayersInSlot(Curr(), TeamOf()).owner == player && 
                        EntityExists(PlayersInSlot(Curr(), TeamOf())))));

        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: On Death Replace Healthiest Bot"
    Event.OnDeath
    if ( !IsDummyBot() && IsTrueForAny(AllLivingPlayers(TeamOf()), Curr().owner == player && IsDummyBot(Curr())) )
    {
        define bots = ownerBots;
        isRezzing = true;
        closestPlayer = FilteredArray(AllLivingPlayers(), Curr() != player && Curr().owner == player);
        closestPlayer = LastOf(SortedArray(closestPlayer, NormalizedHealth(Curr())));
        positionOf = PositionOf(closestPlayer);
        facingDir = FacingDirectionOf(closestPlayer);
        healthOf = Health(closestPlayer)
        SetFacing(closestPlayer, Facing(), Relative.ToWorld);
        Kill(closestPlayer);
        Teleport(player, positionOf);
        SetFacing(player, facingDir, Relative.ToWorld);
        Resurrect();
        Wait(0.032);
        CancelPrimaryAction(bots);
        Damage(player, null, MaxHealth() - healthOf);
        isRezzing = false;
    }

rule: "[Owner] :: Create Effect"
    Event.OngoingPlayer
    if ( !IsDummyBot() && ownerAlive && !isInStealth )
    {
        CreateEffect(RemoveFromArray(AllyPlayers(), player), Effect.Sparkles, Color.SkyBlue, player, 1);
        allyEffect = LastCreatedEntity();
        CreateEffect(EnemyPlayers(), Effect.Sparkles, Color.Red, player, 1);
        enemyEffect = LastCreatedEntity();
    }

rule: "[Owner] :: Destroy Effect"
    Event.OngoingPlayer
    if ( !ownerAlive || isInStealth )
    {
        DestroyEffect(allyEffect);
        DestroyEffect(enemyEffect);
    }

rule: "[Owner] :: Start healOT"
    Event.OngoingPlayer
    if ( !IsDummyBot() && timer == 0 && Health() < MaxHealth() )
    {
        # stop timer
        timer = 0;
        StopChasingVariable(timer);
        StartHealOverTime(player, null, 10000, 10);
        healOT = LastHealOverTime();
    }

rule: "[Owner] :: Stop healOT"
    Event.OnDamageTaken
    if ( !IsDummyBot() && !IsHero(Hero.Mercy) )
    {
        # start timer
        timer = TIMER_DUR;
        StopChasingVariable(timer);
        ChaseVariableAtRate(timer, 0, 1, RateChaseReevaluation.None);
        StopHealOverTime(healOT);
    }

rule: "[Owner] :: Stop healOT if Full HP"
    Event.OngoingPlayer
    if ( timer == 0 && Health() == MaxHealth() )
    {
        StopHealOverTime(healOT);
    }

rule: "[Owner] :: Alive"
    Event.OngoingPlayer
    if ( ( IsDummyBot() && IsAlive(owner) ) || ( !IsDummyBot() && IsAlive() && !isRezzing ) )
    {
        ownerAlive = true;
    }

rule: "[Owner] :: Dead"
    Event.OnDeath
    if ( !isRezzing )
    {
        ownerAlive = false;
    }

rule: "[Owner] :: Owner Dead; Prevent Bot Spawning"
    Event.OngoingPlayer
    if ( !ownerAlive )
    {
        DisableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(Curr()) && Curr().owner == player));
    }

rule: "[Owner] :: Owner Alive; Re-enable Bot Spawning"
    Event.OngoingPlayer
    if ( ownerAlive )
    {
        Respawn(ownerBots);
        EnableRespawning(FilteredArray(AllDeadPlayers(TeamOf()), IsDummyBot(Curr()) && Curr().owner == player));
    }

rule: "[Owner] :: Respawn Failsafe"
    Event.OnDeath
    if ( !IsDummyBot() && IsDead() && !isRezzing )
    {
        # this probably doesnt work
        WaitIfTrue(18.5);
        Respawn();
    }

rule: "[Owner] :: Stun Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Stunned) && !HasStatus(player, Status.Stunned) )
    {
        AbortIf( IsUsingAbility1(owner) && IsHero(Hero.Mei) );

        SetStatus(player, null, Status.Stunned, 2.5);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Stun Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Stunned) )
    {
        ClearStatus(player, Status.Stunned);
    }

rule: "[Owner] :: Sleep Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Asleep) && !HasStatus(player, Status.Asleep) )
    {
        SetStatus(player, null, Status.Asleep, 5.5);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Sleep Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Asleep) )
    {
        ClearStatus(player, Status.Asleep);
    }

rule: "[Owner] :: Freeze Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Frozen) && !HasStatus(player, Status.Frozen) )
    {
        SetStatus(player, null, Status.Frozen, 7.35);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Freeze Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Frozen) )
    {
        ClearStatus(player, Status.Frozen);
    }

rule: "[Owner] :: Knockdown Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.KnockedDown) && !HasStatus(player, Status.KnockedDown) )
    {
        SetStatus(player, null, Status.KnockedDown, 3);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Knockdown Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.KnockedDown) )
    {
        ClearStatus(player, Status.KnockedDown);
    }

rule: "[Owner] :: Hack Status On"
    Event.OngoingPlayer
    if ( HasStatus(owner, Status.Hacked) && !HasStatus(player, Status.Hacked) )
    {
        SetStatus(player, null, Status.Hacked, 5.5);
        Wait(0.064);
        LoopIfConditionIsTrue();
    }

rule: "[Owner] :: Hack Status Off"
    Event.OngoingPlayer
    if ( !HasStatus(owner, Status.Hacked) )
    {
        ClearStatus(player, Status.Hacked);
    }

disabled rule: "---------------- Bot Rules ----------------"{}

                /////////////                 /////////////
                /////////////    BOT RULES    /////////////
                /////////////                 /////////////

rule: "[Bot] :: Alive"
    Event.OngoingPlayer
    if ( IsDummyBot() && IsAlive() )
    {
        EnableRespawning();
        SetAbilityCooldown(player, ButtonValue(Button.PrimaryFire), AbilityCooldown(owner, ButtonValue(Button.PrimaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.SecondaryFire), AbilityCooldown(owner, ButtonValue(Button.SecondaryFire)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(owner, ButtonValue(Button.Ability1)));
        SetAbilityCooldown(player, ButtonValue(Button.Ability2), AbilityCooldown(owner, ButtonValue(Button.Ability2)));
        SetAbilityCooldown(player, ButtonValue(Button.Jump), AbilityCooldown(owner, ButtonValue(Button.Jump)));
        SetAbilityCooldown(player, ButtonValue(Button.Crouch), AbilityCooldown(owner, ButtonValue(Button.Crouch)));
        botAlive = true;
    }

rule: "[Bot] :: Dead"
    Event.OngoingPlayer
    if ( IsDummyBot() && IsDead() )
    {
        botAlive = false;
        SetUltimateCharge(player, 0);
        SetUltimateAbilityEnabled(player, false);
    }

disabled rule: "[Bot] :: Respawn Time"
    Event.OngoingPlayer
    if ( IsDummyBot() )
    {
        # latest overwatch patch (1.49) breaks the timer visual on scoreboard if this rule is enabled
        SetRespawnMaxTime(player, 15)
    }

rule: "[Bot] :: Incorrect Hero"
    Event.OngoingPlayer
    if ( IsDummyBot() && !( EntityExists(owner) && HeroOf() == HeroOf(owner) && TeamOf() == TeamOf(owner) ) )
    {
        Wait(0.080);
        DestroyDummyBot(TeamOf(), SlotOf());
    }

rule: "[Bot] :: Enable Ult"
    Event.OngoingPlayer
    if ( UltimateChargePercent(owner) == 100 && botAlive )
    {
        SetUltimateAbilityEnabled(player, true);
        SetUltimateCharge(player, 100);
        Wait(0.08);
        LoopIf(UltimateChargePercent() != 100);
    }

rule: "[Bot] :: Disable ult"
    Event.OngoingPlayer
    if ( IsDummyBot() && ( UltimateChargePercent(owner) != 100 || !IsUsingUltimate(owner) || IsDead() ) )
    {
        SetUltimateCharge(player, 0);
        SetUltimateAbilityEnabled(player, false);
    }

rule: "[Bot] :: Bot Ult Charge Failsafe"
    Event.OngoingPlayer
    if ( IsDummyBot() && UltimateChargePercent(owner) != 100 && UltimateChargePercent() > 0 )
    {
        WaitIfTrue(3);
        SetUltimateAbilityEnabled(player, false);
        SetUltimateCharge(player, 0);
    }

void TeleportBot() playervar "Teleport Subroutine"
    {
        Teleport(player, owner + WorldVectorOf(Vector(0, 0, -0.5), owner));

        # prevent teleport effects from being played if isInStealth is true
        AbortIf( isInStealth );

        PlayEffect(EnemyPlayers(), PlayEffect.BadPickupEffect, Color.Red, player, 0.3);
        PlayEffect(AllyPlayers(), PlayEffect.BadPickupEffect, Color.SkyBlue, player, 0.3);
    }

rule: "[Bot] :: Owner out of range"
    Event.OngoingPlayer
    if ( botAlive && IsAlive(owner) && !CCed && DistanceBetween(owner, player) > DISTANCE )
    {
        TeleportBot()
    }

rule: "[Bot] :: Owner out of sight"
    Event.OngoingPlayer
    if ( botAlive && IsAlive(owner) && !CCed && !IsInLineOfSight(owner, player) )
    {
        WaitIfTrue(0.25);
        TeleportBot()
    }

disabled rule: "---------------- Input Emulation (IE) ----------------"{}

                /////////////                            /////////////
                /////////////    INPUT EMULATION (IE)    /////////////
                /////////////                            /////////////

rule: "[IE] :: Aim & Movement"
    Event.OngoingPlayer
    if ( botAlive && !CCed && HasSpawned() )
    {
        StartThrottleInDirection(player, WorldVectorOf(ThrottleOf(owner), owner, LocalVector.Rotation), ThrottleOf(owner) != Vector(0,0,0));

        StartFacing(player, DirectionTowards(EyePosition(), 
        RayCastHitPosition(EyePosition(owner), EyePosition(owner) + FacingDirectionOf(owner) * 100, AllLivingPlayers(OppositeTeamOf(TeamOf(owner))), AllLivingPlayers(TeamOf(owner)), true)), 
        10000);
    }

rule: "[IE] :: Stop Aim"
    Event.OngoingPlayer
    if ( botAlive && CCed )
    {
        StopFacing();
    }

rule: "[IE] :: Hello"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsCommunicating(player, Communication.Hello) )
    {
        define bots = ownerBots;
        Communicate(bots, Communication.Hello);
    }

                        // button pressed //

rule: "[IE] :: Pressed Primary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.PrimaryFire) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.PrimaryFire);
    }

rule: "[IE] :: Pressed Secondary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.SecondaryFire) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.SecondaryFire);
    }

rule: "[IE] :: Pressed Ability 1"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ability1) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ability1);
    }

rule: "[IE] :: Pressed Ability 2"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ability2) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ability2);
    }

rule: "[IE] :: Pressed Jump"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Jump) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Jump);
    }

rule: "[IE] :: Pressed Crouch"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Crouch) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Crouch);
    }

rule: "[IE] :: Pressed Melee"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Melee) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Melee);
    }

rule: "[IE] :: Pressed Reload"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Reload) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Reload);
    }

rule: "[IE] :: Pressed Ultimate"
    Event.OngoingPlayer
    if ( !IsDummyBot() && IsButtonHeld(player, Button.Ultimate) && IsAlive() && !CCed )
    {
        StartHoldingButton(livingBots, Button.Ultimate);
    }

                           // release //

rule: "[IE] :: Released Primary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.PrimaryFire) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.PrimaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.PrimaryFire), AbilityCooldown(player, ButtonValue(Button.PrimaryFire)));
    }

rule: "[IE] :: Released Secondary"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.SecondaryFire) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.SecondaryFire);
        SetAbilityCooldown(bots, ButtonValue(Button.SecondaryFire), AbilityCooldown(player, ButtonValue(Button.SecondaryFire)));
    }

rule: "[IE] :: Released Ability 1"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ability1) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability1);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability1), AbilityCooldown(player, ButtonValue(Button.Ability1)));
    }

rule: "[IE] :: Released Ability 2"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ability2) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ability2);
        SetAbilityCooldown(bots, ButtonValue(Button.Ability2), AbilityCooldown(player, ButtonValue(Button.Ability2)));
    }

rule: "[IE] :: Released Jump"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Jump) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Jump);
        SetAbilityCooldown(bots, ButtonValue(Button.Jump), AbilityCooldown(player, ButtonValue(Button.Jump)));
    }

rule: "[IE] :: Released Crouch"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Crouch) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Crouch);
        SetAbilityCooldown(bots, ButtonValue(Button.Crouch), AbilityCooldown(player, ButtonValue(Button.Crouch)));
    }

rule: "[IE] :: Released Melee"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Melee) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Melee);
    }

rule: "[IE] :: Released Reload"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Reload) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Reload);
    }

rule: "[IE] :: Released Ultimate"
    Event.OngoingPlayer
    if ( !IsDummyBot() && (!IsButtonHeld(player, Button.Ultimate) || IsDead() || CCed) )
    {
        define bots = ownerBots;
        StopHoldingButton(bots, Button.Ultimate);
    }

                           // cooldowns //

rule: "[IE] :: Brig Cooldown"
    Event.OngoingPlayer
    Player.Brigitte
    if ( !IsDummyBot() && !IsFiringPrimary() && IsButtonHeld(player, Button.SecondaryFire) && AbilityCooldown(player, ButtonValue(Button.PrimaryFire)) != 0 )
    {
        define bots = ownerBots;
        SetAbilityCooldown(bots, ButtonValue(Button.PrimaryFire), AbilityCooldown(player, ButtonValue(Button.PrimaryFire)));
    }

rule: "[IE] :: Secondary Cooldown"
    Event.OngoingPlayer
    if ( !IsDummyBot() && !IsFiringSecondary() )
    {
        define bots = ownerBots;
        SetAbilityCooldown(bots, ButtonValue(Button.SecondaryFire), AbilityCooldown(player, ButtonValue(Button.SecondaryFire)));
    }

rule: "[IE] :: Ability 1 Cooldown"
    Event.OngoingPlayer
    if ( !IsDummyBot() && !IsUsingAbility1() )
    {
        define bots = ownerBots;
        SetAbilityCooldown(bots, ButtonValue(Button.Ability1), AbilityCooldown(player, ButtonValue(Button.Ability1)));
    }

rule: "[IE] :: Ability 2 Cooldown"
    Event.OngoingPlayer
    if ( !IsDummyBot() && !IsUsingAbility2() )
    {
        define bots = ownerBots;
        # there is no Jump or Crouch cooldown rules (for ball/hanzo) because workshop can't detect if those abilities are being used, IsJumping() or IsCrouching() wont work
        SetAbilityCooldown(bots, ButtonValue(Button.Ability2), AbilityCooldown(player, ButtonValue(Button.Ability2)));
    }

// there is no Jump or Crouch cooldown rules (for ball/hanzo) because workshop can't detect if those abilities are being used, IsJumping() or IsCrouching() wont work

disabled rule: "---------------- HUD Text ----------------"{}

                /////////////                /////////////
                /////////////    HUD TEXT    /////////////
                /////////////                /////////////

rule: "[HUD] :: Update Kills"
    Event.OnFinalBlow
    {
        (owner == null ? player : owner).totalKills++;
    }

rule: "[HUD] :: Update Deaths"
    Event.OnDeath
    if ( !isRezzing )
    {
        (owner == null ? player : owner).totalDeaths++;
    }

rule: "[HUD] :: Update Damage Dealt"
    Event.OnDamageDealt
    if ( Victim() != player )
    {
        (owner == null ? player : owner).totalDamageDealt += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Damage Recieved"
    Event.OnDamageTaken
    if ( Attacker() != player )
    {
        (owner == null ? player : owner).totalDamageRecieved += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Heal Dealt"
    Event.OnHealingDealt
    if ( Healee() != player )
    {
        (owner == null ? player : owner).totalHealDealt += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[HUD] :: Update Heal Recieved"
    Event.OnHealingTaken
    if ( Healer() != player )
    {
        (owner == null ? player : owner).totalHealRecieved += RoundToInteger(EventHealing(), Rounding.Nearest);
    }

rule: "[HUD] :: Total Stats"
    Event.OngoingPlayer
    if ( !IsDummyBot() )
    {
        Wait(0.25);
        CreateHudText(player, null, null,
        <"Kills: <0> | Deaths: <1> \r\n<2>", totalKills, totalDeaths, 
        <"DMG Dealt: <0> | DMG Recieved: <1> \r\n<2>", totalDamageDealt, totalDamageRecieved, 
        <"Heal Dealt: <0> | Heal Recieved: <1> \r\n", totalHealDealt, totalHealRecieved>>>, 
        Location.Left, SlotOf(), Color.White, Color.White, Color.White);
    }

rule: "[HUD] :: Bot Stats"
    Event.OngoingPlayer
    if ( IsDummyBot() )
    {
        Wait(0.25);

        # MaxHealth() updates dynamically, using a variable lets me detect if someone is overhealed. this will break when echo clones someone or if dva is out of mech
        maxHealth = MaxHealth();

        /* overheal */
        CreateHudText(Health() > maxHealth ? owner : null,
                      HeroIconString(HeroOf()),
                      HeroOf(),
                      <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Blue, Color.White, Color.Blue);

        /* more than 170/200 */
        CreateHudText(FilteredArray(owner,
                      Health() <= maxHealth && NormalizedHealth() >= 0.85),
                      HeroIconString(HeroOf()),
                      HeroOf(),
                      <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Green, Color.White, Color.Green);

        /* 170/200 - 120/200 */
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.85 && NormalizedHealth() >= 0.6),
                      HeroIconString(HeroOf()),
                      HeroOf(),
                      <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Yellow, Color.White, Color.Yellow);

        /* 120/200 - 70/200*/
        CreateHudText(FilteredArray(owner, 
                      NormalizedHealth() < 0.6 && NormalizedHealth() >= 0.35),
                      HeroIconString(HeroOf()),
                      HeroOf(),
                      <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Orange, Color.White, Color.Orange);

        /* less than 70/200 */
        CreateHudText(FilteredArray(owner, 
                      IsAlive() && NormalizedHealth() < 0.35),
                      HeroIconString(HeroOf()),
                      HeroOf(),
                      <"<0> HP", RoundToInteger(Health(), Rounding.Up)>,
                      Location.Left, SlotOf(), Color.Red, Color.White, Color.Red);

        /* dead */
        CreateHudText(IsDead() ? owner : null,
                      IconString(Icon.Skull),
                      HeroOf(),
                      "Dead",
                      Location.Left, SlotOf(), Color.Red, Color.Red, Color.Red);
    }

disabled rule: "---------------- Ability Changes (AC) ----------------"{}
                /////////////                            /////////////
                /////////////    ABILITY CHANGES (AC)    /////////////
                /////////////                            /////////////

rule: "[AC] :: Sombra Disable Ability 2"
    Event.OngoingPlayer
    Player.Sombra
    if ( IsDummyBot() )
    {
        DisableAbility2();
    }

rule: "[AC] :: Sombra Stealth"
    Event.OngoingPlayer
    Player.Sombra
    if ( IsUsingAbility1() )
    {
        isInStealth = true;
    }

rule: "[AC] :: Sombra Unstealth"
    Event.OngoingPlayer
    Player.Sombra
    if ( !IsUsingAbility1() )
    {
        isInStealth = false;
    }

rule: "[AC] :: Sombra Stealth After Bot Spawns"
    Event.OngoingPlayer
    Player.Sombra
    if ( owner.isInStealth && botAlive && !IsUsingAbility1() )
    {
        PressButton(IsAlive() ? player : null, Button.Ability1);
        Wait(0.16);
        LoopIfConditionIsTrue();
    }

rule: "[AC] :: Sombra Unstealth Bots"
    Event.OngoingPlayer
    Player.Sombra
    if ( !owner.isInStealth && IsUsingAbility1() )
    {
        PressButton(IsAlive() ? player : null, Button.Ability1);
    }

rule: "[AC] :: Mei Cancel Ice Block"
    Event.OngoingPlayer
    Player.Mei
    # gross fix, thanks blizzard
    if ( !IsDummyBot() && !IsUsingAbility1() )
    {
        define bots = livingBots;
        CancelPrimaryAction(bots);
    }

rule: "[AC] :: Mei Ice Block After Bot Spawns"
    Event.OngoingPlayer
    Player.Mei
    if ( IsUsingAbility1(owner) && botAlive && !IsUsingAbility1() )
    {
        PressButton(player, Button.Ability1);
        Wait(0.16);
        LoopIfConditionIsTrue();
    }

rule: "[AC] :: Echo Flight Fix"
    Event.OngoingPlayer
    Player.Echo
    if ( IsDummyBot() && IsUsingAbility1(owner) )
    {
        # bug: if moving in a direction echo will gain/lose more distance than intended if i use echos default flight speed (8), bandaid fix for this is to make the speed of the impulse less intense. not sure how to fix this
        if ( IsButtonHeld(owner, Button.Jump) )
            ApplyImpulse(player, Up(), 4.85, Relative.ToWorld);
        else if ( IsButtonHeld(owner, Button.Crouch) )
            ApplyImpulse(player, Down(), 4.85, Relative.ToWorld);

        Wait();
        LoopIfConditionIsTrue();
    }

rule: "[AC] :: Mercy Valk Flight Fix"
    Event.OngoingPlayer
    Player.Mercy
    if ( IsDummyBot() && IsUsingUltimate(owner) )
    {
        # bug: if moving in a direction mercy will gain/lose more distance than intended if i use mercy valk default speed (9), bandaid fix for this is to make the speed of the impulse less intense. not sure how to fix this
        if ( IsButtonHeld(owner, Button.Jump) )
            ApplyImpulse(player, Up(), 5.35, Relative.ToWorld);
        else if ( IsButtonHeld(owner, Button.Crouch) )
            ApplyImpulse(player, Down(), 5.35, Relative.ToWorld);

        Wait();
        LoopIfConditionIsTrue();
    }

// rule: "[AC] :: Dva Demech"
//     Event.OngoingPlayer
//     Player.Dva
//     if ( !IsDummyBot() && ( Health() == 1 || IsInAlternativeForm()) )
//     {
//         WaitIfTrue(1.6);
//         define dvaBots = RemoveFromArray(livingBots, MaxHealth() == 150);
//         Damage(dvaBots, null, 10000);
//     }

rule: "[AC] :: Reaper Cancel TP if bot failed"
    Event.OngoingPlayer
    Player.Reaper
    if ( !IsDummyBot() && !IsUsingAbility2() )
    {
        define bots = livingBots;
        CancelPrimaryAction(bots);
    }

rule: "[AC] :: Genji On"
    Event.OngoingPlayer
    Player.Genji
    if ( IsUsingAbility1() )
    {
        StartDamageModification(EnemyPlayers(), player, 33.334);
        genjiAO = LastDamageModificationID();
    }

rule: "[AC] :: Genji Off"
    Event.OngoingPlayer
    Player.Genji
    if ( !IsUsingAbility1() )
    {
        StopDamageModification(genjiAO);
    }

disabled rule: "---------------- Debug ----------------"{}

                /////////////             /////////////
                /////////////    DEBUG    /////////////
                /////////////             /////////////

rule: "[DBG] :: Inspector Toggle"
    if ( IsButtonHeld(host, Button.Melee) && IsButtonHeld(host, Button.Interact) )
    {
        inspector = !inspector;
        if (inspector)
        {
            SmallMessage(host, "Inspector enabled");
            EnableInspectorRecording();
        }
        else
        {
            SmallMessage(host, "Inspector disabled");
            DisableInspectorRecording();
        }
    }

disabled rule: "[DBG] :: Aim Effect"
    Event.OngoingPlayer
    {
        CreateEffect(owner, Effect.Sphere, Color.Red, RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 100, AllLivingPlayers(OppositeTeamOf(TeamOf())), AllLivingPlayers(TeamOf()), true), 0.1);
    }

disabled rule: "[DBG] :: CC All Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(FilteredArray(AllPlayers(), IsDummyBot(Curr())), null, Status.Stunned, 5);
    }

disabled rule: "[DBG] :: CC Owner Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(ownerBots, null, Status.Asleep, 5);
    }

disabled rule: "[DBG] :: CC"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        SetStatus(player, null, Status.Asleep, 12);
    }

disabled rule: "[DBG] :: Kill All Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        Kill(FilteredArray(AllPlayers(), IsDummyBot(Curr())));
    }

rule: "[DBG] :: Kill Owner Bots"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        Kill(ownerBots);
    }

disabled rule: "[DBG] :: Kill"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        Kill();
    }

disabled rule: "[DBG] :: Kill All"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        Kill(all);
    }

disabled rule: "[DBG] :: Damage"
    Event.OngoingPlayer
    if ( IsInteractHeld() )
    {
        Damage(player, player, 100);
    }

disabled rule: "[DBG] :: HUD"
    Event.OnPlayerJoin
    if ( player == host )
    {
        CreateHudText(host, null, null, <"Server Load: (<0>% Cur | <1>% Avg | <2>% Peak)\n", 
                                                            RoundToInteger(ServerLoad() / 2.55, Rounding.Nearest), 
                                                            RoundToInteger(ServerLoadAverage() / 2.55, Rounding.Nearest), 
                                                            RoundToInteger(ServerLoadPeak() / 2.55, Rounding.Nearest)>, 
                                                            Location.Right, 1);

        CreateHudText(host, null, null, <"isRezzing: <0>", isRezzing>, Location.Right, 1.1);
        CreateHudText(host, null, null, <"CCed: <0>", CCed>, Location.Right, 1.2);
        CreateHudText(host, null, null, <"ownerAlive: <0>", ownerAlive>, Location.Right, 1.3);
        CreateHudText(host, null, null, <"timer: <0>", timer>, Location.Right, 1.4);
        CreateHudText(host, null, null, <"NormalizedHealth: <0>", NormalizedHealth()>, Location.Right, 1.5);
        CreateHudText(host, null, null, <"Throttle: <0>", ThrottleOf()>, Location.Right, 1.51);
        CreateHudText(host, null, null, <"Facing Direction: <0>", Facing()>, Location.Right, 1.52);
        CreateHudText(host, null, null, <"Speed: <0> M/S\n", SpeedOf()>, Location.Right, 1.53);

        CreateHudText(host, null, null, <"Holding PrimaryFire: <0>", IsButtonHeld(player, Button.PrimaryFire)>, Location.Right, 1.6);
        CreateHudText(host, null, null, <"IsFiringPrimary(): <0>\n", IsFiringPrimary()>, Location.Right, 1.7);
        Wait();
    
        CreateHudText(host, null, null, <"Holding SecondayFire: <0>", IsButtonHeld(player, Button.SecondaryFire)>, Location.Right, 1.8);
        CreateHudText(host, null, null, <"IsFiringSecondary(): <0>\n", IsFiringSecondary()>, Location.Right, 1.9);

        CreateHudText(host, null, null, <"Holding Ability1: <0>", IsButtonHeld(player, Button.Ability1)>, Location.Right, 2);
        CreateHudText(host, null, null, <"IsUsingAbility1(): <0>\n", IsUsingAbility1()>, Location.Right, 2.1);

        CreateHudText(host, null, null, <"Holding Ability2: <0>", IsButtonHeld(player, Button.Ability2)>, Location.Right, 2.2);
        CreateHudText(host, null, null, <"IsUsingAbility2(): <0>\n", IsUsingAbility2()>, Location.Right, 2.3);
        Wait();

        CreateHudText(host, null, null, <"Holding Jump: <0>", IsButtonHeld(player, Button.Jump)>, Location.Right, 2.4);
        CreateHudText(host, null, null, <"IsJumping(): <0>\n", IsJumping()>, Location.Right, 2.5);

        CreateHudText(host, null, null, <"Holding Crouch: <0>", IsButtonHeld(player, Button.Crouch)>, Location.Right, 2.6);
        CreateHudText(host, null, null, <"IsCrouching(): <0>\n", IsCrouching()>, Location.Right, 2.7);

        CreateHudText(host, null, null, <"Holding Melee: <0>", IsButtonHeld(player, Button.Melee)>, Location.Right, 2.8);
        CreateHudText(host, null, null, <"IsMeleeing(): <0>\n", IsMeleeing()>, Location.Right, 2.9);

        CreateHudText(host, null, null, <"Holding Reload: <0>", IsButtonHeld(player, Button.Reload)>, Location.Right, 3);
     }
