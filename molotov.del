import "macros.del";
import "testSettings.json";

globalvar num S_RADIUS;
globalvar num S_DURATION;
globalvar num S_DAMAGE;
globalvar num S_DOT;
globalvar num S_SPEED;
globalvar num S_GRAV;
globalvar vec proj_grav_vec;
playervar vec vel;
playervar vec proj_pos;
playervar vec new_proj_pos;
playervar any e_arr;
playervar bool landed;

rule: "init"
{
    S_RADIUS = WorkshopSettingReal("Settings", "Radius (7)", 7, 0.1, 100, 1);
    S_DURATION = WorkshopSettingReal("Settings", "Duration (7)", 7, 0.1, 100, 2);
    S_DAMAGE = WorkshopSettingInteger("Settings", "Explosion Damage (40)", 40, 1, 600, 3);
    S_DOT = WorkshopSettingReal("Settings", "Fire Damage (9)", 9, 0.1, 100, 4);
    S_SPEED = WorkshopSettingReal("Settings", "Speed (25)", 25, 0.1, 1000, 5);
    S_GRAV = WorkshopSettingReal("Settings", "Weight (20)", 20, 0, 1000, 7);
    proj_grav_vec = Vector(0, -S_GRAV, 0);
}

rule: "hud"
Event.OngoingPlayer
{
    CreateHudText(player, null, null, <"landed: <0>", landed>, Location.Left);
    CreateHudText(player, null, null, <"proj_pos: <0>", proj_pos>, Location.Left);
}

// rule: "proj init"
// Event.OngoingPlayer
// if (IsMeleeing())
// {
//     if (EntityExists(e_arr))
//     {
//         DestroyEffects();
//     }

//     proj_pos = EyePosition();
//     vel = Facing() * S_SPEED;
//     landed = false;
// }

void DestroyEffects() playervar "destroy"
{
    for (num i = 0; i < 4; i++)
    {
        DestroyEffect(e_arr[i]);
    }
}

rule: "proj"
Event.OngoingPlayer
if (IsMeleeing())
if (!landed)
{
    if (EntityExists(e_arr))
    {
        DestroyEffects();
    }

    proj_pos = EyePosition();
    vel = Facing() * S_SPEED;
    landed = false;

    while (DistanceBetween(proj_pos, RayCastHitPosition(proj_pos, proj_pos + (vel * 0.016) * 100, EnemyPlayers(), player, true)) >= 0.25 + (S_SPEED / 100))
    {
        vel += proj_grav_vec * 0.016;
        proj_pos += vel * 0.016;
        PlayEffect(all, PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, proj_pos, 0.1);
        MinWait();
    }

    landed = true;
    new_proj_pos = RayCastHitPosition(proj_pos, proj_pos + Down() * 100, null, null);
    DestroyEffects();

    Damage(PlayersWithinRadius(proj_pos, S_RADIUS, LOSCheck: RadiusLOS.SurfacesAndEnemyBarriers), player, S_DAMAGE);

    // effects n shit
    PlayEffect(all, PlayEffect.AsheDynamiteExplosionEffect, Color.Team1, proj_pos, 0);
    PlayEffect(all, PlayEffect.GoodExplosion, Color.Orange, proj_pos, S_RADIUS);
    PlayEffect(all, PlayEffect.AsheDynamiteExplosionSound, Color.White, proj_pos, 100);
    PlayEffect(all, PlayEffect.AnaBioticGrenadeExplosionSound, Color.White, proj_pos, 45);

    CreateEffect(all, Effect.Ring, Color.Orange, new_proj_pos, S_RADIUS);
    e_arr[0] = LastCreatedEntity();
    CreateEffect(all, Effect.Ring, Color.Red, new_proj_pos, S_RADIUS);
    e_arr[1] = LastCreatedEntity();
    CreateEffect(all, Effect.Sparkles, Color.Red, new_proj_pos, S_RADIUS);
    e_arr[2] = LastCreatedEntity();
    CreateEffect(all, Effect.TorbjornOverloadingSound, Color.White, new_proj_pos, 60);
    e_arr[3] = LastCreatedEntity();

    Wait(S_DURATION, WaitBehavior.RestartWhenTrue);

    landed = false;
    DestroyEffects();
}

// rule: "proj"
// Event.OngoingPlayer
// if (DistanceBetween(proj_pos, RayCastHitPosition(proj_pos, proj_pos + (vel * 0.016) * 100, EnemyPlayers(), player, true)) >= 0.25 + (S_SPEED / 100))
// if (!landed)
// {
//     vel += proj_grav_vec * 0.016;
//     proj_pos += vel * 0.016;
//     PlayEffect(all, PlayEffect.EchoStickyBombExplosionEffect, Color.Team2, proj_pos, 0.1);

//     MinWait();
//     LoopIfConditionIsTrue();

//     landed = true;
//     new_proj_pos = RayCastHitPosition(proj_pos, proj_pos + Down() * 100, null, null);
//     DestroyEffects();

//     Damage(PlayersWithinRadius(proj_pos, S_RADIUS, LOSCheck: RadiusLOS.SurfacesAndEnemyBarriers), player, S_DAMAGE);

//     // effects n shit
//     PlayEffect(all, PlayEffect.AsheDynamiteExplosionEffect, Color.Team1, proj_pos, 0);
//     PlayEffect(all, PlayEffect.GoodExplosion, Color.Orange, proj_pos, S_RADIUS);
//     PlayEffect(all, PlayEffect.AsheDynamiteExplosionSound, Color.White, proj_pos, 100);
//     PlayEffect(all, PlayEffect.AnaBioticGrenadeExplosionSound, Color.White, proj_pos, 45);

//     CreateEffect(all, Effect.Ring, Color.Orange, new_proj_pos, S_RADIUS);
//     e_arr[0] = LastCreatedEntity();
//     CreateEffect(all, Effect.Ring, Color.Red, new_proj_pos, S_RADIUS);
//     e_arr[1] = LastCreatedEntity();
//     CreateEffect(all, Effect.Sparkles, Color.Red, new_proj_pos, S_RADIUS);
//     e_arr[2] = LastCreatedEntity();
//     CreateEffect(all, Effect.TorbjornOverloadingSound, Color.White, new_proj_pos, 60);
//     e_arr[3] = LastCreatedEntity();

//     Wait(S_DURATION, WaitBehavior.RestartWhenTrue);

//     landed = false;
//     DestroyEffects();
// }

rule: "damage"
Event.OngoingPlayer
if (landed)
{
    while (true)
    {
        SetStatus(
            PlayersWithinRadius(new_proj_pos, 
                                S_RADIUS, 
                                LOSCheck: RadiusLOS.SurfacesAndEnemyBarriers), player, Status.Burning, 0.30);
        Damage(
            PlayersWithinRadius(new_proj_pos, 
                                S_RADIUS, 
                                LOSCheck: RadiusLOS.SurfacesAndEnemyBarriers), player, S_DOT);

        if (!landed)
            break;

        # 'tick' rate
        Wait(0.25);
    }
}

rule: "[Debug] :: Bots"
if (IsButtonHeld(host, Button.Interact) && !IsButtonHeld(host, Button.Crouch))
{
    CreateDummyBot(HeroOf(host), OppositeTeamOf(TeamOf(host)), -1, RayCastHitPosition(EyePosition(host), EyePosition(host) + Facing(host) * 100, null, null, true), Facing(host) * -1);
}
rule: "[Debug] :: Destroy Bots"
if (IsButtonHeld(host, Button.Crouch) && IsButtonHeld(host, Button.Interact))
{
    DestroyAllDummyBots();
}

