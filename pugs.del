import "macros.del";
globalvar define WIDOW_NUM_WALLBANGS = 10;
playervar define widowIsFiring;
playervar define widowWallbangEnabled;
playervar define widowChase;

rule: "[DBG] :: HUD"
    Event.OnPlayerJoin
    if ( player == host )
    {
        CreateHudText(host, null, null, <"Server Load: (<0>% Cur | <1>% Avg | <2>% Peak)\n", 
                                                            RoundToInteger(ServerLoad() / 2.55, Rounding.Nearest), 
                                                            RoundToInteger(ServerLoadAverage() / 2.55, Rounding.Nearest), 
                                                            RoundToInteger(ServerLoadPeak() / 2.55, Rounding.Nearest)>, 
                                                            Location.Right, 1);

        CreateHudText(host, null, null, <"Chase: <0>\n", widowChase>, Location.Right, 2);

        CreateHudText(host, null, null, <"Holding PrimaryFire: <0>", IsButtonHeld(player, Button.PrimaryFire)>, Location.Right, 6);
        CreateHudText(host, null, null, <"IsFiringPrimary(): <0>\n", IsFiringPrimary()>, Location.Right, 7);
        MinWait();
    
        CreateHudText(host, null, null, <"Holding SecondayFire: <0>", IsButtonHeld(player, Button.SecondaryFire)>, Location.Right, 8);
        CreateHudText(host, null, null, <"IsFiringSecondary(): <0>\n", IsFiringSecondary()>, Location.Right, 9);

        CreateHudText(host, null, null, <"Holding Ability1: <0>", IsButtonHeld(player, Button.Ability1)>, Location.Right, 10);
        CreateHudText(host, null, null, <"IsUsingAbility1(): <0>\n", IsUsingAbility1()>, Location.Right, 11);

        CreateHudText(host, null, null, <"Holding Ability2: <0>", IsButtonHeld(player, Button.Ability2)>, Location.Right, 12);
        CreateHudText(host, null, null, <"IsUsingAbility2(): <0>\n", IsUsingAbility2()>, Location.Right, 13);
        MinWait();

        CreateHudText(host, null, null, <"Holding Jump: <0>", IsButtonHeld(player, Button.Jump)>, Location.Right, 14);
        CreateHudText(host, null, null, <"IsJumping(): <0>\n", IsJumping()>, Location.Right, 15);

        CreateHudText(host, null, null, <"Holding Crouch: <0>", IsButtonHeld(player, Button.Crouch)>, Location.Right, 16);
        CreateHudText(host, null, null, <"IsCrouching(): <0>\n", IsCrouching()>, Location.Right, 17);

        CreateHudText(host, null, null, <"Holding Melee: <0>", IsButtonHeld(player, Button.Melee)>, Location.Right, 18);
        CreateHudText(host, null, null, <"IsMeleeing(): <0>\n", IsMeleeing()>, Location.Right, 19);

        CreateHudText(host, null, null, <"Holding Reload: <0>", IsButtonHeld(player, Button.Reload)>, Location.Right, 20);
    }

disabled rule: "--- Widow ---" {}

rule: "[Widow] :: Ult True"
    Event.OngoingPlayer
    if ( IsUsingUltimate() && IsHero(Hero.Widowmaker) )
    {
        widowWallbangEnabled = true;
    }

rule: "[Widow] :: Ult False"
    Event.OngoingPlayer
    if ( !IsUsingUltimate() && IsHero(Hero.Widowmaker) )
    {
        widowWallbangEnabled = false;
        StopChasingVariable(widowChase);
        widowChase = 0;
        AllowButton(player, Button.PrimaryFire);
    }

rule: "[Widow] :: Disable Primary"
    Event.OngoingPlayer
    if ( widowWallbangEnabled && !IsButtonHeld(player, Button.SecondaryFire) )
    {
        DisallowButton(player, Button.PrimaryFire)
    }

rule: "[Widow] :: Enable Primary"
    Event.OngoingPlayer
    if ( widowWallbangEnabled && IsButtonHeld(player, Button.SecondaryFire) )
    {
        AllowButton(player, Button.PrimaryFire)
    }

// todo: prevent damage being applied twice if shot is not through wall
rule: "[Widow] :: Wallbang Logic"
    Event.OngoingPlayer
    if ( IsFiringPrimary() && widowWallbangEnabled && !widowIsFiring )
    {
        define wallbangHitPos = EyePosition();
        widowIsFiring = true;

        define wallbangLivingEnemies;
        define wallbangHitPlayer;
        define wallbangCount = 0;
        while (DistanceBetween(EyePosition(), wallbangHitPos) < 100 && wallbangCount < WIDOW_NUM_WALLBANGS)
        {
            wallbangLivingEnemies = FilteredArray(EnemyPlayers(), IsAlive(Curr()));
            wallbangHitPos = RayCastHitPosition(wallbangHitPos + Facing(), wallbangHitPos + Facing() * (100 - DistanceBetween(EyePosition(), wallbangHitPos)), wallbangLivingEnemies, player, true);

            PlayEffect(all, PlayEffect.GoodExplosion, Color.Red, wallbangHitPos, 0.2);

            wallbangHitPlayer = RayCastHitPlayer(wallbangHitPos, wallbangHitPos + Facing() * (100 - DistanceBetween(EyePosition(), wallbangHitPos)), wallbangLivingEnemies, player, true);
            wallbangCount++;

            if (wallbangHitPlayer != null)
            {
                Damage(wallbangHitPlayer, player, widowChase);
            }
        }

        PlayEffect(all, PlayEffect.GoodExplosion, Color.Red, EyePosition(), 0.2);

        widowIsFiring = false;
    }

rule: "[Widow] :: Reset isFiring"
    Event.OngoingPlayer
    if ( !IsFiringPrimary() )
    {
        widowIsFiring = false;
    }

rule: "[Widow] :: Set Charge"
    Event.OngoingPlayer
    if ( widowWallbangEnabled && IsButtonHeld(player, Button.SecondaryFire) )
    {
        widowChase = 0;
        Wait(0.33);
        AbortIfConditionIsFalse();
        ChaseVariableOverTime(widowChase, 120, 0.9, TimeChaseReevaluation.None);
    }

rule: "[Widow] :: Reset Charge Scoped"
    Event.OngoingPlayer
    if ( widowWallbangEnabled && IsButtonHeld(player, Button.SecondaryFire) && IsFiringPrimary() )
    {
        StopChasingVariable(widowChase);
        widowChase = 0;
        Wait(0.5); // why??? why do i have to do this????
        ChaseVariableOverTime(widowChase, 120, 0.9, TimeChaseReevaluation.None);
    }

rule: "[Widow] :: Reset Charge Unscoped"
    Event.OngoingPlayer
    if ( widowWallbangEnabled && !IsButtonHeld(player, Button.SecondaryFire) )
    {
        StopChasingVariable(widowChase);
        widowChase = 0;
    }

disabled rule: "--- McCree ---" {}

rule: "[McCree] :: Reduce Cooldown"
    Event.OnDamageDealt
    if ( EventWasCriticalHit() )
    {
        SetAbilityCooldown(player, ButtonValue(Button.Ability1), AbilityCooldown(player, ButtonValue(Button.Ability1)) - 1);
    }

disabled rule: "--- Soldier ---" {}

rule: "[Soldier] :: lol idk yet"
    {

    }