import "macros.del";

// globalvar
globalvar define TIME_CD = 1;
globalvar define TIME_DUR = 10;
globalvar define TELE_CD = 8;
globalvar define DIST = 6.5;
globalvar define timeFrozen;
globalvar define timeDur;
globalvar define icon;

// playervar
playervar define timeCD;
playervar define teleCD;
playervar define mineCD;
playervar define cooldownHud = [];
playervar define timeStatusHud = [];
playervar define timeStatusIcon = [];
playervar define healingMod;
playervar define usingTele;
playervar define teleEffect;
playervar define echoHP;


// ult: stops time for everyone for 10 seconds
// ability 1: teleports and launches the user
// ability 2: mine that rewinds the victims position 5 seconds ago
// secondary: who fuckin knows

rule: "Init"
    Player.Echo
    Event.OngoingPlayer
    {
        SetMaxHealth(player, 0);
        AddHealthPoolToPlayer(player, HealthType.Shields, 198, true, true);
        echoHP = LastCreatedHealthPool();
        DisallowButton(player, Button.Ultimate);
        DisallowButton(player, Button.Ability1);
        DisallowButton(player, Button.Ability2);
        DisallowButton(player, Button.SecondaryFire);

        CreateHudText(player, null, null, <"<0>", UltimateChargePercent() == 100 ? <" \n<0> Time Stop [<2>]:  <1>", AbilityIconString(Hero.Sigma, ButtonValue(Button.Ability1)), IconString(Icon.Checkmark), InputBindingString(ButtonValue(Button.Ultimate))> : <" \n<0> Time Stop [<2>]: <1>%", AbilityIconString(Hero.Sigma, ButtonValue(Button.Ability1)), UltimateChargePercent(), InputBindingString(ButtonValue(Button.Ultimate))>>, Location.Top, 1, Color.White, Color.White, Color.White);
        cooldownHud[0] = LastTextID();

        CreateHudText(player, null, null, <"<0>", teleCD == 0 ? <"<0> Teleport [<2>]:  <1>", AbilityIconString(Hero.Zarya, ButtonValue(Button.Ability2)), IconString(Icon.Checkmark), InputBindingString(ButtonValue(Button.Ability1))> : <"<0> Teleport [<2>]: <1>", AbilityIconString(Hero.Zarya, ButtonValue(Button.Ability2)), RoundToInteger(teleCD, Rounding.Up), InputBindingString(ButtonValue(Button.Ability1))>>, Location.Top, 2, Color.White, Color.White, Color.White);
        cooldownHud[1] = LastTextID();

        CreateHudText(player, null, null, <"<0>", mineCD == 0 ? <"<0> Recall Mine [<2>]:  <1>", AbilityIconString(Hero.Tracer, ButtonValue(Button.Ultimate)), IconString(Icon.Checkmark), InputBindingString(ButtonValue(Button.Ability2))> : <"<0> Recall Mine [<2>]: <1>", AbilityIconString(Hero.Tracer, ButtonValue(Button.Ultimate)), RoundToInteger(mineCD, Rounding.Up), InputBindingString(ButtonValue(Button.Ability2))>>, Location.Top, 3, Color.White, Color.White, Color.White);
        cooldownHud[2] = LastTextID();
    }

rule: "Revert Changes if not Echo"
    Event.OngoingPlayer
    if (!IsHero(Hero.Echo))
    {
        SetMaxHealth(player, 100);

        RemoveHealthPoolFromPlayer(echoHP);

        DestroyHudText(cooldownHud[0]);
        DestroyHudText(cooldownHud[1]);
        DestroyHudText(cooldownHud[2]);

        SetUltimateAbilityEnabled(player, true);

        AllowButton(player, Button.Ultimate);
        AllowButton(player, Button.Ability1);
        AllowButton(player, Button.Ability2);
        AllowButton(player, Button.SecondaryFire);
    }

rule: "[Time] :: Activate Time Stop"
    Player.Echo
    Event.OngoingPlayer
    if (IsButtonHeld(player, Button.Ultimate) && UltimateChargePercent() == 100 && IsAlive())
    {
        timeFrozen = true;
        SetUltimateCharge(player, 0);
        SetUltimateAbilityEnabled(player, false);
        StopChasingVariable(timeCD);
        timeDur = TIME_DUR;
        ChaseVariableAtRate(timeDur, 0, 1, RateChaseReevaluation.None);
    }

rule: "[Time] :: Deactivate Time Stop"
    Player.Echo
    Event.OngoingPlayer
    if (timeFrozen && timeDur == 0)
    {
        timeFrozen = false;
        SetUltimateAbilityEnabled(player, true);
        StopChasingVariable(timeDur);
        ChaseVariableAtRate(timeCD, 0, 1, RateChaseReevaluation.None);
    }

rule: "[Time] :: Stop"
    Event.OngoingPlayer
    if (timeFrozen)
    {
        PauseMatchTime();

        DestroyHudText(timeStatusHud[0]);
        DestroyHudText(timeStatusIcon[0]);
        DestroyHudText(timeStatusHud[1]);
        DestroyHudText(timeStatusIcon[1]);

        Wait();

        CreateHudText(player, null, null, <" \n\n\n\n\n\n\n\n<0>", icon>, Location.Top, 4, Color.White, Color.White, Color.Red);
        timeStatusIcon[0] = LastTextID();
        CreateHudText(player, null, null, <" \nTime will resume in <0>", RoundToInteger(timeDur, Rounding.Up)>, Location.Top, 5, Color.White, Color.White, Color.Red);
        timeStatusHud[1] = LastTextID();

        SetStatus(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), null, Status.Frozen, 10000);
        SetStatus(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), null, Status.Unkillable, 10000);

        StartForcingPlayerOutlines(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), all, true, Color.Purple);

        StartHealingModification(all, all, 0);
        healingMod = LastHealingModificationID();

        SetGravity(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), 0);

        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Up(), 0.001);
        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Down(), 0.001);
        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Left(), 0.001);
        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Right(), 0.001);
        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Forward(), 0.001);
        ApplyImpulse(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), Backward(), 0.001);

        for (define loop; 6; 1)
        {
            icon = "ㅤ";
            Wait(0.25);
            icon = "■";
            Wait(0.25);
        }
    }

rule: "[Time] :: Resume"
    Event.OngoingPlayer
    if (!timeFrozen)
    {
        icon = "▶";
        UnpauseMatchTime();

        DestroyHudText(timeStatusHud[0]);
        DestroyHudText(timeStatusIcon[0]);
        DestroyHudText(timeStatusHud[1]);
        DestroyHudText(timeStatusIcon[1]);

        Wait();

        CreateHudText(player, null, null, <" \n\n\n\n\n\n\n\n<0>", icon>, Location.Top, 4, Color.White, Color.White, Color.SkyBlue);
        timeStatusIcon[1] = LastTextID();
        CreateHudText(player, null, null, " \nTime resumed", Location.Top, 5, Color.White, Color.White, Color.SkyBlue);
        timeStatusHud[0] = LastTextID();

        ClearStatus(all, Status.Frozen);
        ClearStatus(all, Status.Unkillable);

        StopForcingPlayerOutlines(RemoveFromArray(all, PlayersOnHero(Hero.Echo)), all);

        Wait();

        Kill(FilteredArray(all, Health(Curr()) == 1), PlayersOnHero(Hero.Echo));

        StopForcingThrottle();

        StopHealingModification(healingMod);

        SetGravity(all, 100);

        Wait(3);

        DestroyHudText(timeStatusIcon[1]);
        DestroyHudText(timeStatusHud[0]);
    }

rule: "[Time] :: Time Stop Knockback"
    Event.PlayerReceivedKnockback
    if (timeFrozen)
    {
        SetGravity(player != PlayersOnHero(Hero.Echo) ? player : null, 100);
        WaitIfTrue(1);
        SetGravity(player != PlayersOnHero(Hero.Echo) ? player : null, 0);

        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Up(), 0.001);
        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Down(), 0.001);
        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Left(), 0.001);
        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Right(), 0.001);
        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Forward(), 0.001);
        ApplyImpulse(player != PlayersOnHero(Hero.Echo) ? player : null, Backward(), 0.001);
    }

define raycast: RayCastHitPosition(EyePosition(), EyePosition() + Facing() * DIST, null, AllDeadPlayers(), false);

rule: "[Tele] :: True"
    Player.Echo
    Event.OngoingPlayer
    if (IsButtonHeld(player, Button.Ability1) && IsAlive() && teleCD == 0)
    {
        usingTele = true;
        CreateEffect(player, Effect.GoodAura, Color.SkyBlue, raycast, 0.5, EffectRev.VisibleToPositionAndRadius);
        teleEffect = LastCreatedEntity();

        StopChasingVariable(teleCD);
    }

rule: "[Tele] :: Action"
    Player.Echo
    Event.OngoingPlayer
    if (usingTele && !IsButtonHeld(player, Button.Ability1))
    {
        usingTele = false;

        DestroyEffect(teleEffect);

        ApplyImpulse(player, Up(), 0.001);
        ApplyImpulse(player, Down(), 0.001);
        ApplyImpulse(player, Left(), 0.001);
        ApplyImpulse(player, Right(), 0.001);
        ApplyImpulse(player, Forward(), 0.001);
        ApplyImpulse(player, Backward(), 0.001);

        Teleport(player, raycast);

        if (IsButtonHeld(player, Button.Jump))
            ApplyImpulse(player, FacingDirectionOf() + Vector(0, 0.5, 0), 25);
        else 
            ApplyImpulse(player, FacingDirectionOf(), 25);

        PlayEffect(AllyPlayers(), PlayEffect.BadPickupEffect, Color.SkyBlue, player, 1);
        PlayEffect(EnemyPlayers(), PlayEffect.BadPickupEffect, Color.Red, player, 1);
        PlayEffect(all, PlayEffect.BuffImpactSound, Color.White, player, 100);

        teleCD = TELE_CD;

        ChaseVariableAtRate(teleCD, 0, 1, RateChaseReevaluation.None);
    }
