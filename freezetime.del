import "macros.del";
globalvar define timeToggle;
globalvar define timeFrozen;
globalvar define timeCooldown;
globalvar define timeDuration;
globalvar define icon;
playervar define cooldownHud;
playervar define durationHud;
playervar define tsHudText;
playervar define trHudText;
playervar define tsIcon;
playervar define trIcon;
playervar define healingMod;

rule: "toggle"
    if (IsButtonHeld(host, Button.Interact)/*  && timeCooldown == 0 */)
    {
        timeToggle = !timeToggle;
        if (timeToggle)
        {
            timeFrozen = true;
            // timeDuration = 10;
            // ChaseVariableAtRate(timeDuration, 0, 1, RateChaseReevaluation.DestinationAndRate);
            // Wait(0.5);
        }
        else /* if (timeDuration == 0) */
        {
            timeFrozen = false;
            // timeCooldown = 10;
            // ChaseVariableAtRate(timeCooldown, 0, 1, RateChaseReevaluation.DestinationAndRate);
        }
    }

rule: "time stop"
    Event.OngoingPlayer
    if (timeFrozen)
    {
        PauseMatchTime();

        DestroyHudText(trIcon);
        DestroyHudText(trHudText);
        DestroyHudText(cooldownHud);
        DestroyHudText(tsIcon);
        DestroyHudText(tsHudText);
        DestroyHudText(durationHud);

        Wait();

        // CreateHudText(player, null, null, <" \nDuration: <0>", timeDuration>, Location.Top, 1, Color.White, Color.White, Color.White);
        // durationHud = LastTextID();
        CreateHudText(player, null, null, <" \n\n\n\n\n\n\n\n\n<0>", icon>, Location.Top, 2, Color.White, Color.White, Color.Red);
        tsIcon = LastTextID();
        CreateHudText(player, null, null, " \nTime stopped", Location.Top, 3, Color.White, Color.White, Color.Red);
        tsHudText = LastTextID();

        SetStatus(RemoveFromArray(all, host), null, Status.Frozen, 10000);
        SetStatus(RemoveFromArray(all, host), null, Status.Unkillable, 10000);

        SetProjectileSpeed(all, 10);
        SetProjectileGravity(all, 1);

        StartHealingModification(all, all, 0);
        healingMod = LastHealingModificationID();

        SetGravity(RemoveFromArray(all, host), 0);

        ForceThrottle(RemoveFromArray(all, host), 0, 0, 0, 0, 0, 0);

        ApplyImpulse(RemoveFromArray(all, host), Up(), 0.001);
        ApplyImpulse(RemoveFromArray(all, host), Down(), 0.001);
        ApplyImpulse(RemoveFromArray(all, host), Left(), 0.001);
        ApplyImpulse(RemoveFromArray(all, host), Right(), 0.001);
        ApplyImpulse(RemoveFromArray(all, host), Forward(), 0.001);
        ApplyImpulse(RemoveFromArray(all, host), Backward(), 0.001);
    }

rule: "time resume"
    Event.OngoingPlayer
    if (!timeFrozen/*  || timeDuration == 0 */)
    {
        UnpauseMatchTime();

        DestroyHudText(trIcon);
        DestroyHudText(trHudText);
        DestroyHudText(cooldownHud);
        DestroyHudText(tsIcon);
        DestroyHudText(tsHudText);
        DestroyHudText(durationHud);

        Wait();

        // CreateHudText(player, null, null, <" \nCooldown: <0>", timeCooldown>, Location.Top, 1, Color.White, Color.White, Color.White);
        // cooldownHud = LastTextID();
        CreateHudText(player, null, null, " \n\n\n\n\n\n\n\n\n▶", Location.Top, 2, Color.White, Color.White, Color.SkyBlue);
        trIcon = LastTextID();
        CreateHudText(player, null, null, " \nTime resumed", Location.Top, 3, Color.White, Color.White, Color.SkyBlue);
        trHudText = LastTextID();

        ClearStatus(all, Status.Frozen);
        ClearStatus(all, Status.Unkillable);

        StopForcingThrottle();

        SetProjectileSpeed(all, 100);
        SetProjectileGravity(all, 100);

        StopHealingModification(healingMod);

        SetGravity(all, 100);

        Wait();

        Kill(FilteredArray(all, Health(Curr()) == 1), host);

        Wait(3);

        DestroyHudText(trIcon);
        DestroyHudText(trHudText);
    }

// rule: "prevent knockback"
//     Event.PlayerReceivedKnockback
//     if (timeFrozen)
//     {
//         SetGravity(!host ? player : null, 100);
//         WaitIfTrue(0.5);
//         SetGravity(!host ? player : null, 0);
//         ApplyImpulse(!host ? player : null, Up(), 0.001);
//         ApplyImpulse(!host ? player : null, Down(), 0.001);
//         ApplyImpulse(!host ? player : null, Left(), 0.001);
//         ApplyImpulse(!host ? player : null, Right(), 0.001);
//         ApplyImpulse(!host ? player : null, Forward(), 0.001);
//         ApplyImpulse(!host ? player : null, Backward(), 0.001);
//     }

rule: "icon"
    if (timeFrozen)
    {
        for (define loop; 6; 1)
        {
            icon = "ㅤ";
            Wait(0.25);
            icon = "■";
            Wait(0.25);
        }
    }
