import "scortFFASettings.json";
import "macros.del";

globalvar define MATCH_TIME;
globalvar define RAINBOW_S;
globalvar define playerStats;
globalvar define killStreakHud;
globalvar define specPlayerStats;
globalvar define healOnKill;
globalvar define nerfedHeal;
globalvar define sHeal;
globalvar define heal;
globalvar define matchStarted;
globalvar define playersJoined;
globalvar define endScoreboard;
globalvar define sScoreboard;
globalvar define redDot;
globalvar define instantRespawn;
globalvar define serverLoad;

playervar define killStreak;
playervar define bestStreak;

define rainbowColor: CustomColor(128 + 127 * CosineFromDegrees(Time() * RAINBOW_S),
                                 128 + 127 * CosineFromDegrees((Time() * RAINBOW_S) + 120),
                                 128 + 127 * CosineFromDegrees((Time() * RAINBOW_S) + 240), 
                                 250);
define healthColor: CustomColor(r, g, 0, 250);
define percentage: (NormalizedHealth() * 100);
define r: (percentage <= 50) ? 255 : RoundToInteger(256 - (percentage - 50) * 5.12, Rounding.Down);
define g: (percentage >= 50) ? 255 : RoundToInteger(percentage * 5.12, Rounding.Down);

define loadColor: CustomColor(rL, gL, 0, 250);
define avgColor: CustomColor(rA, gA, 0, 250);
define peakColor: CustomColor(rP, gP, 0, 250);

define percentageL: (ServerLoad() / 2.55);
define percentageA: (ServerLoadAverage() / 2.55);
define percentageP: (ServerLoadPeak() / 2.55);

define gL: (percentageL <= 50) ? 255 : RoundToInteger(256 - (percentageL - 50) * 5.12, Rounding.Down);
define rL: (percentageL >= 50) ? 255 : RoundToInteger(percentageL * 5.12, Rounding.Down);
define gA: (percentageA <= 50) ? 255 : RoundToInteger(256 - (percentageA - 50) * 5.12, Rounding.Down);
define rA: (percentageA >= 50) ? 255 : RoundToInteger(percentageP * 5.12, Rounding.Down);
define gP: (percentageP <= 50) ? 255 : RoundToInteger(256 - (percentageP - 50) * 5.12, Rounding.Down);
define rP: (percentageP >= 50) ? 255 : RoundToInteger(percentageP * 5.12, Rounding.Down);

rule: "v1.0.0 | Created by scort#12211 | Feel free to modify, host your own lobby, do whatever; but please don't take credit for the original, that's just mean :(" {}

rule: "Initial Global"
    {
        // DisableInspectorRecording();
        CreateHudText(all, null, "ㅤTryhard FFA | Created by scort#11221", null, Location.Right, 0, Color.White, rainbowColor, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);
        CreateHudText(all, null, "ㅤCode: BKRXY", null, Location.Right, 0.1, Color.White, rainbowColor, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);
        MATCH_TIME = WorkshopSettingInteger("Settings", "​Match Time (Minutes)", 60, 1, 240, 1) * 60;
        tLeft = MATCH_TIME;
        sScoreboard = WorkshopSettingToggle("Settings", "Show Scoreboard at end of match", true, 2);
        redDot = WorkshopSettingToggle("Settings", "Show Widow Red Dot on scope-in", false, 3);
        instantRespawn = WorkshopSettingToggle("Settings", "Respawn instantly on Jump", true, 4);

        healOnKill = WorkshopSettingToggle("Heal On Kill", "Heal On Kill", true, 2);
        sHeal = WorkshopSettingCombo("Heal On Kill", "​Heal Percentage (e.g. killing a 200hp hero would heal the player 100hp if set to 50%)", 1, ["25%", "50%", "75%", "100%"], 4);
        heal = ((sHeal + 1) * 25) / 100;

        killStreakHud = WorkshopSettingToggle("Information", "Show Kill Streaks", true, 1);
        playerStats = WorkshopSettingToggle("Information", "Show Player Stats", true, 2);
        specPlayerStats = WorkshopSettingToggle("Information", "Show Player Stats for spectators", true, 3);
        serverLoad = WorkshopSettingToggle("Information", "Show Server Load for Host", false, 4);
        RAINBOW_S = WorkshopSettingInteger("Information", "​very cool and definitely not gimmicky rainbow cycle speed", 150, 1, 1000, 5);

        if (serverLoad)
        {
            CreateHudText(host, null, null, "Server Load", Location.Left, 10);
            CreateHudText(host, null, "Current", <"<0>%", RoundToInteger(ServerLoad() / 2.55, Rounding.Nearest)>, Location.Left, 11, Color.White, Color.White, loadColor, HudTextRev.VisibleToSortOrderStringAndColor);
            CreateHudText(host, null, "Average", <"<0>%", RoundToInteger(ServerLoadAverage() / 2.55, Rounding.Nearest)>, Location.Left, 12, Color.White, Color.White, avgColor, HudTextRev.VisibleToSortOrderStringAndColor);
            CreateHudText(host, null, "Peak", <"<0>%", RoundToInteger(ServerLoadPeak() / 2.55, Rounding.Nearest)>, Location.Left, 13, Color.White, Color.White, peakColor, HudTextRev.VisibleToSortOrderStringAndColor);
        }

        SetMatchTime(10);
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        playersJoined++;
        killStreak = 0;
        DisableGameModeHud();
    }

rule: "Set Match Time"
    if (IsGameInProgress())
    {
        tRunning = true;
        CreateHudText(all, null, null, tText, Location.Top, 0);

        SetMatchTime(0);
        DisableCompletion();
        DisableAnnouncer();
    }

globalvar define tRunning;
globalvar define tLeft;
globalvar define tText;
rule: "Timer Tick"
    if (tRunning)
    {
        tLeft--;

        if (tLeft >= 3600)
        {
            if (tLeft % 3600 / 60 >= 10)
                tText = tLeft % 60 >= 10 ? <"<0> : <1> : <2>\n\n", RoundToInteger(tLeft / 3600, Rounding.Down), RoundToInteger(tLeft % 3600 / 60, Rounding.Down), tLeft % 60> : <"<0> : <1> : 0<2>\n\n", RoundToInteger(tLeft / 3600, Rounding.Down), RoundToInteger(tLeft % 3600 / 60, Rounding.Down), tLeft % 60>;
            else 
                tText = tLeft % 60 >= 10 ? <"<0> : 0<1> : <2>\n\n", RoundToInteger(tLeft / 3600, Rounding.Down), RoundToInteger(tLeft % 3600 / 60, Rounding.Down), tLeft % 60> : <"<0> : 0<1> : 0<2>\n\n", RoundToInteger(tLeft / 3600, Rounding.Down), RoundToInteger(tLeft % 3600 / 60, Rounding.Down), tLeft % 60>;
        }
        else
            tText = tLeft % 60 >= 10 ? <"<0> : <1>\n\n", RoundToInteger(tLeft / 60, Rounding.Down), tLeft % 60> : <"<0> : 0<1>\n\n", RoundToInteger(tLeft / 60, Rounding.Down), tLeft % 60>;

        Wait(1);
        LoopIfConditionIsTrue();
    }

rule: "Widow Red Dot"
    Player.Widowmaker
    if (redDot)
    {
        CreateEffect(IsFiringSecondary() ? all : null, Effect.GoodAura, Color.Red, 
        RayCastHitPosition(EyePosition(), UpdateEveryFrame(EyePosition() + Facing() * 200), RemoveFromArray(AllLivingPlayers(), player), player),
        0, EffectRev.VisibleToPositionRadiusAndColor);
    }

rule: "Reset Cooldowns on respawn"
    Event.OngoingPlayer
    if (IsAlive())
    {
        SetAmmo(player, 0, MaxAmmo());
        SetAmmo(player, 1, MaxAmmo());

        // tracer / sym
        SetAbilityCharge(IsHero(Hero.Tracer) || IsHero(Hero.Symmetra) ? player : null, Button.Ability1, 3);

        // junkrat
        SetAbilityCharge(IsHero(Hero.Junkrat) ? player : null, Button.Ability1, 2);

        // dva / bastion / pharah
        SetAbilityResource(player, Button.SecondaryFire, 100);

        SetAbilityCooldown(player, Button.Ability1, 0);
        SetAbilityCooldown(player, Button.Ability2, 0);
        SetAbilityCooldown(player, Button.PrimaryFire, 0);
        SetAbilityCooldown(player, Button.SecondaryFire, 0);
    }

rule: "HUD Text"
    Event.OngoingPlayer
    {
        if (killStreakHud)
        {
            // streak self
            CreateHudText(killStreak >= 5 ? player : null, 
            HeroIconString(HeroOf()), 
            <"<0> (You)", player>, <"Streak: <0>", killStreak>, 
            Location.Left, 0, rainbowColor, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleNever);

            // streak enemies
            CreateHudText(killStreak >= 5 ? RemoveFromArray(all, player) : null, 
            HeroIconString(HeroOf()), player, <"Streak: <0>", killStreak>, 
            Location.Left, SlotOf() + 1, healthColor, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);
        }

        if (playerStats)
        {
            // stats
            CreateHudText(player, null, null, 
            IsHero(Hero.Widowmaker) || IsHero(Hero.Ashe) 
            ? 
            <"DMG Done: <0> | DMG Taken: <1> | Acc: <2>% | Scoped Acc <3>% | Crit Acc: <4>% | Scoped Crit Acc <5>%", 
            RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
            RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest),
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.ScopedAccuracy) * 100, Rounding.Nearest),
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.ScopedCriticalHitAccuracy) * 100, Rounding.Nearest)>
            :
            <"DMG Done: <0> | DMG Taken: <1> | Acc: <2>% | Crit Acc: <3>%", 
            RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
            RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest),
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest)>, 
            Location.Top, 2, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);
        }

        if (specPlayerStats)
        {
            // specs
            CreateHudText(null, 
            HeroIconString(HeroOf()), 
            <"<0> | <1> Kills | <2> Deaths | <3> Ults | DMG Out: <4> | DMG In: <5> | Acc: <6>% | Crit Acc: <7>%", 
            player, PlayerStat(player, PlayerStat.FinalBlows), PlayerStat(player, PlayerStat.Deaths), PlayerStat(player, PlayerStat.UltimatesUsed), RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
            RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest)>,
            IsAlive() ? <"<0> HP<1>", RoundToInteger(Health(), Rounding.Nearest), killStreak >= 5 ? <" | <0> streak", killStreak> : ""> : "Dead", 
            Location.Left, SlotOf(), killStreak >= 5 ? rainbowColor : healthColor, Color.White, healthColor, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleAlways);
        }
    }

rule: "Update Killstreak "
    Event.OnFinalBlow
    if (IsAlive(Attacker()))
    {
        killStreak++;

        if (killStreak > bestStreak)
            bestStreak = killStreak;
    }

rule: "Reset Kills"
    Event.OnDeath
    {
        killStreak = 0;
    }

rule: "Heal On Kill"
    Event.OnFinalBlow
    if (healOnKill && !IsDuplicating(Attacker()) && Health(Attacker()) < MaxHealth(Attacker()))
    {
        Heal(Attacker(), null, heal * MaxHealth(Victim()));
    }

rule: "End Game Scoreboard"
    Event.OngoingPlayer
    if (endScoreboard)
    {
        StartFacing(player, Facing(), 10000);
        CreateHudText(player, null, null, <" \n<0> players joined the lobby in total\n\n\n", playersJoined>, Location.Top, 0.1);

        CreateHudText(player, HeroIconString(HeroOf()), <"<0> | <1> HP", player, RoundToInteger(Health(), Rounding.Nearest)>,
        <"Best Streak: <7> | <0> Kills | <1> Deaths | <2> Ults | DMG Out: <3> | DMG In: <4> | Acc: <5>% | Crit Acc: <6>%", 
        PlayerStat(player, PlayerStat.FinalBlows), 
        PlayerStat(player, PlayerStat.Deaths), 
        PlayerStat(player, PlayerStat.UltimatesUsed), 
        RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
        RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
        RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest), 
        RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest), 
        bestStreak>,
        Location.Top, SlotOf() + 1, 
        Color.SkyBlue, Color.SkyBlue);

        CreateHudText(RemoveFromArray(all, player), HeroIconString(HeroOf()), <"<0> | <1> HP", player, RoundToInteger(Health(), Rounding.Nearest)>,
        <"Best Streak: <7> | <0> Kills | <1> Deaths | <2> Ults | DMG Out: <3> | DMG In: <4> | Acc: <5>% | Crit Acc: <6>%", 
        PlayerStat(player, PlayerStat.FinalBlows), 
        PlayerStat(player, PlayerStat.Deaths), 
        PlayerStat(player, PlayerStat.UltimatesUsed), 
        RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
        RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
        RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest), 
        RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest),
        bestStreak>,
        Location.Top, SlotOf() + 1, 
        healthColor, healthColor);
    }

rule: "End Game"
    if (tLeft == 0)
    {
        tRunning = false;
        EnableAnnouncer();
        if (sScoreboard)
        {
            endScoreboard = true;
            
            DestroyAllHudText();
            
            CreateHudText(all, null, null, "Tryhard FFA | Created by scort#11221", Location.Top, 0, Color.White, Color.White, rainbowColor, HudTextRev.VisibleToSortOrderStringAndColor);
            
            StartCamera(all, Vector(214.63, 18.51, 48.69), Vector(203.25, 9.50, 68.08));
            
            DisableGameModeHud(all);
            DisableHeroHud(all);
            DisableRespawning(all);
            DisableKillFeed(all);
            
            // disable movement and freeze players in air
            ForceThrottle(all, 0,0,0,0,0,0);
            SetGravity(all, 0);
            ApplyImpulse(all, Up(), 0.001);
            ApplyImpulse(all, Down(), 0.001);
            ApplyImpulse(all, Forward(), 0.001);
            ApplyImpulse(all, Backward(), 0.001);
            ApplyImpulse(all, Left(), 0.001);
            ApplyImpulse(all, Right(), 0.001);

            DisallowButton(all, Button.PrimaryFire);
            DisallowButton(all, Button.SecondaryFire);
            DisallowButton(all, Button.Ability1);
            DisallowButton(all, Button.Ability2);
            DisallowButton(all, Button.Ultimate);
            DisallowButton(all, Button.Melee);
            DisallowButton(all, Button.Jump);
            DisallowButton(all, Button.Crouch);
            DisallowButton(all, Button.Interact);
            DisableRespawning(all);
            SetDamageDealt(all, 0);
            SetDamageReceived(all, 0);
            
            Wait(15);
        }

        EnableCompletion();
    }

rule: "Force Respawn"
    Event.OngoingPlayer
    if (instantRespawn && IsButtonHeld(player, Button.Jump) && IsDead())
    {
        Respawn();
    }

rule: "[Debug] :: Bots"
    Event.OngoingPlayer
    if (player == host && IsInteractHeld() && !IsCrouchHeld())
    {
        CreateDummyBot(HeroOf(), OppositeTeamOf(TeamOf()), -1, RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100), Facing() * -1);
    }

rule: "[Debug] :: Destroy Bots"
    Event.OngoingPlayer
    if (player == host && IsCrouchHeld() && IsInteractHeld())
    {
        DestroyAllDummyBots();
    }

// rule: "[Debug] :: Damage"
//     Event.OngoingPlayer
//     if (player == host && IsCrouchHeld())
//     {
//         Damage(player, null, 10);
//     }

// rule: "[Debug] :: Hud"
//     Event.OngoingPlayer
//     if (player == host)
//     {
//         CreateHudText(player, null, null, <" \nPos: <0>", PositionOf()>, Location.Top, 10);
//         CreateHudText(player, null, null, <"Facing: <0>", FacingDirectionOf()>, Location.Top, 11);
//         CreateHudText(player, null, null, <"Raycast: <0>", RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100)>, Location.Top, 12);
//     }