import "scortFFASettings.json";
import "macros.del";

globalvar define MATCH_TIME;
globalvar define RGBCYCLE;
globalvar define playerStats;
globalvar define killStreakHud;
globalvar define specPlayerStats;
globalvar define healOnKill;
globalvar define nerfedHeal;
globalvar define s_heal;
globalvar define heal;
globalvar define matchStarted;
playervar define killStreak;

rule: "Created by scort#12211 | Feel free to edit, modify, host your own lobby, whatever; but please don't take credit for the original, that's just mean :(" {}

rule: "Initial Global"
    {
        CreateHudText(all, null, "ㅤTryhard FFA | Created by scort#11221", null, Location.Right, 0, Color.White, CustomColor(128 + 127 * CosineFromDegrees(Time() * RGBCYCLE),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 120),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 240), 
                                                    250), Color.White, HudTextRev.VisibleToSortOrderStringAndColor);

        MATCH_TIME = WorkshopSettingInteger("Settings", "​Match Time (Minutes)", 60, 1, 60, 1) * 60;
        healOnKill = WorkshopSettingToggle("Heal On Kill", "Heal On Kill", true, 2);
        s_heal = WorkshopSettingCombo("Heal On Kill", "​Heal Percentage (ex. killing a 200hp hero would heal 100hp if set to 50%)", 1, ["25%", "50%", "75%", "100%"], 4);
        heal = ((s_heal + 1) * 25) / 100;

        killStreakHud = WorkshopSettingToggle("HUD Text", "Show Kill Streaks", true, 1);
        playerStats = WorkshopSettingToggle("HUD Text", "Show Player Stats", true, 2);
        specPlayerStats = WorkshopSettingToggle("HUD Text", "Show Player Stats for spectators", true, 2);
        RGBCYCLE = WorkshopSettingInteger("HUD Text", "​very cool and definitely not gimmicky RGB cycle speed", 150, 1, 1000, 3);

        SetMatchTime(10);
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        killStreak = 0;
    }

rule: "scort Join"
    Event.OngoingPlayer
    if (<"<0>", player> == "scort" && HasSpawned() && matchStarted)
    {
        SmallMessage(all, "scort joined, say hi :)");
    }

rule: "Set Match Time"
    if (IsGameInProgress())
    {
        SetMatchTime(MATCH_TIME);
        DisableCompletion();
    }

rule: "HUD Text"
    Event.OngoingPlayer
    {
        if (killStreakHud)
        {
            // streak self
            CreateHudText(killStreak >= 5 ? player : null, 
            HeroIconString(HeroOf()), 
            <"<0> (You)", player>, <"Streak: <0>", killStreak>, 
            Location.Left, 0, CustomColor(128 + 127 * CosineFromDegrees(Time() * RGBCYCLE),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 120),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 240), 
                                                    250), Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleNever);

            // streak enemies
            CreateHudText(killStreak >= 5 ? RemoveFromArray(all, player) : null, 
            HeroIconString(HeroOf()), player, <"Streak: <0>", killStreak>, 
            Location.Left, SlotOf() + 1, CustomColor(128 + 127 * CosineFromDegrees(Time() * RGBCYCLE),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 120),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 240), 
                                                    250), Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);
        }

        if (playerStats)
        {
            // stats
            CreateHudText(player, null, null, 
            <"DMG Done: <0> | DMG Taken: <1> | Acc: <2>% | Crit Acc <3>%", 
            RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
            RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest),
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest)>, 
            Location.Top, 2, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);
        }

        if (specPlayerStats)
        {
            // specs
            CreateHudText(null, 
            HeroIconString(HeroOf()), 
            <"<0> | <1> K | <2> D | <3> Ults<4>", player, PlayerStat(player, PlayerStat.FinalBlows), PlayerStat(player, PlayerStat.Deaths), PlayerStat(player, PlayerStat.UltimatesUsed), killStreak >= 5 ? <" | <0> streak", killStreak> : "">, 
            <"DMG Done: <0> | DMG Taken: <1> | Acc: <2>% | Crit Acc <3>%", 
            RoundToInteger(PlayerStat(player, PlayerStat.AllDamageDealt), Rounding.Nearest), 
            RoundToInteger(PlayerStat(player, PlayerStat.DamageTaken), Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest), 
            RoundToInteger(PlayerHeroStat(player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest)>, 
            Location.Left, SlotOf(), killStreak >= 5 ? CustomColor(128 + 127 * CosineFromDegrees(Time() * 150),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 120),
                                                    128 + 127 * CosineFromDegrees((Time() * RGBCYCLE) + 240), 
                                                    250) : Color.Red, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleAlways);
        }
    }

rule: "Update Killstreak "
    Event.OnFinalBlow
    if (IsAlive(Attacker()))
    {
        killStreak++;
    }

rule: "Reset Kills"
    Event.OnDeath
    {
        killStreak = 0;
    }

rule: "Heal On Kill"
    Event.OnFinalBlow
    if (healOnKill && !IsDuplicating(Attacker()) && Health(Attacker()) < MaxHealth(Attacker()))
    {
        Heal(Attacker(), null, heal * MaxHealth(Victim()));
    }

rule: "End Game"
    if (MatchTime() == 0)
    {
        EnableCompletion();
    }

rule: "Force Respawn"
    Event.OngoingPlayer
    if (IsButtonHeld(player, Button.Jump) && IsDead())
    {
        Respawn();
    }

rule: "[Debug] :: Bots"
    Event.OngoingPlayer
    if (player == host && IsInteractHeld() && !IsCrouchHeld())
    {
        CreateDummyBot(HeroOf(), OppositeTeamOf(TeamOf()), -1, RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100), Facing() * -1);
    }

rule: "[Debug] :: Destroy Bots"
    Event.OngoingPlayer
    if (player == host && IsCrouchHeld() && IsInteractHeld())
    {
        DestroyAllDummyBots();
    }

// rule: "[Debug] :: Damage"
//     Event.OngoingPlayer
//     if (player == host && IsCrouchHeld())
//     {
//         Damage(player, null, 10);
//     }