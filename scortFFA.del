import "scortFFASettings.json";
import "macros.del";

globalvar hero[] crit_arr;
globalvar hero[] scope_arr;
globalvar hero[] scope_crit_arr;
globalvar hero[] enviro_arr;
globalvar hero[] self_heal_arr;
globalvar str[] s_match_time;
globalvar num match_time;
globalvar num[] strk_arr;
globalvar bool s_player_stats;
globalvar bool s_killstreak_hud;
globalvar bool s_heal_on_kill;
// globalvar bool s_heal_override; // 0 = lucio, 1 = soldier
// globalvar bool s_scoreboard;
globalvar bool s_instant_respawn;
globalvar bool s_server_load;
// globalvar bool s_mute_menu;
// globalvar bool s_use_mute_arr;
globalvar bool s_score_win;
globalvar num s_score;
globalvar num s_heal;
globalvar num heal;
globalvar bool t_running;
globalvar num t_left;
globalvar str t_text;
globalvar color timer_color;
globalvar num bs_ser;
globalvar player bs_ser_usr;
globalvar str bs_ser_hero;
globalvar num t_left_yellow;
// globalvar player[] muted_players;

playervar bool hide_hud;
// playervar bool muted;
playervar num kill_streak;
playervar num best_streak;
playervar str bs_hero;

color rainbow_color: CustomColor(128 + 127 * CosineFromDegrees(Time() * 150),
                                128 + 127 * CosineFromDegrees((Time() * 150) + 120),
                                128 + 127 * CosineFromDegrees((Time() * 150) + 240), 
                                250);
color health_color: CustomColor(r, g, 0, 250);
num percentage: (NormalizedHealth() * 100);
num r: (percentage <= 50) ? 255 : RoundToInteger(256 - (percentage - 50) * 5.12, Rounding.Down);
num g: (percentage >= 50) ? 255 : RoundToInteger(percentage * 5.12, Rounding.Down);

rule: "v1.0.3.71121 | Created by scort#12211" 
{ 
    DisableInspectorRecording(); 
    CreateHudText(FilteredArray(all, !Curr().hide_hud), null, "ㅤTryhard FFA | Created by scort#11221", null, Location.Right, 0.1, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleAlways);
    CreateHudText(FilteredArray(all, !Curr().hide_hud), null, <"ㅤHold <0> to hide HUD | Code: BKRXY     \n", InputBindingString(Button.Interact)>, null, Location.Right, 0.2);
    CreateHudText(FilteredArray(all, Curr().hide_hud), null, <"ㅤHold <0> to show HUD\n", InputBindingString(Button.Interact)>, null, Location.Right, 0.3);
}

// rule: "Preset Mute List"
// if (s_use_mute_arr)
// {
//     # Add or Remove players with this array. Keep in mind this is not unique to a user and can also mute players that happen to have the same name
//     muted_players = ["JasonBourne", "scort"];
// }

rule: "Initial Global"
{
    CreateHudText(all, null, null, t_text, Location.Top, 0.1, TextColor: timer_color, Reevaluation:HudTextRev.VisibleToSortOrderStringAndColor, Spectators: Spectators.VisibleAlways);
    timer_color = Color.White;

    crit_arr = [Hero.Ana, Hero.Pharah, Hero.Zarya, Hero.Reinhardt, Hero.Sigma, Hero.Winston, Hero.Junkrat, Hero.Symmetra, Hero.Brigitte, Hero.Moira];
    scope_arr = [Hero.Widowmaker, Hero.Ashe, Hero.Ana];
    scope_crit_arr = [Hero.Widowmaker, Hero.Ashe];
    enviro_arr = [Hero.Doomfist, Hero.Pharah, Hero.Lucio, Hero.WreckingBall, Hero.Orisa, Hero.Brigitte, Hero.Junkrat, Hero.Winston, Hero.Sigma];
    self_heal_arr = [Hero.Bastion, Hero.Lucio, Hero.Soldier76, Hero.Baptiste, Hero.Ana, Hero.Moira, Hero.Brigitte, Hero.Mercy];

    s_match_time = WorkshopSettingCombo("Settings", "​Match Time", 3, 
    ["15 minutes", "30 minutes", "45 minutes", 
    "1 hour", "1 hour, 15 minutes", "1 hour, 30 minutes", "1 hour, 45 minutes",
    "2 hours", "2 hours, 15 minutes", "2 hours, 30 minutes", "2 hours, 45 minutes",
    "3 hours", "3 hours, 15 minutes", "3 hours, 30 minutes", "3 hours, 45 minutes",
    "4 hours", "4 hours, 15 minutes"], 1);
    match_time = ((s_match_time + 1) * 15);
    t_left = match_time * 60;
    t_left_yellow = t_left / 4;

    s_instant_respawn = WorkshopSettingToggle("Settings", "Respawn instantly on Jump", true, 2);
    s_killstreak_hud = WorkshopSettingToggle("Settings", "Show Kill Streak Info", true, 3);
    s_player_stats = WorkshopSettingToggle("Settings", "Show Player Stats", true, 4);
    s_server_load = WorkshopSettingToggle("Settings", "Show Server Load for Host", false, 5);

    s_score_win = WorkshopSettingToggle("Score Win", "Enable Score Win Condition", true, 1);
    s_score = WorkshopSettingInteger("Score Win", "Score to win", 75, 20, 2000, 2);

    s_heal_on_kill = WorkshopSettingToggle("Heal On Kill", "Heal On Kill", true, 1);
    s_heal = WorkshopSettingCombo("Heal On Kill", "​Heal Percentage", 1, ["25% of Enemies Max Health", "50% of Enemies Max Health", "75% of Enemies Max Health", "100% of Enemies Max Health"], 2);
    heal = ((s_heal + 1) * 25) / 100;

    // s_mute_menu = WorkshopSettingToggle("Mute Menu", "Enable Mute Menu", true, 1);
    // s_use_mute_arr = WorkshopSettingToggle("Mute Menu", "Use the preset muted player list (Import BKRXY instead of a preset for an updated list!)", true, 2);

    num credit = WorkshopSettingCombo("Credit", "Created by", 0, ["scort#11221", "BXRXY", "Please credit!"], 1000);

    if (s_server_load)
    {
        CreateHudText(host, null, null, "Server Load", Location.Left, 10);
        CreateHudText(host, null, "Current", <"<0>%", RoundToInteger(ServerLoad() / 2.55, Rounding.Nearest)>, Location.Left, 11, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);
        CreateHudText(host, null, "Average", <"<0>%", RoundToInteger(ServerLoadAverage() / 2.55, Rounding.Nearest)>, Location.Left, 12, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);
        CreateHudText(host, null, "Peak", <"<0>%", RoundToInteger(ServerLoadPeak() / 2.55, Rounding.Nearest)>, Location.Left, 13, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);
    }

    if (s_instant_respawn)
        CreateHudText(FilteredArray(all, IsDead(Curr())), null, null, <" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPress <0> to respawn instantly, Use normal hero select to change hero", InputBindingString(Button.Jump)>, Location.Top, 10, Color.White, Color.White, Color.Yellow, Spectators: Spectators.VisibleNever);

    

    SetMatchTime(10);
}

rule: "Initial Player Join"
Event.OnPlayerJoin
{
    kill_streak = 0;
    DisableGameModeHud();

    // muted = false;

    // if (s_use_mute_arr && ArrayContains(muted_players, <"<0>", player>))
    // {
    //     LogToInspector(<"<0> is on the muted list", player>);
    //     muted = true;
    //     DisableTextChat(player);
    //     DisableVoiceChat(player, true, true, false);
    //     CreateHudText(!hide_hud ? player : null, null, "You are on the muted list.\nContact scort#11221 if you think this is a mistake.", null, Location.Left, 0.4, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleTo);
    // }
}

rule: "Player Leave"
Event.OnPlayerLeave
{
    if (player == bs_ser_usr)
    {
        bs_ser = LastOf(SortedArray(strk_arr, Curr().best_streak));
        bs_ser_usr = LastOf(SortedArray(all, Curr().best_streak));
        bs_ser_hero = bs_ser_usr.bs_hero;
    }

    kill_streak = 0;
    best_streak = 0;
}

rule: "Kick players who havent selected a hero"
Event.OngoingPlayer
if (!HasSpawned())
{
    # 10 minutes
    WaitIfTrue(600);
    RemovePlayer(player);
}

rule: "Hide/Unhide HUD"
Event.OngoingPlayer
if (IsButtonHeld(player, Button.Interact))
{
    WaitIfTrue(0.5);

    hide_hud = !hide_hud;
    if (hide_hud)
    {
        LogToInspector(<"<0> hid hud", player>);
        hide_hud = true;
    }
    else
    {
        LogToInspector(<"<0> unhid hud", player>);
        hide_hud = false;
    }
}

rule: "Match Started"
if (IsGameInProgress())
{
    SetMatchTime(0);
    DisableCompletion();
    DisableAnnouncer();

    t_running = true;
}

void EndMatch() globalvar "End Match Sub"
{
    t_running = false;
    EnableCompletion();
    // DeclarePlayerVictory(LastOf(SortedArray(all, ScoreOf(Curr()))));
}

rule: "Declare score win"
if (s_score_win && IsTrueForAny(all, ScoreOf(Curr()) >= s_score))
{
    EndMatch();
}

rule: "Time End"
if (t_left <= 0)
{
    EndMatch();
}

rule: "Timer Tick"
if (t_running)
{
    t_text = <"<0><1>:<2>\n", 
            t_left >= 3600 
                ? <"<0>:", RoundToInteger(t_left / 3600, Rounding.Down)> 
                : "", 
            t_left % 3600 / 60 < 10 && t_left >= 3600 
                ? <"0<0>", RoundToInteger(t_left % 3600 / 60, Rounding.Down)> 
                : <"<0>", RoundToInteger(t_left % 3600 / 60, Rounding.Down)>, 
            t_left % 60 >= 10 
                ? <"<0>", t_left % 60> 
                : <"0<0>", t_left % 60>>;

    Wait(1);
    t_left--;
    LoopIfConditionIsTrue();
}

rule: "Timer Color"
if (t_running && t_left % 60 >= 10)
{
    if (t_left <= 60)
        timer_color = Color.Red;
    else if (t_left > t_left_yellow)
        timer_color = Color.White;
    else
        timer_color = Color.Yellow;
}

rule: "Reset Cooldowns on respawn"
Event.OngoingPlayer
if (IsAlive())
{
    SetAmmo(player, 0, MaxAmmo());
    SetAmmo(player, 1, MaxAmmo());

    // tracer / sym
    SetAbilityCharge(IsHero(Hero.Tracer) || IsHero(Hero.Symmetra) ? player : null, Button.Ability1, 3);

    // junkrat
    SetAbilityCharge(IsHero(Hero.Junkrat) ? player : null, Button.Ability1, 2);

    // dva / bastion
    SetAbilityResource(player, Button.SecondaryFire, 100);

    // pharah
    SetAbilityResource(player, Button.Jump, 100);

    SetAbilityCooldown(player, Button.Ability1, 0);
    SetAbilityCooldown(player, Button.Ability2, 0);
    SetAbilityCooldown(player, Button.PrimaryFire, 0);
    SetAbilityCooldown(player, Button.SecondaryFire, 0);
}

rule: "HUD Text"
Event.OngoingPlayer
{
    if (s_killstreak_hud)
    {
        // streak self
        CreateHudText(kill_streak >= 5 
                        ? !hide_hud 
                            ? player 
                            : null 
                        : null, 
        HeroIconString(HeroOf()), 
        <"<0> (You)", player>, 
        best_streak != 0 
            ? <"Streak: <0> | Best: <1>", kill_streak, best_streak> 
            : <"Streak: <0>", kill_streak>, 
        Location.Left, 1, health_color, rainbow_color, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleNever);

        CreateHudText(kill_streak >= 5 
                        ? FilteredArray(RemoveFromArray(all, player), !Curr().hide_hud) 
                        : null, 
        HeroIconString(HeroOf()), 
        <"<0>", player>, 
        best_streak != 0 
            ? <"Streak: <0> | Best: <1>", kill_streak, best_streak> 
            : <"Streak: <0>", kill_streak>, 
        Location.Left, SlotOf() + 1, health_color, Color.White, Color.White, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.VisibleNever);

        // streak best
        CreateHudText(bs_ser >= 5 && (EntityExists(bs_ser_usr) && bs_ser_usr != 0) && !hide_hud 
                        ? player 
                        : null, null, 
        "", <"Best Streak: <0> by <2><1>", bs_ser, bs_ser_usr, bs_ser_hero>, Location.Right, 0.3, Color.White, Color.White, Color.Yellow);
    }

    if (s_player_stats)
    {
        // stats
        CreateHudText(!hide_hud ? player : null, null,
        <" \n\n\n\n\n\n<0> <1>\nKDR: <2>\nDMG Ratio: <3>\nDamage Given: <4>\nDamage Taken: <5>\nAccuracy: <6>%\n<7><8><9><10><11><12>\n", 
        HeroIconString(HeroOf()),
        HeroOf(),

        Kills() / Deaths(),

        DamageDealt() /  DamageTaken(),

        DamageDealt(), 

        DamageTaken(), 

        Accuracy(),

        !ArrayContains(crit_arr, HeroOf())
            ? <"Crit Accuracy: <0>%\n", CritAccuracy()> : "",

        ArrayContains(scope_arr, HeroOf())
            ? <"Scope Accuracy: <0>%\n", ScopedAccuracy()> : "", 

        ArrayContains(scope_crit_arr, HeroOf())
            ? <"Scope Crit Accuracy: <0>%\n", ScopedCritAccuracy()> : "", 

        EnvironmentalKills() != 0 || ArrayContains(enviro_arr, HeroOf())
            ? <"Environmental Kills: <0>\n", EnvironmentalKills()> : "",

        SelfHealing() != 0 || ArrayContains(self_heal_arr, HeroOf())
            ? <"Self Healing: <0>\n", SelfHealing()> : "",

        best_streak != 0 
            ? <" \nBest Streak: <0>", best_streak> : "">,

        null, Location.Left, 0.1, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString);
    }
}

rule: "Update Killstreak"
Event.OnFinalBlow
if (IsAlive(Attacker()) && Attacker() != Victim())
{
    kill_streak++;
}

rule: "Reset Kills"
Event.OnDeath
{
    if (kill_streak >= 5 && kill_streak > best_streak)
    {
        best_streak = kill_streak;

        if (best_streak > bs_ser)
        {
            bs_ser = best_streak;
            bs_ser_usr = player;
            bs_ser_hero = HeroIconString(HeroOf());
            SmallMessage(!hide_hud ? player : null, <"<0> player killstreak! The lobby's best!", kill_streak>);
            Wait(0.1);
            SmallMessage(FilteredArray(RemoveFromArray(all, player), !Curr().hide_hud), <"<2><0> got a <1> player killstreak! The lobby's best!", bs_ser_usr, kill_streak, bs_ser_hero>);
            strk_arr = MappedArray(all, Curr().best_streak);
        }
        else 
        {
            SmallMessage(!hide_hud ? player : null, <"<0> player killstreak! Your personal best!", kill_streak>);
            bs_hero = HeroIconString(HeroOf());
            strk_arr = MappedArray(all, Curr().best_streak);
        }
    }
    else if (kill_streak >= 5)
    {
        SmallMessage(!hide_hud ? player : null, <"<0> player killstreak!", kill_streak>);
    }

    Wait(0.1);
    kill_streak = 0;
}

rule: "Heal On Kill"
Event.OnFinalBlow
if (s_heal_on_kill && !IsDuplicating(Attacker()) && Health(Attacker()) < MaxHealth(Attacker()))
{
    StartHealOverTime(Attacker(), null, 1, heal * MaxHealth(Victim()));
}

// rule: "End Game Scoreboard"
// Event.OngoingPlayer
// if (end_scoreboard)
// {
//     StartFacing(player, Facing(), 10000);

//     StartForcingPlayerOutlines(player, player, true, Color.SkyBlue, OutlineType.Always);
//     StartForcingPlayerOutlines(player, RemoveFromArray(all, player), true, Color.Red, OutlineType.Always);
//     CreateHudText(player, null, null, <" \n<0> players joined the lobby in total\n\n\n", players_joined>, Location.Top, 0.2);

//     CreateHudText(player, HeroIconString(HeroOf()), <"<0> | <1> HP", player, RoundToInteger(Health(), Rounding.Nearest)>,
//     <"Best Streak: <7>  |  <0> Kills  |  <1> Deaths  |  <2> Ults  |  DMG Out: <3>  |  DMG In: <4>  |  Acc: <5>%  |  Crit Acc: <6>%", 
//     Kills(player), 
//     Deaths(player), 
//     UltsUsed(player), 
//     DamageDealt(player), 
//     DamageTaken(player), 
//     Accuracy(player),
//     CritAccuracy(player), 
//     best_streak>,
//     Location.Top, SlotOf() + 1, 
//     Color.SkyBlue, Color.SkyBlue);

//     CreateHudText(RemoveFromArray(all, player), HeroIconString(HeroOf()), <"<0> | <1> HP", player, RoundToInteger(Health(), Rounding.Nearest)>,
//     <"Best Streak: <7>  |  <0> Kills  |  <1> Deaths  |  <2> Ults  |  DMG Out: <3>  |  DMG In: <4>  |  Acc: <5>%  |  Crit Acc: <6>%", 
//     Kills(player), 
//     Deaths(player), 
//     UltsUsed(player), 
//     DamageDealt(player), 
//     DamageTaken(player), 
//     Accuracy(player),
//     CritAccuracy(player), 
//     best_streak>,
//     Location.Top, SlotOf() + 1, 
//     health_color, health_color);
// }

// rule: "End Game"
// if (t_left <= 0)
// {
//     t_running = false;
//     if (s_scoreboard)
//     {
//         end_scoreboard = true;
        
//         DestroyAllHudText();
        
//         CreateHudText(all, null, null, "Tryhard FFA | Created by scort#11221", Location.Top, 0.1, Color.White, Color.White, rainbow_color, HudTextRev.VisibleToSortOrderStringAndColor);
        
//         if (IsMap(Map.Chateau_Guillard) || IsMap(Map.Chateau_Guillard_Halloween))
//             StartCamera(all, Vector(214.63, 18.51, 48.69), Vector(203.25, 9.50, 68.08));
//         else if (IsMap(Map.Kanezaka))
//             StartCamera(all, Vector(-43.94, 14, -2.44), Vector(-33.33, 12.74, -7.33));
//         else if (IsMap(Map.Petra))
//             StartCamera(all, Vector(15.80, -11.59, 55.90), Vector(0.60, 2.92, 36.39));

//         DisableGameModeHud(all);
//         DisableHeroHud(all);
//         DisableRespawning(all);
//         DisableKillFeed(all);
        
//         // disable movement and freeze players in air
//         ForceThrottle(all, 0,0,0,0,0,0);
//         SetGravity(all, 0);
//         ApplyImpulse(all, Up(), 0.001);
//         ApplyImpulse(all, Down(), 0.001);
//         ApplyImpulse(all, Forward(), 0.001);
//         ApplyImpulse(all, Backward(), 0.001);
//         ApplyImpulse(all, Left(), 0.001);
//         ApplyImpulse(all, Right(), 0.001);

//         DisallowButton(all, Button.PrimaryFire);
//         DisallowButton(all, Button.SecondaryFire);
//         DisallowButton(all, Button.Ability1);
//         DisallowButton(all, Button.Ability2);
//         DisallowButton(all, Button.Ultimate);
//         DisallowButton(all, Button.Melee);
//         DisallowButton(all, Button.Jump);
//         DisallowButton(all, Button.Crouch);
//         DisallowButton(all, Button.Interact);
//         DisableRespawning(all);
//         SetDamageDealt(all, 0);
//         SetDamageReceived(all, 0);
        
//         Wait(15);
//     }

//     EnableHeroHud(all);
//     UnpauseMatchTime();
// }

rule: "Force Respawn"
Event.OngoingPlayer
if (s_instant_respawn && IsButtonHeld(player, Button.Jump) && IsDead())
{
    Respawn();
}

globalvar bool inspector;
rule: "Inspector Toggle"
if (IsButtonHeld(host, Button.Melee) && IsButtonHeld(host, Button.Interact))
{
    inspector = !inspector;
    if (inspector)
    {
        SmallMessage(host, "Inspector enabled");
        EnableInspectorRecording();
    }
    else
    {
        SmallMessage(host, "Inspector disabled");
        DisableInspectorRecording();
    }
}

// rule: "lol"
// Event.OngoingPlayer
// if (ArrayContains(muted_players, <"<0>", player>))
// {
//     SetAimSpeed(player, RandomReal(0.001, 10000));
//     Wait(3.5);
//     LoopIfConditionIsTrue();
// }

// rule: "[Debug] :: Bots"
// Event.OngoingPlayer
// if (player == host && IsButtonHeld(player, Button.Interact) && !IsButtonHeld(player, Button.Crouch))
// {
//     CreateDummyBot(HeroOf(), OppositeTeamOf(TeamOf()), -1, RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100), Facing() * -1);
// }

// rule: "[Debug] :: Destroy Bots"
// Event.OngoingPlayer
// if (player == host && IsButtonHeld(player, Button.Crouch) && IsButtonHeld(player, Button.Interact))
// {
//     DestroyAllDummyBots();
// }

// rule: "[Debug] :: Bots Hold Left Click"
// Event.OngoingPlayer
// if (IsDummyBot())
// {
//     StartHoldingButton(player, Button.PrimaryFire);
// }

// rule: "[Debug] :: Decrease Match Time"
//     Event.OngoingPlayer
//     if (player == host && IsReloadHeld())
//     {
//         if (!IsCrouchHeld())
//             t_left--;
//         else
//             t_left -= 60;

//         t_text = <"<0><1>:<2>\n", 
//                 t_left >= 3600 
//                     ? <"<0>:", RoundToInteger(t_left / 3600, Rounding.Down)> 
//                     : "", 
//                 t_left % 3600 / 60 < 10 && t_left >= 3600 
//                     ? <"0<0>", RoundToInteger(t_left % 3600 / 60, Rounding.Down)> 
//                     : <"<0>", RoundToInteger(t_left % 3600 / 60, Rounding.Down)>, 
//                 t_left % 60 >= 10 
//                     ? <"<0>", t_left % 60> 
//                     : <"0<0>", t_left % 60>>;

//         MinWait();
//         LoopIfConditionIsTrue();
//     }

// rule: "[Debug] :: Damage"
// Event.OngoingPlayer
// if (player == host && IsButtonHeld(player, Button.Crouch))
// {
//     SetPlayerHealth(player, 1);
// }

// rule: "[Debug] :: Rez"
// Event.OngoingPlayer
// if (player == host && IsInteractHeld())
// {
//     Resurrect();
// }

// rule: "[Debug] :: Hud"
//     Event.OngoingPlayer
//     if (player == host)
//     {
//         CreateHudText(player, null, null, <" \nPos: <0>", PositionOf()>, Location.Top, 10);
//         CreateHudText(player, null, null, <"Facing: <0>", FacingDirectionOf()>, Location.Top, 11);
//         CreateHudText(player, null, null, <"Raycast: <0>", RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100)>, Location.Top, 12);
//     }