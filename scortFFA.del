import "scortFFASettings.json";
import "macros.del";

globalvar define MATCH_TIME;
globalvar define healOnKill;
globalvar define nerfedHeal;
globalvar define HEAL_PERC;
globalvar define matchStarted;
playervar define killStreak;
playervar define totalKills;
playervar define damageIn;
playervar define damageOut;

rule: "Created by scort#12211 | Feel free to edit, modify, host your own lobby, whatever; but please don't take credit for the original, that's just mean :(" {}

rule: "Initial Global"
    {
        matchStarted = false;
        MATCH_TIME = WorkshopSettingInteger("Match Time", "​Match Time (Minutes)", 60, 1, 60, 1) * 60;
        healOnKill = WorkshopSettingToggle("Heal On Kill", "Heal On Kill", true, 2);
        nerfedHeal = WorkshopSettingToggle("Heal On Kill", "Nerf Heal", true, 3);
        HEAL_PERC = WorkshopSettingInteger("Heal On Kill", "​Heal Percentage", 50, 1, 100, 4) / 100;
        SetMatchTime(10);
    }

rule: "Initial Player Join"
    Event.OnPlayerJoin
    {
        killStreak = 0;
    }

rule: "scort Join"
    Event.OngoingPlayer
    if (<"<0>", player> == "scort" && HasSpawned() && matchStarted)
    {
        SmallMessage(all, "scort joined, say hi :)");
    }

rule: "Set Match Time"
    if (IsGameInProgress())
    {
        matchStarted = true;
        SetMatchTime(MATCH_TIME);
        DisableCompletion();
    }

rule: "HUD Text"
    Event.OngoingPlayer
    {
        // streak self
        CreateHudText(killStreak >= 5 ? player : null, HeroIconString(HeroOf()), <"<0> (You)", player>, <"Streak: <0>", killStreak>, Location.Left, 1, Color.SkyBlue, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);

        // streak enemies
        CreateHudText(killStreak >= 5 ? RemoveFromArray(all, player) : null, HeroIconString(HeroOf()), player, <"Streak: <0>", killStreak>, Location.Left, 2, Color.Red, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);

        // damage
        CreateHudText(player, null, null, <"Damage Done: <0>\nDamage Taken: <1>", damageOut, damageIn>, Location.Top, 2, Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleNever);
    
        // specs
        CreateHudText(null, HeroIconString(HeroOf()), <"<0> | <1> kills | <2> streak", player, totalKills, killStreak>, <"Damage Done: <0> | Damage Taken: <1>", damageOut, damageIn>, Location.Left, SlotOf(), Color.White, Color.White, Color.White, HudTextRev.VisibleToSortOrderAndString, Spectators.VisibleAlways);
    }

rule: "Update Kills"
    Event.OnFinalBlow
    {
        if (IsAlive(Attacker()))
            killStreak++;

        totalKills++;
    }

rule: "Update damageOut"
    Event.OnDamageDealt
    if (Victim() != player)
    {
        damageOut += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "Update damageIn"
    Event.OnDamageTaken
    {
        damageIn += RoundToInteger(EventDamage(), Rounding.Nearest);
    }

rule: "Reset Kills"
    Event.OnDeath
    {
        killStreak = 0;
    }

rule: "Heal On Kill"
    Event.OnFinalBlow
    if (healOnKill && !IsDuplicating(Attacker()) && Health(Attacker()) < MaxHealth(Attacker()))
    {
        if (nerfedHeal)
            Heal(Attacker(), null, HEAL_PERC * MaxHealth(Victim()));
        else
            Heal(Attacker(), null, MaxHealth(Victim()));
    }

rule: "End Game"
    if (MatchTime() == 0)
    {
        EnableCompletion();
    }

rule: "Force Respawn"
    Event.OngoingPlayer
    if (IsButtonHeld(player, Button.Jump) && IsDead())
    {
        Respawn();
    }

// rule: "[Debug] :: Bots"
//     Event.OngoingPlayer
//     if (player == host && IsInteractHeld() && !IsCrouchHeld())
//     {
//         CreateDummyBot(HeroOf(), OppositeTeamOf(TeamOf()), -1, RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100), Facing() * -1);
//     }

// rule: "[Debug] :: Destroy Bots"
//     Event.OngoingPlayer
//     if (player == host && IsCrouchHeld() && IsInteractHeld())
//     {
//         DestroyAllDummyBots();
//     }

// rule: "[Debug] :: Destroy Bots"
//     Event.OngoingPlayer
//     if (player == host && IsCrouchHeld())
//     {
//         Damage(player, null, 10);
//     }