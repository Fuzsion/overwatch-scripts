import "macros.del";

globalvar define NUM_BOUNCES;

playervar define normals;
playervar define hitPos;
playervar define hitPosPlayer;
playervar define ricochets;
playervar define hitPosBounces;
playervar define hitPosPlayerBounces;

playervar define eyePos;
playervar define facing;

rule: "init"
    {
        ServerLoadText();
        NUM_BOUNCES = WorkshopSettingInteger("Raycast (if this isn't set correctly effects will not appear)", "Bounces (1 player = 64 maximum // 12 players = 5 maximum)", 5, 1, 64);
    }

rule: "Ray Bounce"
    Event.OngoingPlayer
    if (IsFiringPrimary())
    {
        normals = [];
        hitPos = [];
        hitPosPlayer = [];
        ricochets = [];
        hitPosBounces = [];
        hitPosPlayerBounces = [];

        for (define loop = 0; loop < NUM_BOUNCES; loop++)
        {
            if (loop > 0)
            {
                eyePos = hitPos[loop - 1];
                facing = ricochets[loop - 1];
            }
            else
            {
                eyePos = EyePosition();
                facing = FacingDirectionOf();
            }

            normals[loop] = RayCastHitNormal(eyePos, eyePos + facing * 100, all, player, true);
            hitPos[loop] = RayCastHitPosition(eyePos, eyePos + facing * 100, all, player, true);
            hitPosPlayer[loop] = RayCastHitPlayer(eyePos, eyePos + facing * 100, all, player, true);
            ricochets[loop] = facing - (2 * (normals[loop] * DotProduct(facing, normals[loop])));
            hitPosBounces[loop] = RayCastHitPosition(hitPos[loop], hitPos[loop] + ricochets[loop] * 100, all, player, true);
            hitPosPlayerBounces[loop] = RayCastHitPlayer(hitPos[loop], hitPos[loop] + ricochets[loop] * 100, all, player, true);

            CreateBeamEffect(all, BeamType.BadBeam, eyePos, hitPos[loop], Color.SkyBlue, EffectRev.None);
            CreateBeamEffect(all, BeamType.BadBeam, hitPos[loop], hitPosBounces[loop], Color.SkyBlue, EffectRev.None);

            Kill(hitPosPlayer[loop], player);
            Kill(hitPosPlayerBounces[loop], player);
        }
    }

rule: "kill effects"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        DestroyAllEffects();
    }


