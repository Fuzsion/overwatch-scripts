import "macros.del";

globalvar define NUM_BOUNCES = 64; // max 64 if one player :: 5 if 12 people

playervar define normals;
playervar define hitPositions;
playervar define ricochets;
playervar define hitPosBounces;

playervar define eyePos;
playervar define facing;

rule: "init"
    {
        ServerLoadText();
    }

disabled rule: "raycast effect"
   Event.OngoingPlayer
   {
      CreateEffect(player, Effect.Sphere, Color.Aqua, RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 100), 0.1);
   }

disabled rule: "face forward"
    Event.OngoingPlayer
    if (IsReloadHeld())
    {
        StartFacing(player, Forward(), 100, Relative.ToPlayer, FacingRev.DirectionAndTurnRate);
        Wait(0.5);
        StopFacing(player);
    }

rule: "Ray Bounce"
    Event.OngoingPlayer
    if (IsFiringPrimary())
    {
        normals = EmptyArray();
        hitPositions = EmptyArray();
        ricochets = EmptyArray();
        hitPosBounces = EmptyArray();

        for (define loop = 0; loop < NUM_BOUNCES; loop++)
        {
            if (loop > 0)
            {
                eyePos = hitPositions[loop - 1];
                facing = ricochets[loop - 1];
            }
            else
            {
                eyePos = EyePosition();
                facing = FacingDirectionOf();
            }

            normals[loop] = RayCastHitNormal(eyePos, eyePos + facing * 1000, AllPlayers(), player, true);
            hitPositions[loop] = RayCastHitPosition(eyePos, eyePos + facing * 1000, AllPlayers(), player, true);
            ricochets[loop] = facing - (2 * (normals[loop] * DotProduct(facing, normals[loop])));
            hitPosBounces[loop] = RayCastHitPosition(hitPositions[loop], hitPositions[loop] + ricochets[loop] * 1000, AllPlayers(), player, true);

            CreateBeamEffect(AllPlayers(), BeamType.BadBeam, eyePos, hitPositions[loop], Color.SkyBlue, EffectRev.None);
            CreateBeamEffect(AllPlayers(), BeamType.BadBeam, hitPositions[loop], hitPosBounces[loop], Color.SkyBlue, EffectRev.None);
            MinWait();
        }
    }

rule: "kill effects"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        DestroyAllEffects();
    }


