// ItsDeltin Overwatch Script to Workshop https://github.com/ItsDeltin/Overwatch-Script-To-Workshop

import "macros.del";
// import "debugtools.del";
// import "cancer.del";

define verText: "Ver 1.5.4";

// bhop
playervar define bhopSpeed;
playervar define speedAccumInAir;
playervar define isChasing;

// primary
playervar define primaryHit;
playervar define primaryStartPos;

// secondary
playervar define secondaryHit;
playervar define secondaryEyePos;
playervar define secondaryOrb;
playervar define secondaryStartPos;

// wallbang
playervar define isFiring;

// grapple
playervar define grappleStartPos;
playervar define grappleEyePos;
playervar define grappleBeamEffect;
playervar define usingGrapple;
playervar define grappleHit;
playervar define grappleHitSphere;
playervar define grapplePlayerBeamEffect;
playervar define grappleHitPlayer;
playervar define grappleHitPlayerSphere;

// misc
playervar define effect;
playervar define damageText;
playervar define textChase;
playervar define livingEnemies;

// constants :: bhop
globalvar define DEFAULT_START_SPEED = 100;
globalvar define BHOP_MAX_SPEED = 320; // 340
globalvar define BHOP_SPEED_RATE = 12.5; // 12.5

// constants :: wallbang
globalvar define NUM_WALLBANGS = 4;

// constants :: grapple
globalvar define GRAPPLE_PULL_SPEED = 3.5;

// constants :: secondary
globalvar define SECONDARY_PROJECTILE_SPEED = 110;

// constants: misc
globalvar define PRE_GAME_TIME = 10;
globalvar define MATCH_TIME_LIMIT = 1200;

// toggle
globalvar define wallbangEnabled = false;
globalvar define matchStarted = false;


rule: "Init"
    if (!matchStarted && CountOf(AllLivingPlayers()) > 0)
    {
        DisableInspectorRecording();
        DisableCompletion();
        DisableAnnouncer();

        ServerLoadText();
        CreateHudText(all, null, verText, null, Location.Left, -1);
        CreditText();
        CreateHudText(all, null, <"Wallbangs: <0>", wallbangEnabled>, null, Location.Left, 10);
        
        SetMatchTime(PRE_GAME_TIME);
        Wait(PRE_GAME_TIME + 1);
        matchStarted = true;
        SetMatchTime(MATCH_TIME_LIMIT);
    }

rule: "Player Join Init"
    Event.OnPlayerJoin
    {
        CreateHudText(player, null, null, <"Speed: <0> M/S", (HorizontalSpeedOf())>, Location.Top, 1);
    }

rule: "End Game"
    if (matchStarted)
    {
        Wait(MATCH_TIME_LIMIT);
        EnableCompletion();
    }

rule: "DBG Bots"
    Event.OngoingPlayer
    if (IsInteractHeld())
    {
        CreateDummyBot(HeroOf(host), OppositeTeamOf(), -1, RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100));
    }

rule: "DBG Destroy Bots"
    Event.OngoingPlayer
    if (IsCrouchHeld() && IsInteractHeld())
    {
        DestroyAllDummyBots();
    }

rule: "DBG Stuff"
    Event.OngoingPlayer
    {
        CreateHudText(player, null, null, <"isChasing: <0>", isChasing>, Location.Left, 15);
        CreateHudText(player, null, null, <"Chase: <0>", bhopSpeed>, Location.Left, 14);
        CreateHudText(player, null, null, <"matchStarted: <0>", matchStarted>, Location.Left, 13);
        CreateHudText(player, null, null, <"isFiring: <0>", isFiring>, Location.Left, 12);
        CreateHudText(player, null, null, <"NUM_WALLBANGS: <0>", NUM_WALLBANGS>, Location.Left, 11);
        // PositionText();
        // FacingText();
        // HorizontalFacingText();
        // VerticalFacingText();
    }

disabled rule: "DBG performance test (bots)"
    Event.OngoingPlayer
    if (IsDummyBot())
    {
        StartHoldingButton(player, Button.PrimaryFire);
        StartHoldingButton(player, Button.Jump);
    }

rule: "Hit Text"
    Event.OnDamageDealt
    {
        textChase = Vector(0,1,0);
        if (EventWasCriticalHit())
        {
            CreateInWorldText(player, "Critical", PositionOf(Victim()) + textChase, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Red);
            PlayEffect(player, PlayEffect.BuffImpactSound, Color.White, player, 100);
        }
        else
        {
            CreateInWorldText(player, "Hit", PositionOf(Victim()) + textChase, 1.2, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow);
        }

        damageText = LastTextID();
        ChaseVariableAtRate(textChase, Vector(0,1.5,0), 2.5, RateChaseReevaluation.DestinationAndRate);
        Wait(0.4);
        StopChasingVariable(textChase);
        DestroyInWorldText(damageText);
    }

rule: "Primary effect"
    Event.OngoingPlayer
    if (!wallbangEnabled && IsFiringPrimary())
    {
        livingEnemies = FilteredArray(EnemyPlayers(), IsAlive(ArrayElement()));
        primaryStartPos = WorldVectorOf(Right() - Vector(0, 0.3, 0), player) * 0.18;
        primaryHit = RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100, livingEnemies, player);
        CreateBeamEffect(all, BeamType.BadBeam, EyePosition() + Facing() + primaryStartPos, primaryHit, Color.Aqua, EffectRev.None);
        effect = LastCreatedEntity();
        
        PlayEffect(all, PlayEffect.GoodExplosion, Color.Aqua, EyePosition() + Facing() + primaryStartPos, 0.2);
        PlayEffect(all, PlayEffect.GoodExplosion, Color.Aqua, primaryHit, 0.2);

        Wait(0.25);
        DestroyEffect(effect);
    }

rule: "---------------- Bhop Rules Start ----------------"{}
rule: "Bhop :: Auto Hop"
    Event.OngoingPlayer
    if (IsOnGround() && IsJumpHeld())
    {
        DisableJump();
        MinWait();
        AllowJump();
    }

rule: "Bhop :: Starting Speed"
    Event.OngoingPlayer
    {
        bhopSpeed = DEFAULT_START_SPEED;
    }

rule: "Bhop :: If Airborne"
    Event.OngoingPlayer
    if ((!usingGrapple && IsInAir() && HorizontalSpeedOf() > DEFAULT_START_SPEED / 33.33) || (usingGrapple && IsInAir() && DistanceBetween(grappleEyePos, grappleHit) <= 100))
    {
        speedAccumInAir = HorizontalSpeedOf();
        Wait(0.05);
        ChaseVariableAtRate(bhopSpeed, BHOP_MAX_SPEED, BHOP_SPEED_RATE, RateChaseReevaluation.DestinationAndRate);

        isChasing = true;
    }

rule: "Bhop :: Update Speed"
    Event.OngoingPlayer
    if (isChasing)
    {
        speedAccumInAir = HorizontalSpeedOf();
        SetMoveSpeed(player, bhopSpeed);
        WaitIfTrue(0.032);
        Loop();
    }

rule: "Bhop :: Update isChasing"
    Event.OngoingPlayer
    if (isChasing && bhopSpeed == BHOP_MAX_SPEED || bhopSpeed == DEFAULT_START_SPEED)
    {
        StopChasingVariable(bhopSpeed);
        isChasing = false;
    }

rule: "Bhop :: Reset speed if turning too fast"
    Event.OngoingPlayer
    if (HorizontalSpeedOf() < speedAccumInAir - 0.45)
    {
        StopChasingVariable(bhopSpeed);
        isChasing = false;
        bhopSpeed = DEFAULT_START_SPEED;
        SetMoveSpeed(player, bhopSpeed);
    }

rule: "Bhop :: Stop chasing if too slow"
    Event.OngoingPlayer
    if (!usingGrapple && isChasing && HorizontalSpeedOf() <= DEFAULT_START_SPEED / 66.66)
    {
        StopChasingVariable(bhopSpeed);
        isChasing = false;
        bhopSpeed = DEFAULT_START_SPEED;
        SetMoveSpeed(player, bhopSpeed);
        WaitIfTrue(0.032);
        Loop();
    }

rule: "Bhop :: Stop if player is on ground"
    Event.OngoingPlayer
    if ((IsOnGround() && !usingGrapple) && (bhopSpeed > DEFAULT_START_SPEED))
    {
        WaitIfTrue(0.2);
        StopChasingVariable(bhopSpeed);
        bhopSpeed = DEFAULT_START_SPEED;
        // ChaseVariableAtRate(bhopSpeed, DEFAULT_START_SPEED, 325, RateChaseReevaluation.DestinationAndRate);
        // isChasing = true;
        SetMoveSpeed(player, bhopSpeed);
    }

rule: "---------------- Wallbang Rules Start ----------------"{}
/* WELCOME TO HELL */

rule: "Wallbang :: Toggle for host"
    if (IsButtonHeld(host, Button.Ability1) && IsButtonHeld(host, Button.Reload))
    {
        Wait(0.3);
        DestroyAllEffects();
        wallbangEnabled = !wallbangEnabled;
        if (wallbangEnabled)
            SmallMessage(all, "Host Enabled Wallbangs");
        else
            SmallMessage(all, "Host Disabled Wallbangs");
    }


rule: "Wallbang :: Logic"
    Event.OngoingPlayer
    if (wallbangEnabled && IsFiringPrimary() && !isFiring)
    {

        define gunPos = EyePosition() + Facing() + WorldVectorOf(Right() - Vector(0, 0.3, 0), player) * 0.18;
        define wallbangHitPos = EyePosition();
        isFiring = true;
        
        define wallbangLivingEnemies;
        define wallbangHitPlayer;
        define wallbangCount = 0;
        while (DistanceBetween(gunPos, wallbangHitPos) < 100 && wallbangCount < NUM_WALLBANGS)
        {
            wallbangLivingEnemies = FilteredArray(EnemyPlayers(), IsAlive(ArrayElement()));
            wallbangHitPos = RayCastHitPosition(wallbangHitPos + Facing(), wallbangHitPos + Facing() * (100 - DistanceBetween(gunPos, wallbangHitPos)), wallbangLivingEnemies, player, true);
            PlayEffect(all, PlayEffect.GoodExplosion, Color.Aqua, wallbangHitPos, 0.2);
            wallbangHitPlayer = RayCastHitPlayer(wallbangHitPos, wallbangHitPos + Facing() * (100 - DistanceBetween(gunPos, wallbangHitPos)), wallbangLivingEnemies, player, true);
            if (DistanceBetween(wallbangHitPos, EyePosition(wallbangHitPlayer) + Vector(0,0.2,0)) < 0.3 && wallbangHitPlayer != null)
            {
                PlayEffect(player, PlayEffect.BuffImpactSound, Color.White, player, 100);
                Kill(wallbangHitPlayer, player);
            }
            else
            {
                Kill(wallbangHitPlayer, player);
            }

            wallbangCount++;
        }

        CreateBeamEffect(all, BeamType.BadBeam, gunPos, wallbangHitPos, Color.Aqua, EffectRev.None);
        effect = LastCreatedEntity();
        PlayEffect(all, PlayEffect.GoodExplosion, Color.Aqua, gunPos, 0.2);

        Wait(0.25);
        DestroyEffect(effect);

        isFiring = false;
    }

rule: "---------------- Secondary Fire Rules Start ----------------"{}
rule: "Secondary Fire :: Projectile"
    Event.OngoingPlayer
    if (matchStarted && IsSecondaryHeld() && IsAlive())
    {
        livingEnemies = FilteredArray(EnemyPlayers(), IsAlive(ArrayElement()));
        secondaryStartPos = WorldVectorOf(Right() - Vector(0, 0.3, 0), player) * 0.18;
        secondaryHit = RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100, livingEnemies, player);
        secondaryEyePos = EyePosition() + secondaryStartPos;
        DestroyEffect(secondaryOrb);
        PlayEffect(all, PlayEffect.RingExplosionSound, Color.White, player, 50);
        PlayEffect(all, PlayEffect.GoodExplosion, Color.Red, EyePosition() + Facing() + secondaryStartPos, 0.2);

        // projectile
        CreateEffect(all, Effect.Orb, Color.Red, secondaryEyePos, 0.1);
        secondaryOrb = LastCreatedEntity();
        ChaseVariableAtRate(secondaryEyePos, secondaryHit, SECONDARY_PROJECTILE_SPEED, RateChaseReevaluation.DestinationAndRate);

        Wait(0.5);
    }

rule: "Secondary Fire :: Impulse"
    Event.OngoingPlayer
    if (DistanceBetween(secondaryEyePos, secondaryHit) < 0.1 || RayCastHitPlayer(EyePosition(), secondaryEyePos, AllLivingPlayers(), player) != null)
    {
        StopChasingVariable(secondaryEyePos);
        define players = FilteredArray(AllLivingPlayers(), DistanceBetween(ArrayElement(), secondaryEyePos) <= 4.5);
        for (define loop = 0; CountOf(players); 1)
        {
            ApplyImpulse(players[loop], Vector(0,1,0) + DirectionTowards(secondaryEyePos, players[loop] + Vector(0, YOf(EyePosition(players[loop])- players[loop]) / 2, 0)), 15, Relative.ToWorld, ContraryMotion.Incorporate);
        }
        
        // projectile hit effect
        PlayEffect(all, PlayEffect.GoodExplosion, Color.Red, secondaryHit, 1.5);
        PlayEffect(VisibleTo: all, 
                   Type: PlayEffect.RingExplosionSound, 
                   Position: EyePosition() + Facing() + WorldVectorOf(Right() - Vector(0, 0.3, 0), player) * 0.17, 
                   Radius: 15);
        DestroyEffect(secondaryOrb);
    }

rule: "---------------- Grapple Rules Start ----------------"{}
rule: "Grapple :: Grapple Start"
    Event.OngoingPlayer
    if (matchStarted && IsAbility2Held() && IsAlive())
    {
        livingEnemies = FilteredArray(EnemyPlayers(), IsAlive(ArrayElement()));
        grappleHit = RayCastHitPosition(EyePosition(), EyePosition() + Facing() * 100, livingEnemies, player);
        grappleHitPlayer = RayCastHitPlayer(EyePosition(), EyePosition() + Facing() * 100, livingEnemies, player, true);
        grappleEyePos = EyePosition();

        if (grappleHitPlayer)
        {
            CreateBeamEffect(all, BeamType.GrappleBeam, player, grappleHitPlayer, Color.Yellow, EffectRev.VisibleToPositionAndRadius);
            grappleBeamEffect = LastCreatedEntity();
            
            CreateEffect(all, Effect.Sphere, Color.Yellow, grappleHitPlayer, 0.2);
            grappleHitPlayerSphere = LastCreatedEntity();
        }
        else 
        {
            CreateBeamEffect(all, BeamType.GrappleBeam, player, grappleHit, Color.Yellow, EffectRev.VisibleToPositionAndRadius);
            grappleBeamEffect = LastCreatedEntity();
            
            CreateEffect(all, Effect.Sphere, Color.Yellow, grappleHit, 0.2);
            grappleHitSphere = LastCreatedEntity();
        }

        PlayEffect(all, PlayEffect.BadExplosion, Color.Yellow, player, 0.25);
        PlayEffect(all, PlayEffect.DebuffImpactSound, Color.Yellow, player, 100);
        PlayEffect(all, PlayEffect.BadExplosion, Color.Yellow, grappleHit, 0.2);
        PlayEffect(all, PlayEffect.DebuffImpactSound, Color.Yellow, grappleHit, 50);

        usingGrapple = true;
    }

rule: "Grapple :: Pull"
    Event.OngoingPlayer
    if (usingGrapple && DistanceBetween(grappleEyePos, grappleHit) <= 100)
    {
        if (grappleHitPlayer && IsAlive(grappleHitPlayer))
            ApplyImpulse(grappleHitPlayer, Vector(0, 0.3, 0) + DirectionTowards(grappleHitPlayer, EyePosition()), GRAPPLE_PULL_SPEED / 1.25, Relative.ToWorld, ContraryMotion.Incorporate);
        else
            ApplyImpulse(player, Vector(0, 0.3, 0) + DirectionTowards(EyePosition(), grappleHit), GRAPPLE_PULL_SPEED, Relative.ToWorld, ContraryMotion.Incorporate);

        WaitIfTrue(0.064);
        Loop();
    }

rule: "Grapple :: Stop Directional Movement"
    Event.OngoingPlayer
    if (usingGrapple && DistanceBetween(grappleEyePos, grappleHit) <= 100)
    {
        ForceThrottle(player, 0, 0.05, 0, 0.05, 0, 0.05);
    }

rule: "Grapple :: Grapple End"
    Event.OngoingPlayer
    if ((!IsAbility2Held() || IsDead() || IsDead(grappleHitPlayer)) || (!IsInLineOfSight(player, grappleHitPlayer) && grappleHitPlayer))
    {
        usingGrapple = false;
    }

rule: "Grapple :: Destroy Effects"
    Event.OngoingPlayer
    if (!usingGrapple)
    {
        DestroyEffect(grappleBeamEffect);
        DestroyEffect(grapplePlayerBeamEffect);
        DestroyEffect(grappleHitSphere);
        DestroyEffect(grappleHitPlayerSphere);
        StopForcingThrottle();
    }
