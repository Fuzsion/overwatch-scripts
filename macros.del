// aliases
type bool = Boolean;
type map = Map;
type hero = Hero;
type num = Number;
type vec = Vector;
type any = Any;
type player = Player;
type color = Color;
type str = String;

player          player:                                                                     EventPlayer();
player          local:                                                                      LocalPlayer();
player          host:                                                                       HostPlayer();
player[]        all:                                                                        AllPlayers();
player[]        all_living:                                                                 AllLivingPlayers();
vec             Facing(player p = EventPlayer()):                                           FacingDirectionOf(p);
num             Time():                                                                     TotalTimeElapsed();
any             WaitIfTrue(num time):                                                       Wait(time, WaitBehavior.AbortWhenFalse);
player[]        EnemyPlayers(player p = EventPlayer()):                                     AllPlayers(OppositeTeamOf(TeamOf(p)));
player[]        AllyPlayers(player p = EventPlayer()):                                      AllPlayers(TeamOf(p));
bool            IsHero(in hero hero):                                                       HeroOf() == hero;
bool            IsDuplicatingHero(in hero hero):                                            HeroBeingDuplicated() == hero;
bool            IsMap(in map map):                                                          CurrentMap() == map;
bool            IsHostSpectating():                                                         !ArrayContains(all, host);
any             Curr():                                                                     ArrayElement();
any             Update(any value):                                                          UpdateEveryFrame(value);


num             Floor(num float):                                                           RoundToInteger(float, Rounding.Down);
num             Ceiling(num float):                                                         RoundToInteger(float, Rounding.Up);
num             Round(num float):                                                           RoundToInteger(float);
num             Dot(vec n, vec d):                                                          DotProduct(n, d);
num             Cross(vec n, vec d):                                                        CrossProduct(n, d);
num             Abs(num v):                                                                 AbsoluteValue(v);
bool            IsInRange(num n, num min, num max):                                         n >= min && n <= max;



// buttons
bool            IsAbility1Held(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ability1);
bool            IsAbility2Held(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ability2);
bool            IsCrouchHeld(player p = EventPlayer()):                                     IsButtonHeld(p, Button.Crouch);
bool            IsInteractHeld(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Interact);
bool            IsJumpHeld(player p = EventPlayer()):                                       IsButtonHeld(p, Button.Jump);
bool            IsMeleeHeld(player p = EventPlayer()):                                      IsButtonHeld(p, Button.Melee);
bool            IsPrimaryHeld(player p = EventPlayer()):                                    IsButtonHeld(p, Button.PrimaryFire);
bool            IsReloadHeld(player p = EventPlayer()):                                     IsButtonHeld(p, Button.Reload);
bool            IsSecondaryHeld(player p = EventPlayer()):                                  IsButtonHeld(p, Button.SecondaryFire);
bool            IsUltimateHeld(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ultimate);
color           RainbowColor():                                                             CustomColor(128 + 127 * CosineFromDegrees(Time() * 100),
                                                                                                        128 + 127 * CosineFromDegrees((Time() * 100) + 120),
                                                                                                        128 + 127 * CosineFromDegrees((Time() * 100) + 240), 
                                                                                                        250);
num             Kills(player p = EventPlayer()):                                            PlayerStat(p, PlayerStat.FinalBlows);
num             Deaths(player p = EventPlayer()):                                           PlayerStat(p, PlayerStat.Deaths);
num             DamageDealt(player p= EventPlayer()):                                       Round(PlayerStat(p, PlayerStat.AllDamageDealt));
num             DamageTaken(player p = EventPlayer()):                                      Round(PlayerStat(p, PlayerStat.DamageTaken));
num             Accuracy(player p = EventPlayer()):                                         Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100);
num             CritAccuracy(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100);
num             ScopedAccuracy(player p = EventPlayer()):                                   Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.ScopedAccuracy) * 100);
num             ScopedCritAccuracy(player p = EventPlayer()):                               Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.ScopedCriticalHitAccuracy) * 100);
num             EnvironmentalKills(player p = EventPlayer()):                               PlayerHeroStat(p, HeroOf(), PlayerHeroStat.EnvironmentalKills);
num             HealingDealt(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.HealingDealt));
num             HealingTaken(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.HealingReceived));
num             SelfHealing(player p = EventPlayer()):                                      Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.SelfHealing));
num             UltsUsed(player p = EventPlayer()):                                         PlayerStat(p, PlayerStat.UltimatesUsed);
num             UltsEarned(player p = EventPlayer()):                                       PlayerStat(p, PlayerStat.UltimatesEarned);
num             DamageBlocked(player p = EventPlayer()):                                    PlayerStat(p, PlayerStat.DamageBlocked);
str             AltFont(any s):                                                             <" <0> ", s>;

enum SpectatorButton
{
    Q = Button.Ability1,
    E = Button.Interact,
    Shift = Button.SecondaryFire,
    Ctrl = Button.PrimaryFire,
    M1 = Button.Ability2,
    B = Button.Jump,
    Z = Button.Ultimate
}