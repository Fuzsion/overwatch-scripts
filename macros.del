// aliases
type bool = Boolean;
type map = Map;
type hero = Hero;
type num = Number;
type vec = Vector;
type any = Any;
type player = Player;
type color = Color;
type str = String;

player          player:                                                                     EventPlayer();
player          local:                                                                      LocalPlayer();
player          host:                                                                       HostPlayer();
player[]        all:                                                                        AllPlayers();
player[]        all_living:                                                                 AllLivingPlayers();
vec             Facing(player p = EventPlayer()):                                           FacingDirectionOf(p);
num             Time():                                                                     TotalTimeElapsed();
any             WaitIfTrue(num time):                                                       Wait(time, WaitBehavior.AbortWhenFalse);
player[]        EnemyPlayers(player p = EventPlayer()):                                     AllPlayers(OppositeTeamOf(TeamOf(p)));
player[]        AllyPlayers(player p = EventPlayer()):                                      AllPlayers(TeamOf(p));
bool            IsHero(in hero hero):                                                       HeroOf() == hero;
bool            IsDuplicatingHero(in hero hero):                                            HeroBeingDuplicated() == hero;
bool            IsMap(in map map):                                                          CurrentMap() == map;
bool            IsHostSpectating():                                                         !ArrayContains(all, host);
any             Curr():                                                                     ArrayElement();
any             Update(any value):                                                          UpdateEveryFrame(value);


num             Floor(num float):                                                           RoundToInteger(float, Rounding.Down);
num             Ceiling(num float):                                                         RoundToInteger(float, Rounding.Up);
num             Round(num float):                                                           RoundToInteger(float);
num             Dot(vec n, vec d):                                                          DotProduct(n, d);
num             Cross(vec n, vec d):                                                        CrossProduct(n, d);
num             Abs(num v):                                                                 AbsoluteValue(v);
bool            IsInRange(num n, num min, num max):                                         n >= min && n <= max;



// buttons
bool            IsAbility1Held(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ability1);
bool            IsAbility2Held(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ability2);
bool            IsCrouchHeld(player p = EventPlayer()):                                     IsButtonHeld(p, Button.Crouch);
bool            IsInteractHeld(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Interact);
bool            IsJumpHeld(player p = EventPlayer()):                                       IsButtonHeld(p, Button.Jump);
bool            IsMeleeHeld(player p = EventPlayer()):                                      IsButtonHeld(p, Button.Melee);
bool            IsPrimaryHeld(player p = EventPlayer()):                                    IsButtonHeld(p, Button.PrimaryFire);
bool            IsReloadHeld(player p = EventPlayer()):                                     IsButtonHeld(p, Button.Reload);
bool            IsSecondaryHeld(player p = EventPlayer()):                                  IsButtonHeld(p, Button.SecondaryFire);
bool            IsUltimateHeld(player p = EventPlayer()):                                   IsButtonHeld(p, Button.Ultimate);
color           RainbowColor():                                                             CustomColor(128 + 127 * CosineFromDegrees(Time() * 100),
                                                                                                        128 + 127 * CosineFromDegrees((Time() * 100) + 120),
                                                                                                        128 + 127 * CosineFromDegrees((Time() * 100) + 240), 
                                                                                                        250);
num             Kills(player p = EventPlayer()):                                            PlayerStat(p, PlayerStat.FinalBlows);
num             Deaths(player p = EventPlayer()):                                           PlayerStat(p, PlayerStat.Deaths);
num             DamageDealt(player p= EventPlayer()):                                       Round(PlayerStat(p, PlayerStat.AllDamageDealt));
num             DamageTaken(player p = EventPlayer()):                                      Round(PlayerStat(p, PlayerStat.DamageTaken));
num             Accuracy(player p = EventPlayer()):                                         Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100);
num             CritAccuracy(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100);
num             ScopedAccuracy(player p = EventPlayer()):                                   Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.ScopedAccuracy) * 100);
num             ScopedCritAccuracy(player p = EventPlayer()):                               Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.ScopedCriticalHitAccuracy) * 100);
num             EnvironmentalKills(player p = EventPlayer()):                               PlayerHeroStat(p, HeroOf(), PlayerHeroStat.EnvironmentalKills);
num             HealingDealt(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.HealingDealt));
num             HealingTaken(player p = EventPlayer()):                                     Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.HealingReceived));
num             SelfHealing(player p = EventPlayer()):                                      Round(PlayerHeroStat(p, HeroOf(), PlayerHeroStat.SelfHealing));
num             UltsUsed(player p = EventPlayer()):                                         PlayerStat(p, PlayerStat.UltimatesUsed);
num             UltsEarned(player p = EventPlayer()):                                       PlayerStat(p, PlayerStat.UltimatesEarned);
num             DamageBlocked(player p = EventPlayer()):                                    PlayerStat(p, PlayerStat.DamageBlocked);
str             AltFont(any s):                                                             <"â€¨<0>â€¨", s>;

enum SpectatorButton
{
    Q = Button.Ability1,
    E = Button.Interact,
    Shift = Button.SecondaryFire,
    Ctrl = Button.PrimaryFire,
    M1 = Button.Ability2,
    B = Button.Jump,
    Z = Button.Ultimate
}

class Math {
    public static num PI: Pi();
    public static num E: 2.71828182845904523536;
    public static num Floor(num n): RoundToInteger(n, Rounding.Down);
    public static num Ceiling(num n): RoundToInteger(n, Rounding.Up);
    public static num Near(num n): RoundToInteger(n);
    public static num Quotient(num n, num d): Floor(n / d);
    public static num Clamp(num n, num min, num max): Max(min, Min(n, max));
    public static num IsInRange(num n, num min, num max): n >= min && n <= max;
    public static vec KinematicMotion3D(vec startPos, vec startVelocity, vec acceleration, num time):
        startPos + startVelocity * time + 0.5 * acceleration * time * time;
    public static num KinematicMotion1D(num startPos, num startVelocity, num acceleration, num time):
        startPos + startVelocity * time + 0.5 * acceleration * time * time;
}

class ComponentColor {
    public num Red;
    public num Green;
    public num Blue;
    public num Alpha;
    public ComponentColor(num red = 255, num green = 255, num blue = 255, num alpha = 255) {
        this.Red    = red;
        this.Green  = green;
        this.Blue   = blue;
        this.Alpha  = alpha;
    }
    public ComponentColor(color c) {
        num cIndex = IndexOfArrayValue(Colors.AllColors, c);
        this.Red   = Colors.AllColorComponents[cIndex][0];
        this.Green = Colors.AllColorComponents[cIndex][1];
        this.Blue  = Colors.AllColorComponents[cIndex][2];
        this.Alpha = Colors.AllColorComponents[cIndex][3];
    }
    public color Out(): CustomColor(Red, Green, Blue, Alpha);
}

class Colors {
    public static color Gradient(ComponentColor color1, ComponentColor color2, num fraction):
        CustomColor(
            LinearInterpolate(color1.Red,   color2.Red,   fraction),
            LinearInterpolate(color1.Green, color2.Green, fraction),
            LinearInterpolate(color1.Blue,  color2.Blue,  fraction),
            LinearInterpolate(color1.Alpha, color2.Alpha, fraction)
        );

    public static color[] AllColors: 
        [Color.White, Color.Yellow, Color.Green, Color.Purple, Color.Red,
         Color.Blue, Color.Aqua, Color.Orange, Color.SkyBlue, Color.Turquoise,
         Color.LimeGreen, Color.Gray, Color.Violet, Color.Rose, Color.Black];
    public static str[] AllColorNames:
        ["White", "Yellow", "Green", "Purple", "Red",
         "Blue", "Aqua", "Orange", "SkyBlue", "Turquoise",
         "LimeGreen", "Gray", "Violet", "Rose", "Black"];
    public static num[][] AllColorComponents: 
        [[255, 255, 255, 255], [255, 255,   0, 255], [ 69, 255,  87, 255], 
         [161,  73, 197, 255], [200,   0,  19, 255], [ 39, 170, 255, 255], 
         [  0, 234, 234, 255], [236, 153,   0, 255], [108, 190, 244, 255], 
         [  0, 230, 151, 255], [160, 232,  27, 255], [127, 127, 127, 255], 
         [100,  50, 255, 255], [255,  50, 145, 255], [  0,   0,   0, 255]];
}

class EasingFunctions {
    private static num c1: 1.70158;
    private static num c2: c1 * 1.525;
    private static num c3: c1 + 1;
    private static num c4: (2 * Math.PI) / 3;
    private static num c5: (2 * Math.PI) / 4.5;
    private static num n1: 7.5625;
    private static num d1: 2.75;
    private static num pow2(num n): n * n;
    private static num pow3(num n): n * n * n;
    private static num pow4(num n): n * n * n * n;
    private static num pow5(num n): n * n * n * n * n;
    
    public static num EaseInSine(num frac): 1 - CosineFromRadians(frac*Math.PI/2);

    public static num EaseOutSine(num frac): SineFromRadians(frac*Math.PI/2);

    public static num EaseInOutSine(num frac): -(CosineFromDegrees(Math.PI*frac) - 1) / 2;

    public static num EaseInQuad(num frac): pow2(frac);

    public static num EaseOutQuad(num frac): 1 - pow2(1 - frac);
    
    public static num EaseInOutQuad(num frac):
        frac < 0.5 
            ? 2 * pow2(frac)
            : 1 - pow2(-2 * frac + 2) / 2;

    public static num EaseInCubic(num frac): pow3(frac);
    public static num EaseOutCubic(num frac): 1 - pow3(1 - frac);
    
    public static num EaseInOutCubic(num frac):
        frac < 0.5 
            ? 4 * pow3(frac) 
            : 1 - pow3(-2 * frac + 2) / 2;

    public static num EaseInQuart(num frac): pow4(frac);
    
    public static num EaseOutQuart(num frac): 1 - pow4(1 - frac);
    
    public static num EaseInOutQuart(num frac):
        frac < 0.5 
            ? 8 * pow4(frac)
            : 1 - pow4(-2 * frac + 2) / 2;
    
    public static num EaseInQuint(num frac): pow5(frac);
    
    public static num EaseOutQuint(num frac): 1 - pow5(1 - frac);
    
    public static num EaseInOutQuint(num frac):
        frac < 0.5 
            ? 16 * pow5(frac)
            : 1 - pow5(-2 * frac + 2) / 2;
    
    public static num EaseInExpo(num frac): frac == 0 ? 0 : 2^(10 * frac - 10);
    
    public static num EaseOutExpo(num frac): frac == 1 ? 1 : 1 - 2^(-10 * frac);
    
    public static num EaseInOutExpo(num frac):
        frac == 0 
            ? 0 
            : frac == 1 
                ? 1 
                : frac < 0.5 
                    ? 2 ^ (20 * frac - 10) / 2 
                    : (2 - 2 ^ (-20 * frac + 10)) / 2;
    
    public static num EaseInCirc(num frac): 1 - SquareRoot(1 - pow2(frac));
    
    public static num EaseOutCirc(num frac): SquareRoot(1 - pow2(frac - 1));
    
    public static num EaseInOutCirc(num frac):
        frac < 0.5
            ? (1 - SquareRoot(1 - pow2(2 * frac))) / 2
            : (SquareRoot(1 - pow2(-2 * frac + 2)) + 1) / 2;

    public static num EaseInBack(num frac): c3 * pow3(frac) - c1 * pow2(frac);
    
    public static num EaseOutBack(num frac): 1 + c3 * pow3(frac - 1) + c1 * pow2(frac - 1);
    
    public static num EaseInOutBack(num frac):
        frac < 0.5
            ? (pow2(2 * frac) * ((c2 + 1) * 2 * frac - c2)) / 2
            : (pow2(2 * frac - 2) * ((c2 + 1) * (frac * 2 - 2) + c2) + 2) / 2;
    
    public static num EaseInElastic(num frac):
        frac == 0 
        ? 0 
        : frac == 1 
            ? 1
            : -(2 ^ (10 * frac - 10)) * SineFromRadians((frac * 10 - 10.75) * c4);
    
    public static num EaseOutElastic(num frac):
        frac == 0 
            ? 0 
            : frac == 1 
                ? 1
                : 2 ^ (-10 * frac) * SineFromRadians((frac * 10 - 0.75) * c4) + 1;
    
    public static num EaseInOutElastic(num frac):
        frac == 0 
            ? 0 
            : frac == 1 
                ? 1 
                : frac < 0.5
                    ? -(2 ^ (20 * frac - 10) * SineFromRadians((20 * frac - 11.125) * c5)) / 2
                    : (2 ^ (-20 * frac + 10) * SineFromRadians((20 * frac - 11.125) * c5)) / 2 + 1;
            
    public static num EaseInBounce(num frac):
        1 - EaseOutBounce(1 - frac);

    public static num EaseOutBounce(num frac):
        frac < 1 / d1 
            ? n1 * pow2(frac)
            : frac < 2/d1 
                ? n1 * pow2(frac - 1.5/d1) + 0.75
                : frac < 2.5/d1 
                    ? n1 * pow2(frac - 2.25/d1) + 0.9375 
                    : n1 * pow2(frac - 2.625/d1) + 0.984375;

    public static num EaseInOutBounce(num frac):
        frac < 0.5
            ? (1 - EaseOutBounce(1 - 2 * frac)) / 2
            : (1 + EaseOutBounce(2 * frac - 1)) / 2;
}