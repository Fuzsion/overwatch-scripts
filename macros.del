define player:                      EventPlayer();
define all:                         AllPlayers();
define allLiving:                   AllLivingPlayers();
define host:                        HostPlayer();
Vector Facing():                    FacingDirectionOf();
define IsPrimaryHeld():             IsButtonHeld(player, Button.PrimaryFire);
define IsSecondaryHeld():           IsButtonHeld(player, Button.SecondaryFire);
define IsAbility1Held():            IsButtonHeld(player, Button.Ability1);
define IsAbility2Held():            IsButtonHeld(player, Button.Ability2);
define IsInteractHeld():            IsButtonHeld(player, Button.Interact);
define IsUltHeld():                 IsButtonHeld(player, Button.Ultimate);
define IsJumpHeld():                IsButtonHeld(player, Button.Jump);
define IsCrouchHeld():              IsButtonHeld(player, Button.Crouch);
define IsReloadHeld():              IsButtonHeld(player, Button.Reload);
define IsMeleeHeld():               IsButtonHeld(player, Button.Melee);
define Time():                      TotalTimeElapsed();

// Abilities
define AllowPrimary():              AllowButton(player, Button.PrimaryFire);
define AllowSecondary():            AllowButton(player, Button.SecondaryFire);
define AllowAbility1():             AllowButton(player, Button.Ability1);
define AllowAbility2():             AllowButton(player, Button.Ability2);
define AllowUlt():                  AllowButton(player, Button.Ultimate);
define AllowReload():               AllowButton(player, Button.Reload);
define AllowJump():                 AllowButton(player, Button.Jump);
define AllowCrouch():               AllowButton(player, Button.Crouch);
define AllowMelee():                AllowButton(player, Button.Melee);

define DisablePrimary():            DisallowButton(player, Button.PrimaryFire);
define DisableSecondary():          DisallowButton(player, Button.SecondaryFire);
define DisableAbility1():           DisallowButton(player, Button.Ability1);
define DisableAbility2():           DisallowButton(player, Button.Ability2);
define DisableUlt():                DisallowButton(player, Button.Ultimate);
define DisableReload():             DisallowButton(player, Button.Reload);
define DisableJump():               DisallowButton(player, Button.Jump);
define DisableCrouch():             DisallowButton(player, Button.Crouch);
define DisableMelee():              DisallowButton(player, Button.Melee);

define WaitIfTrue(define time):     Wait(time, WaitBehavior.AbortWhenFalse); // Aborts the rule if the condition goes false while waiting
define EnemyPlayers():              AllPlayers(OppositeTeamOf(TeamOf()));
define AllyPlayers():               AllPlayers(TeamOf());
define IsHero(ref define hero):     HeroOf() == hero;
define IsMap(ref define map):       CurrentMap() == map;
define Curr():                      ArrayElement();

// HUD Text
define RainbowColor():                  CustomColor(128 + 127 * CosineFromDegrees(Time() * 100),
                                                128 + 127 * CosineFromDegrees((Time() * 100) + 120),
                                                128 + 127 * CosineFromDegrees((Time() * 100) + 240), 
                                                250);

// Debug Text
define ThrottleText():              CreateHudText(player, null, <"Throttle: <0>", ThrottleOf()>, null, Location.Right, -1);
define SpeedText():                 CreateHudText(player, null, <"Speed: <0> M/S", HorizontalSpeedOf()>, null, Location.Right, -1);
define PositionText():              CreateHudText(player, null, <"Position: <0>", PositionOf()>, null, Location.Right, -1);
define FacingText():                CreateHudText(player, null, <"Facing Direction: <0>", FacingDirectionOf()>, null, Location.Right, -1);
define HorizontalFacingText():      CreateHudText(player, null, <"Horizontal Facing Direction: <0>", HorizontalFacingAngleOf()>, null, Location.Right, -1);
define VerticalFacingText():        CreateHudText(player, null, <"Vertical Facing Direction: <0>", VerticalFacingAngleOf()>, null, Location.Right, -1);

define Kills(define Player): PlayerStat(Player, PlayerStat.FinalBlows);
define Deaths(define Player): PlayerStat(Player, PlayerStat.Deaths);
define DamageDealt(define Player): RoundToInteger(PlayerStat(Player, PlayerStat.AllDamageDealt), Rounding.Nearest);
define DamageTaken(define Player): RoundToInteger(PlayerStat(Player, PlayerStat.DamageTaken), Rounding.Nearest);
define Accuracy(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.WeaponAccuracy) * 100, Rounding.Nearest);
define CritAccuracy(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.CriticalHitAccuracy) * 100, Rounding.Nearest);
define ScopedAccuracy(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.ScopedAccuracy) * 100, Rounding.Nearest);
define ScopedCritAccuracy(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.ScopedCriticalHitAccuracy) * 100, Rounding.Nearest);
define EnvironmentalKills(define Player): PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.EnvironmentalKills);
define HealingDealt(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.HealingDealt), Rounding.Nearest);
define HealingTaken(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.HealingReceived), Rounding.Nearest);
define SelfHealing(define Player): RoundToInteger(PlayerHeroStat(Player, HeroOf(), PlayerHeroStat.SelfHealing), Rounding.Nearest);
define UltsUsed(define Player): PlayerStat(Player, PlayerStat.UltimatesUsed);
define UltsEarned(define Player): PlayerStat(Player, PlayerStat.UltimatesEarned);
define DamageBlocked(define Player): PlayerStat(Player, PlayerHeroStat.DamageBlocked);
