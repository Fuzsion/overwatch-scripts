/* Macros */
macro player: EventPlayer();
macro host:   HostPlayer();

/* Global Vars */
globalvar define noSpawnRoomExists;

/* Player Vars */
playervar define hero;
playervar define notFirstSpawn;
playervar define heroSwitch;
playervar define owner;
playervar define botAlive;
playervar define botReplaced;
playervar define botRespawn;
playervar define hasCCStatus;
playervar define persistentMovement;

rule: "Init"
   {
      CreateHudText(host, null, null, <"Position : <0>", PositionOf(host)>, Location.Top, -45);
      CreateHudText(host, null, null, <"Facing Direction : <0>", FacingDirectionOf(host)>, Location.Top, -55);
      CreateHudText(host, null, null, <"Server Load : (<0>% Cur | <1>% Avg | <2>% Peak)", ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>, Location.Top, -100);
      PauseMatchTime();
   }

rule: "Is CCed"
   Event.OngoingPlayer
   if (HasStatus(player, Status.Asleep) || 
   HasStatus(player, Status.Frozen) || 
   HasStatus(player, Status.KnockedDown) || 
   HasStatus(player, Status.Rooted) || 
   HasStatus(player, Status.Stunned) || 
   HasStatus(owner, Status.Asleep) || 
   HasStatus(owner, Status.Frozen) || 
   HasStatus(owner, Status.KnockedDown) || 
   HasStatus(owner, Status.Rooted) || 
   HasStatus(owner, Status.Stunned))
   {
      hasCCStatus = true
   }

rule: "Is not CCed"
   Event.OngoingPlayer
   if (!HasStatus(player, Status.Asleep) && 
      !HasStatus(player, Status.Frozen) && 
      !HasStatus(player, Status.KnockedDown) && 
      !HasStatus(player, Status.Rooted) && 
      !HasStatus(player, Status.Stunned) && 
      !HasStatus(owner, Status.Asleep) && 
      !HasStatus(owner, Status.Frozen) && 
      !HasStatus(owner, Status.KnockedDown) && 
      !HasStatus(owner, Status.Rooted) && 
      !HasStatus(owner, Status.Stunned))
   {
      hasCCStatus = false
   }

rule: "Maps with no spawnroom array"
   if (CurrentMap() == MapVar(Map.Workshop_Chamber) || 
   CurrentMap() == MapVar(Map.Workshop_Expanse) || 
   CurrentMap() == MapVar(Map.Workshop_Island) || 
   CurrentMap() == MapVar(Map.Chateau_Guillard) || 
   CurrentMap() == MapVar(Map.Chateau_Guillard_Halloween) || 
   CurrentMap() == MapVar(Map.Petra))
   {
      noSpawnRoomExists = true
   }

rule: "Movement Ability Array On"
   Event.OngoingPlayer
   if (IsUsingAbility1() && (hero == Hero.Reinhardt || hero == Hero.Dva))
   {
      persistentMovement = true
   }

rule: "Movement Ability Array Off"
   Event.OngoingPlayer
   if (!IsUsingAbility1() && (hero == Hero.Reinhardt || hero == Hero.Dva))
   {
      persistentMovement = false;
   }

rule: "Bots have ult whenever player has ult"
   Event.OngoingPlayer
   if (UltimateChargePercent(owner) == 100 && IsAlive(owner))
   {
      SetUltimateAbilityEnabled(player, true);
      SetUltimateCharge(player, 100);
   }


rule: "Disable bot ult"
    Event.OngoingPlayer
    if (!IsUsingUltimate(owner) && IsDummyBot())
    {
        SetUltimateAbilityEnabled(player, false);
    }

rule: "Announce when Bots have ult"
   Event.OngoingPlayer
   if (IsDummyBot() && UltimateChargePercent() == 100)
   {
      Communicate(AllPlayers(TeamOf(owner)), Communication.UltimateStatus);
   }

rule: "Create HUD Text"
   Event.OngoingPlayer
   if (IsDummyBot())
   {
      Wait(1.5)

      /* spacing */
      CreateHudText(FilteredArray(owner, EntityExists(player)), null, " ", " ", Location.Left, -1)
      CreateHudText(FilteredArray(owner, EntityExists(player)), null, " ", " ", Location.Left, -1)
      CreateHudText(FilteredArray(owner, EntityExists(player)), null, " ", " ", Location.Left, -1)
      MinWait()

      /* bot healthy */
      CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && NormalizedHealth() > 0.75), // Visible To
                    HeroIconString(HeroOf()), // Header
                    null, // Subheader
                    <"  <0> HP", /* (RoundToInteger(NormalizedHealth() * 100, Rounding.Nearest) */ (RoundToInteger(Health(), Rounding.Nearest))>, // Text
                    Location.Left, // Location
                    SlotOf(), // Sort Order :: SlotOf() fixes re-sort on health update
                    Color.Green, // Header Color
                    Color.Green, // Subheader Color
                    Color.Green, // Text Color
                    StringRev.VisibleToAndString, // Reevaluation
                    Spectators.DefaultVisibility); // Spectators

      /* bot hurt */
      CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && NormalizedHealth() < 0.75 && NormalizedHealth() > 0.35), // Visible To
                    HeroIconString(HeroOf()), // Header
                    null, // Subheader
                    <"  <0> HP", /* (RoundToInteger(NormalizedHealth() * 100, Rounding.Nearest) */ (RoundToInteger(Health(), Rounding.Nearest))>, // Text
                    Location.Left, // Location
                    SlotOf(), // Sort Order :: SlotOf() fixes re-sort on health update
                    Color.Yellow, // Header Color
                    Color.Yellow, // Subheader Color
                    Color.Yellow, // Text Color
                    StringRev.VisibleToAndString, // Reevaluation
                    Spectators.DefaultVisibility); // Spectators

      /* bot critical */
      CreateHudText(FilteredArray(owner, EntityExists(player) && IsAlive() && NormalizedHealth() < 0.35), // Visible To
                    HeroIconString(HeroOf()), // Header
                    null, // Subheader
                    <"  <0> HP", /* (RoundToInteger(NormalizedHealth() * 100, Rounding.Nearest) */ (RoundToInteger(Health(), Rounding.Nearest))>, // Text
                    Location.Left, // Location
                    SlotOf(), // Sort Order :: SlotOf() fixes re-sort on health update
                    Color.Red, // Header Color
                    Color.Red, // Subheader Color
                    Color.Red, // Text Color
                    StringRev.VisibleToAndString, // Reevaluation
                    Spectators.DefaultVisibility); // Spectators

      /* bot dead */
      CreateHudText(FilteredArray(owner, EntityExists(player) && IsDead()), // Visible To
                    HeroIconString(HeroOf()), // Header
                    null, // Subheader
                    "  Dead", // Text
                    Location.Left, // Location
                    SlotOf(), // Sort Order :: SlotOf() fixes re-sort on health update
                    Color.Red, // Header Color
                    Color.Red, // Subheader Color
                    Color.Red, // Text Color
                    StringRev.VisibleToAndString, // Reevaluation
                    Spectators.DefaultVisibility) // Spectators
   }


/* Input Emulation - Start */
rule: "Bot :: Pressed Primary"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.PrimaryFire))
   {
      StartHoldingButton(player, Button.PrimaryFire);
   }

rule: "Bot :: Pressed Secondary"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.SecondaryFire))
   {
      StartHoldingButton(player, Button.SecondaryFire);
   }

rule: "Bot :: Pressed Ability 1"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Ability1))
   {
      StartHoldingButton(player, Button.Ability1);
   }

rule: "Bot :: Pressed Ability 2"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Ability2))
   {
      StartHoldingButton(player, Button.Ability2);
   }

rule: "Bot :: Pressed Ultimate"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Ultimate))
   {
      StartHoldingButton(player, Button.Ultimate);
   }

rule: "Bot :: Pressed Jump"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Jump))
   {
      StartHoldingButton(player, Button.Jump)
   }

rule: "Bot :: Pressed Crouch"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Crouch))
   {
      StartHoldingButton(player, Button.Crouch)
   }

rule: "Bot :: Pressed Melee"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Melee))
   {
      StartHoldingButton(player, Button.Melee);
   }

rule: "Bot :: Pressed Reload"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Reload))
   {
      StartHoldingButton(player, Button.Reload);
   }

rule: "Bot :: Pressed Interact"
   Event.OngoingPlayer
   if (botAlive && IsButtonHeld(owner, Button.Interact))
   {
      StartHoldingButton(player, Button.Interact)
   }

rule: "Bot :: Released Primary"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.PrimaryFire))
   {
      StopHoldingButton(player, Button.PrimaryFire);
   }

rule: "Bot :: Released Secondary"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.SecondaryFire))
   {
      StopHoldingButton(player, Button.SecondaryFire);
   }

rule: "Bot :: Released Ability 1"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Ability1))
   {
      StopHoldingButton(player, Button.Ability1);
   }

rule: "Bot :: Released Ability 2"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Ability2))
   {
      StopHoldingButton(player, Button.Ability2);
   }

rule: "Bot :: Released Ultimate"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Ultimate))
   {
      StopHoldingButton(player, Button.Ultimate);
   }

rule: "Bot :: Released Jump"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Jump))
   {
      StopHoldingButton(player, Button.Jump)
   }

rule: "Bot :: Released Crouch"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Crouch))
   {
      StopHoldingButton(player, Button.Crouch)
   }

rule: "Bot :: Released Melee"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Melee))
   {
      StopHoldingButton(player, Button.Melee);
   }

rule: "Bot :: Released Reload"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Reload))
   {
      StopHoldingButton(player, Button.Reload);
   }

rule: "Bot :: Released Interact"
   Event.OngoingPlayer
   if (botAlive && !IsButtonHeld(owner, Button.Interact))
   {
      StopHoldingButton(player, Button.Interact);
   }
/* Input Emulation - End */
